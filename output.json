{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "Literal",
        "value": "use strict",
        "raw": "use strict"
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "SequenceExpression",
        "expressions": [
          {
            "type": "CallExpression",
            "callee": {
              "type": "FunctionExpression",
              "id": null,
              "params": [
                {
                  "type": "BindingIdentifier",
                  "name": "global"
                },
                {
                  "type": "BindingIdentifier",
                  "name": "factory"
                }
              ],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "&&",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "UnaryExpression",
                            "operator": "typeof",
                            "argument": {
                              "type": "Identifier",
                              "name": "exports"
                            },
                            "prefix": true
                          },
                          "right": {
                            "type": "Literal",
                            "value": "object",
                            "raw": "object"
                          }
                        },
                        "right": {
                          "type": "BinaryExpression",
                          "operator": "!==",
                          "left": {
                            "type": "UnaryExpression",
                            "operator": "typeof",
                            "argument": {
                              "type": "Identifier",
                              "name": "module"
                            },
                            "prefix": true
                          },
                          "right": {
                            "type": "Literal",
                            "value": "undefined",
                            "raw": "undefined"
                          }
                        }
                      },
                      "consequent": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "StaticMemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "module"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "exports"
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "factory"
                          },
                          "arguments": []
                        }
                      },
                      "alternate": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "&&",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "typeof",
                              "argument": {
                                "type": "Identifier",
                                "name": "define"
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "Literal",
                              "value": "function",
                              "raw": "function"
                            }
                          },
                          "right": {
                            "type": "StaticMemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "define"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "amd"
                            }
                          }
                        },
                        "consequent": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "define"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "factory"
                            }
                          ]
                        },
                        "alternate": {
                          "type": "SequenceExpression",
                          "expressions": [
                            {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "StaticMemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "global"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "React"
                                }
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "factory"
                                },
                                "arguments": []
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              },
              "generator": false,
              "expression": false,
              "async": false
            },
            "arguments": [
              {
                "type": "ThisExpression"
              },
              {
                "type": "SequenceExpression",
                "expressions": [
                  {
                    "type": "FunctionExpression",
                    "id": null,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "Literal",
                            "value": "use strict",
                            "raw": "use strict"
                          }
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "ReactVersion"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "16.12.0",
                                "raw": "16.12.0"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "hasSymbol"
                              },
                              "init": {
                                "type": "BinaryExpression",
                                "operator": "&&",
                                "left": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "UnaryExpression",
                                    "operator": "typeof",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "prefix": true
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "function",
                                    "raw": "function"
                                  }
                                },
                                "right": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "Symbol"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "for"
                                  }
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "REACT_ELEMENT_TYPE"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "hasSymbol"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "for"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "react.element",
                                      "raw": "react.element"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": 60103.0,
                                  "raw": "60103"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "REACT_PORTAL_TYPE"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "hasSymbol"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "for"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "react.portal",
                                      "raw": "react.portal"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": 60106.0,
                                  "raw": "60106"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "REACT_FRAGMENT_TYPE"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "hasSymbol"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "for"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "react.fragment",
                                      "raw": "react.fragment"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": 60107.0,
                                  "raw": "60107"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "REACT_STRICT_MODE_TYPE"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "hasSymbol"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "for"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "react.strict_mode",
                                      "raw": "react.strict_mode"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": 60108.0,
                                  "raw": "60108"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "REACT_PROFILER_TYPE"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "hasSymbol"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "for"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "react.profiler",
                                      "raw": "react.profiler"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": 60114.0,
                                  "raw": "60114"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "REACT_PROVIDER_TYPE"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "hasSymbol"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "for"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "react.provider",
                                      "raw": "react.provider"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": 60109.0,
                                  "raw": "60109"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "REACT_CONTEXT_TYPE"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "hasSymbol"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "for"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "react.context",
                                      "raw": "react.context"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": 60110.0,
                                  "raw": "60110"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "REACT_CONCURRENT_MODE_TYPE"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "hasSymbol"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "for"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "react.concurrent_mode",
                                      "raw": "react.concurrent_mode"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": 60111.0,
                                  "raw": "60111"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "REACT_FORWARD_REF_TYPE"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "hasSymbol"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "for"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "react.forward_ref",
                                      "raw": "react.forward_ref"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": 60112.0,
                                  "raw": "60112"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "REACT_SUSPENSE_TYPE"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "hasSymbol"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "for"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "react.suspense",
                                      "raw": "react.suspense"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": 60113.0,
                                  "raw": "60113"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "REACT_SUSPENSE_LIST_TYPE"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "hasSymbol"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "for"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "react.suspense_list",
                                      "raw": "react.suspense_list"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": 60120.0,
                                  "raw": "60120"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "REACT_MEMO_TYPE"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "hasSymbol"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "for"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "react.memo",
                                      "raw": "react.memo"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": 60115.0,
                                  "raw": "60115"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "REACT_LAZY_TYPE"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "hasSymbol"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "for"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "react.lazy",
                                      "raw": "react.lazy"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": 60116.0,
                                  "raw": "60116"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "REACT_FUNDAMENTAL_TYPE"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "hasSymbol"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "for"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "react.fundamental",
                                      "raw": "react.fundamental"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": 60117.0,
                                  "raw": "60117"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "REACT_RESPONDER_TYPE"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "hasSymbol"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "for"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "react.responder",
                                      "raw": "react.responder"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": 60118.0,
                                  "raw": "60118"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "REACT_SCOPE_TYPE"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "hasSymbol"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "for"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "react.scope",
                                      "raw": "react.scope"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": 60119.0,
                                  "raw": "60119"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "MAYBE_ITERATOR_SYMBOL"
                              },
                              "init": {
                                "type": "BinaryExpression",
                                "operator": "&&",
                                "left": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "UnaryExpression",
                                    "operator": "typeof",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "prefix": true
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "function",
                                    "raw": "function"
                                  }
                                },
                                "right": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "Symbol"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "iterator"
                                  }
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "FAUX_ITERATOR_SYMBOL"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "@@iterator",
                                "raw": "@@iterator"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "getIteratorFn"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "maybeIterable"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "||",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "maybeIterable"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "typeof",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "maybeIterable"
                                      },
                                      "prefix": true
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": "object",
                                      "raw": "object"
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Literal",
                                        "value": null,
                                        "raw": "null"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "maybeIterator"
                                    },
                                    "init": {
                                      "type": "BinaryExpression",
                                      "operator": "||",
                                      "left": {
                                        "type": "BinaryExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "MAYBE_ITERATOR_SYMBOL"
                                        },
                                        "right": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "maybeIterable"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "MAYBE_ITERATOR_SYMBOL"
                                          }
                                        }
                                      },
                                      "right": {
                                        "type": "ComputedMemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "maybeIterable"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "FAUX_ITERATOR_SYMBOL"
                                        }
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "UnaryExpression",
                                    "operator": "typeof",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "maybeIterator"
                                    },
                                    "prefix": true
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "function",
                                    "raw": "function"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "maybeIterator"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Literal",
                                  "value": null,
                                  "raw": "null"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "getOwnPropertySymbols"
                              },
                              "init": {
                                "type": "StaticMemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "Object"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "getOwnPropertySymbols"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "hasOwnProperty"
                              },
                              "init": {
                                "type": "StaticMemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "Object"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "prototype"
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "hasOwnProperty"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "propIsEnumerable"
                              },
                              "init": {
                                "type": "StaticMemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "Object"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "prototype"
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "propertyIsEnumerable"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "toObject"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "val"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "||",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "val"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "val"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "undefined"
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ThrowStatement",
                                      "argument": {
                                        "type": "NewExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "TypeError"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "Object.assign cannot be called with null or undefined",
                                            "raw": "Object.assign cannot be called with null or undefined"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "Object"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "val"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "shouldUseNative"
                          },
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "TryStatement",
                                "block": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "UnaryExpression",
                                        "operator": "!",
                                        "argument": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "Object"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "assign"
                                          }
                                        },
                                        "prefix": true
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ReturnStatement",
                                            "argument": {
                                              "type": "Literal",
                                              "value": "false",
                                              "raw": "false"
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "test1"
                                          },
                                          "init": {
                                            "type": "NewExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "String"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "abc",
                                                "raw": "abc"
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "test1"
                                          },
                                          "property": {
                                            "type": "Literal",
                                            "value": 5.0,
                                            "raw": "5"
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "de",
                                          "raw": "de"
                                        }
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "Object"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "getOwnPropertyNames"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "test1"
                                              }
                                            ]
                                          },
                                          "property": {
                                            "type": "Literal",
                                            "value": 0.0,
                                            "raw": "0"
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "5",
                                          "raw": "5"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ReturnStatement",
                                            "argument": {
                                              "type": "Literal",
                                              "value": "false",
                                              "raw": "false"
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "test2"
                                          },
                                          "init": {
                                            "type": "ObjectExpression",
                                            "properties": []
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ForStatement",
                                      "init": {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "BindingIdentifier",
                                              "name": "i"
                                            },
                                            "init": {
                                              "type": "Literal",
                                              "value": 0.0,
                                              "raw": "0"
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "<",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "i"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": 10.0,
                                          "raw": "10"
                                        }
                                      },
                                      "update": {
                                        "type": "UpdateExpression",
                                        "operator": "++",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "i"
                                        },
                                        "prefix": false
                                      },
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "ComputedMemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "test2"
                                                },
                                                "property": {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "Literal",
                                                    "value": "_",
                                                    "raw": "_"
                                                  },
                                                  "right": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "String"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "fromCharCode"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "i"
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "i"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "order2"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "Object"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "getOwnPropertyNames"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "test2"
                                                  }
                                                ]
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "map"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "FunctionExpression",
                                                "id": null,
                                                "params": [
                                                  {
                                                    "type": "BindingIdentifier",
                                                    "name": "n"
                                                  }
                                                ],
                                                "body": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ReturnStatement",
                                                      "argument": {
                                                        "type": "ComputedMemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "test2"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "n"
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "generator": false,
                                                "expression": false,
                                                "async": false
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "order2"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "join"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Literal",
                                              "value": "",
                                              "raw": ""
                                            }
                                          ]
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "0123456789",
                                          "raw": "0123456789"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ReturnStatement",
                                            "argument": {
                                              "type": "Literal",
                                              "value": "false",
                                              "raw": "false"
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "test3"
                                          },
                                          "init": {
                                            "type": "ObjectExpression",
                                            "properties": []
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Literal",
                                                "value": "abcdefghijklmnopqrst",
                                                "raw": "abcdefghijklmnopqrst"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "split"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "",
                                                "raw": ""
                                              }
                                            ]
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "forEach"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [
                                              {
                                                "type": "BindingIdentifier",
                                                "name": "letter"
                                              }
                                            ],
                                            "body": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "ComputedMemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "test3"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "letter"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "letter"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "generator": false,
                                            "expression": false,
                                            "async": false
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "Object"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "keys"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "Object"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "assign"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "test3"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "join"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Literal",
                                              "value": "",
                                              "raw": ""
                                            }
                                          ]
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "abcdefghijklmnopqrst",
                                          "raw": "abcdefghijklmnopqrst"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ReturnStatement",
                                            "argument": {
                                              "type": "Literal",
                                              "value": "false",
                                              "raw": "false"
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Literal",
                                        "value": "true",
                                        "raw": "true"
                                      }
                                    }
                                  ]
                                },
                                "handler": {
                                  "type": "CatchClause",
                                  "param": {
                                    "type": "BindingIdentifier",
                                    "name": "err"
                                  },
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Literal",
                                          "value": "false",
                                          "raw": "false"
                                        }
                                      }
                                    ]
                                  }
                                },
                                "finalizer": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "objectAssign"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "shouldUseNative"
                                  },
                                  "arguments": []
                                },
                                "consequent": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "Object"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "assign"
                                  }
                                },
                                "alternate": {
                                  "type": "FunctionExpression",
                                  "id": null,
                                  "params": [
                                    {
                                      "type": "BindingIdentifier",
                                      "name": "target"
                                    },
                                    {
                                      "type": "BindingIdentifier",
                                      "name": "source"
                                    }
                                  ],
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "BindingIdentifier",
                                              "name": "from"
                                            },
                                            "init": null
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "BindingIdentifier",
                                              "name": "to"
                                            },
                                            "init": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "toObject"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "target"
                                                }
                                              ]
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "BindingIdentifier",
                                              "name": "symbols"
                                            },
                                            "init": null
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "ForStatement",
                                        "init": {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "BindingIdentifier",
                                                "name": "s"
                                              },
                                              "init": {
                                                "type": "Literal",
                                                "value": 1.0,
                                                "raw": "1"
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "<",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "s"
                                          },
                                          "right": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "arguments"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "length"
                                            }
                                          }
                                        },
                                        "update": {
                                          "type": "UpdateExpression",
                                          "operator": "++",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "s"
                                          },
                                          "prefix": false
                                        },
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "from"
                                                },
                                                "right": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "Object"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "ComputedMemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "arguments"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "s"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "ForInStatement",
                                              "left": {
                                                "type": "BindingIdentifier",
                                                "name": "key"
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "from"
                                              },
                                              "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "StaticMemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "hasOwnProperty"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "call"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "from"
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "name": "key"
                                                        }
                                                      ]
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "ComputedMemberExpression",
                                                              "computed": true,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "to"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "key"
                                                              }
                                                            },
                                                            "right": {
                                                              "type": "ComputedMemberExpression",
                                                              "computed": true,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "from"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "key"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  }
                                                ]
                                              },
                                              "each": false
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "Identifier",
                                                "name": "getOwnPropertySymbols"
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "symbols"
                                                      },
                                                      "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "getOwnPropertySymbols"
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "from"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "ForStatement",
                                                    "init": {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "BindingIdentifier",
                                                            "name": "i"
                                                          },
                                                          "init": {
                                                            "type": "Literal",
                                                            "value": 0.0,
                                                            "raw": "0"
                                                          }
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    "test": {
                                                      "type": "BinaryExpression",
                                                      "operator": "<",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "i"
                                                      },
                                                      "right": {
                                                        "type": "StaticMemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "symbols"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "length"
                                                        }
                                                      }
                                                    },
                                                    "update": {
                                                      "type": "UpdateExpression",
                                                      "operator": "++",
                                                      "argument": {
                                                        "type": "Identifier",
                                                        "name": "i"
                                                      },
                                                      "prefix": false
                                                    },
                                                    "body": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "IfStatement",
                                                          "test": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "StaticMemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "propIsEnumerable"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "call"
                                                              }
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "from"
                                                              },
                                                              {
                                                                "type": "ComputedMemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "symbols"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "i"
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                              {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                  "type": "AssignmentExpression",
                                                                  "operator": "=",
                                                                  "left": {
                                                                    "type": "ComputedMemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "to"
                                                                    },
                                                                    "property": {
                                                                      "type": "ComputedMemberExpression",
                                                                      "computed": true,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "symbols"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "i"
                                                                      }
                                                                    }
                                                                  },
                                                                  "right": {
                                                                    "type": "ComputedMemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "from"
                                                                    },
                                                                    "property": {
                                                                      "type": "ComputedMemberExpression",
                                                                      "computed": true,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "symbols"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "i"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "alternate": null
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "to"
                                        }
                                      }
                                    ]
                                  },
                                  "generator": false,
                                  "expression": false,
                                  "async": false
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "lowPriorityWarningWithoutStack"
                              },
                              "init": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": []
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "BindingIdentifier",
                                    "name": "printWarning"
                                  },
                                  "init": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [
                                      {
                                        "type": "BindingIdentifier",
                                        "name": "format"
                                      }
                                    ],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ForStatement",
                                          "init": {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "BindingIdentifier",
                                                  "name": "_len"
                                                },
                                                "init": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "arguments"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "length"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "BindingIdentifier",
                                                  "name": "args"
                                                },
                                                "init": {
                                                  "type": "NewExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "Array"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "ConditionalExpression",
                                                      "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": ">",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "_len"
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": 1.0,
                                                          "raw": "1"
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "BinaryExpression",
                                                        "operator": "-",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "_len"
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": 1.0,
                                                          "raw": "1"
                                                        }
                                                      },
                                                      "alternate": {
                                                        "type": "Literal",
                                                        "value": 0.0,
                                                        "raw": "0"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "BindingIdentifier",
                                                  "name": "_key"
                                                },
                                                "init": {
                                                  "type": "Literal",
                                                  "value": 1.0,
                                                  "raw": "1"
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": "<",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "_key"
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "_len"
                                            }
                                          },
                                          "update": {
                                            "type": "UpdateExpression",
                                            "operator": "++",
                                            "argument": {
                                              "type": "Identifier",
                                              "name": "_key"
                                            },
                                            "prefix": false
                                          },
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "ComputedMemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "args"
                                                    },
                                                    "property": {
                                                      "type": "BinaryExpression",
                                                      "operator": "-",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "_key"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": 1.0,
                                                        "raw": "1"
                                                      }
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "ComputedMemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "arguments"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "_key"
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "BindingIdentifier",
                                                "name": "argIndex"
                                              },
                                              "init": {
                                                "type": "Literal",
                                                "value": 0.0,
                                                "raw": "0"
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "BindingIdentifier",
                                                "name": "message"
                                              },
                                              "init": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "Literal",
                                                  "value": "Warning: ",
                                                  "raw": "Warning: "
                                                },
                                                "right": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "format"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "replace"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "RegexLiteral",
                                                      "value": ",",
                                                      "raw": ",",
                                                      "regex": {
                                                        "type": "Regex",
                                                        "pattern": "",
                                                        "flags": [
                                                          "g"
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                              "type": "ComputedMemberExpression",
                                                              "computed": true,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "args"
                                                              },
                                                              "property": {
                                                                "type": "UpdateExpression",
                                                                "operator": "++",
                                                                "argument": {
                                                                  "type": "Identifier",
                                                                  "name": "argIndex"
                                                                },
                                                                "prefix": false
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "generator": false,
                                                      "expression": false,
                                                      "async": false
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": "!==",
                                            "left": {
                                              "type": "UnaryExpression",
                                              "operator": "typeof",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "console"
                                              },
                                              "prefix": true
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": "undefined",
                                              "raw": "undefined"
                                            }
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "console"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "warn"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "message"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        },
                                        {
                                          "type": "TryStatement",
                                          "block": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ThrowStatement",
                                                "argument": {
                                                  "type": "NewExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "Error"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "message"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "handler": {
                                            "type": "CatchClause",
                                            "param": {
                                              "type": "BindingIdentifier",
                                              "name": "x"
                                            },
                                            "body": {
                                              "type": "BlockStatement",
                                              "body": []
                                            }
                                          },
                                          "finalizer": null
                                        }
                                      ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "lowPriorityWarningWithoutStack"
                                },
                                "right": {
                                  "type": "FunctionExpression",
                                  "id": null,
                                  "params": [
                                    {
                                      "type": "BindingIdentifier",
                                      "name": "condition"
                                    },
                                    {
                                      "type": "BindingIdentifier",
                                      "name": "format"
                                    }
                                  ],
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "===",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "format"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "undefined"
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ThrowStatement",
                                              "argument": {
                                                "type": "NewExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "Error"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "Literal",
                                                      "value": "`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ",
                                                      "raw": "`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning "
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": "message argument",
                                                      "raw": "message argument"
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "UnaryExpression",
                                          "operator": "!",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "condition"
                                          },
                                          "prefix": true
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ForStatement",
                                              "init": {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "BindingIdentifier",
                                                      "name": "_len2"
                                                    },
                                                    "init": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "arguments"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "length"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "BindingIdentifier",
                                                      "name": "args"
                                                    },
                                                    "init": {
                                                      "type": "NewExpression",
                                                      "callee": {
                                                        "type": "Identifier",
                                                        "name": "Array"
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "ConditionalExpression",
                                                          "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": ">",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "_len2"
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": 2.0,
                                                              "raw": "2"
                                                            }
                                                          },
                                                          "consequent": {
                                                            "type": "BinaryExpression",
                                                            "operator": "-",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "_len2"
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": 2.0,
                                                              "raw": "2"
                                                            }
                                                          },
                                                          "alternate": {
                                                            "type": "Literal",
                                                            "value": 0.0,
                                                            "raw": "0"
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "BindingIdentifier",
                                                      "name": "_key2"
                                                    },
                                                    "init": {
                                                      "type": "Literal",
                                                      "value": 2.0,
                                                      "raw": "2"
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              "test": {
                                                "type": "BinaryExpression",
                                                "operator": "<",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "_key2"
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "_len2"
                                                }
                                              },
                                              "update": {
                                                "type": "UpdateExpression",
                                                "operator": "++",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "_key2"
                                                },
                                                "prefix": false
                                              },
                                              "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "ComputedMemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "args"
                                                        },
                                                        "property": {
                                                          "type": "BinaryExpression",
                                                          "operator": "-",
                                                          "left": {
                                                            "type": "Identifier",
                                                            "name": "_key2"
                                                          },
                                                          "right": {
                                                            "type": "Literal",
                                                            "value": 2.0,
                                                            "raw": "2"
                                                          }
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "ComputedMemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "arguments"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "_key2"
                                                        }
                                                      }
                                                    }
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "printWarning"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "apply"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "UnaryExpression",
                                                    "operator": "void",
                                                    "argument": {
                                                      "type": "Literal",
                                                      "value": 0.0,
                                                      "raw": "0"
                                                    },
                                                    "prefix": true
                                                  },
                                                  {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "ArrayExpression",
                                                        "elements": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "format"
                                                          }
                                                        ]
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "concat"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "args"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      }
                                    ]
                                  },
                                  "generator": false,
                                  "expression": false,
                                  "async": false
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "lowPriorityWarningWithoutStack$1"
                              },
                              "init": {
                                "type": "Identifier",
                                "name": "lowPriorityWarningWithoutStack"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "warningWithoutStack"
                              },
                              "init": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": []
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "warningWithoutStack"
                                },
                                "right": {
                                  "type": "FunctionExpression",
                                  "id": null,
                                  "params": [
                                    {
                                      "type": "BindingIdentifier",
                                      "name": "condition"
                                    },
                                    {
                                      "type": "BindingIdentifier",
                                      "name": "format"
                                    }
                                  ],
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ForStatement",
                                        "init": {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "BindingIdentifier",
                                                "name": "_len"
                                              },
                                              "init": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "arguments"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "length"
                                                }
                                              }
                                            },
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "BindingIdentifier",
                                                "name": "args"
                                              },
                                              "init": {
                                                "type": "NewExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "Array"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "ConditionalExpression",
                                                    "test": {
                                                      "type": "BinaryExpression",
                                                      "operator": ">",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "_len"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": 2.0,
                                                        "raw": "2"
                                                      }
                                                    },
                                                    "consequent": {
                                                      "type": "BinaryExpression",
                                                      "operator": "-",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "_len"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": 2.0,
                                                        "raw": "2"
                                                      }
                                                    },
                                                    "alternate": {
                                                      "type": "Literal",
                                                      "value": 0.0,
                                                      "raw": "0"
                                                    }
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "BindingIdentifier",
                                                "name": "_key"
                                              },
                                              "init": {
                                                "type": "Literal",
                                                "value": 2.0,
                                                "raw": "2"
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "<",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "_key"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "_len"
                                          }
                                        },
                                        "update": {
                                          "type": "UpdateExpression",
                                          "operator": "++",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "_key"
                                          },
                                          "prefix": false
                                        },
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "ComputedMemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "args"
                                                  },
                                                  "property": {
                                                    "type": "BinaryExpression",
                                                    "operator": "-",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "_key"
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": 2.0,
                                                      "raw": "2"
                                                    }
                                                  }
                                                },
                                                "right": {
                                                  "type": "ComputedMemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "arguments"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "_key"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "===",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "format"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "undefined"
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ThrowStatement",
                                              "argument": {
                                                "type": "NewExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "Error"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "Literal",
                                                      "value": "`warningWithoutStack(condition, format, ...args)` requires a warning ",
                                                      "raw": "`warningWithoutStack(condition, format, ...args)` requires a warning "
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": "message argument",
                                                      "raw": "message argument"
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": ">",
                                          "left": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "args"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "length"
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": 8.0,
                                            "raw": "8"
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ThrowStatement",
                                              "argument": {
                                                "type": "NewExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "Error"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Literal",
                                                    "value": "warningWithoutStack() currently supports at most 8 arguments.",
                                                    "raw": "warningWithoutStack() currently supports at most 8 arguments."
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "Identifier",
                                          "name": "condition"
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": null
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "!==",
                                          "left": {
                                            "type": "UnaryExpression",
                                            "operator": "typeof",
                                            "argument": {
                                              "type": "Identifier",
                                              "name": "console"
                                            },
                                            "prefix": true
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": "undefined",
                                            "raw": "undefined"
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "BindingIdentifier",
                                                    "name": "argsWithFormat"
                                                  },
                                                  "init": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "args"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "map"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "FunctionExpression",
                                                        "id": null,
                                                        "params": [
                                                          {
                                                            "type": "BindingIdentifier",
                                                            "name": "item"
                                                          }
                                                        ],
                                                        "body": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ReturnStatement",
                                                              "argument": {
                                                                "type": "BinaryExpression",
                                                                "operator": "+",
                                                                "left": {
                                                                  "type": "Literal",
                                                                  "value": "",
                                                                  "raw": ""
                                                                },
                                                                "right": {
                                                                  "type": "Identifier",
                                                                  "name": "item"
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "generator": false,
                                                        "expression": false,
                                                        "async": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "argsWithFormat"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "unshift"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "Literal",
                                                      "value": "Warning: ",
                                                      "raw": "Warning: "
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "format"
                                                    }
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "Function"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "prototype"
                                                      }
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "apply"
                                                    }
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "call"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "console"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "error"
                                                    }
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "console"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "argsWithFormat"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "TryStatement",
                                        "block": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "BindingIdentifier",
                                                    "name": "argIndex"
                                                  },
                                                  "init": {
                                                    "type": "Literal",
                                                    "value": 0.0,
                                                    "raw": "0"
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "BindingIdentifier",
                                                    "name": "message"
                                                  },
                                                  "init": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "Literal",
                                                      "value": "Warning: ",
                                                      "raw": "Warning: "
                                                    },
                                                    "right": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "StaticMemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "format"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "replace"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "RegexLiteral",
                                                          "value": ",",
                                                          "raw": ",",
                                                          "regex": {
                                                            "type": "Regex",
                                                            "pattern": "",
                                                            "flags": [
                                                              "g"
                                                            ]
                                                          }
                                                        },
                                                        {
                                                          "type": "FunctionExpression",
                                                          "id": null,
                                                          "params": [],
                                                          "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                              {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                  "type": "ComputedMemberExpression",
                                                                  "computed": true,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "args"
                                                                  },
                                                                  "property": {
                                                                    "type": "UpdateExpression",
                                                                    "operator": "++",
                                                                    "argument": {
                                                                      "type": "Identifier",
                                                                      "name": "argIndex"
                                                                    },
                                                                    "prefix": false
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "generator": false,
                                                          "expression": false,
                                                          "async": false
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "ThrowStatement",
                                              "argument": {
                                                "type": "NewExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "Error"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "message"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "handler": {
                                          "type": "CatchClause",
                                          "param": {
                                            "type": "BindingIdentifier",
                                            "name": "x"
                                          },
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": []
                                          }
                                        },
                                        "finalizer": null
                                      }
                                    ]
                                  },
                                  "generator": false,
                                  "expression": false,
                                  "async": false
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "warningWithoutStack$1"
                              },
                              "init": {
                                "type": "Identifier",
                                "name": "warningWithoutStack"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "didWarnStateUpdateForUnmountedComponent"
                              },
                              "init": {
                                "type": "ObjectExpression",
                                "properties": []
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "warnNoop"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "publicInstance"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "callerName"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "BindingIdentifier",
                                          "name": "_constructor"
                                        },
                                        "init": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "publicInstance"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "constructor"
                                          }
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "BindingIdentifier",
                                          "name": "componentName"
                                        },
                                        "init": {
                                          "type": "BinaryExpression",
                                          "operator": "||",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "&&",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "_constructor"
                                            },
                                            "right": {
                                              "type": "SequenceExpression",
                                              "expressions": [
                                                {
                                                  "type": "BinaryExpression",
                                                  "operator": "||",
                                                  "left": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "_constructor"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "displayName"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "_constructor"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "name"
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": "ReactClass",
                                            "raw": "ReactClass"
                                          }
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "BindingIdentifier",
                                          "name": "warningKey"
                                        },
                                        "init": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "componentName"
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": ".",
                                              "raw": "."
                                            }
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "callerName"
                                          }
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "ComputedMemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "didWarnStateUpdateForUnmountedComponent"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "warningKey"
                                      }
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ReturnStatement",
                                          "argument": null
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "warningWithoutStack$1"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": "false",
                                          "raw": "false"
                                        },
                                        {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Literal",
                                                "value": "Can't call %s on a component that is not yet mounted. ",
                                                "raw": "Can't call %s on a component that is not yet mounted. "
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "This is a no-op, but it might indicate a bug in your application. ",
                                                "raw": "This is a no-op, but it might indicate a bug in your application. "
                                              }
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": "Instead, assign to `this.state` directly or define a `state = {};` ",
                                              "raw": "Instead, assign to `this.state` directly or define a `state = {};` "
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": "class property with the desired state in the %s component.",
                                            "raw": "class property with the desired state in the %s component."
                                          }
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "callerName"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "componentName"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "ComputedMemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "didWarnStateUpdateForUnmountedComponent"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "warningKey"
                                        }
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": "true",
                                        "raw": "true"
                                      }
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "ReactNoopUpdateQueue"
                              },
                              "init": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "isMounted"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "publicInstance"
                                        }
                                      ],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ReturnStatement",
                                            "argument": {
                                              "type": "Literal",
                                              "value": "false",
                                              "raw": "false"
                                            }
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 301,
                                        "col": 301,
                                        "idx": 10103
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 303,
                                        "col": 303,
                                        "idx": 10153
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "enqueueForceUpdate"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "publicInstance"
                                        },
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "callback"
                                        },
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "callerName"
                                        }
                                      ],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "warnNoop"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "publicInstance"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": "forceUpdate",
                                                  "raw": "forceUpdate"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 321,
                                        "col": 321,
                                        "idx": 10892
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 322,
                                        "col": 322,
                                        "idx": 10937
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "enqueueReplaceState"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "publicInstance"
                                        },
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "completeState"
                                        },
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "callback"
                                        },
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "callerName"
                                        }
                                      ],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "warnNoop"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "publicInstance"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": "replaceState",
                                                  "raw": "replaceState"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 338,
                                        "col": 338,
                                        "idx": 11624
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 339,
                                        "col": 339,
                                        "idx": 11670
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "enqueueSetState"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "publicInstance"
                                        },
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "partialState"
                                        },
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "callback"
                                        },
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "callerName"
                                        }
                                      ],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "warnNoop"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "publicInstance"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": "setState",
                                                  "raw": "setState"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 354,
                                        "col": 354,
                                        "idx": 12336
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 356,
                                        "col": 356,
                                        "idx": 12379
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "emptyObject"
                              },
                              "init": {
                                "type": "ObjectExpression",
                                "properties": []
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "Object"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "freeze"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "emptyObject"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "Component"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "props"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "context"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "updater"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "props"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "props"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "context"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "context"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "refs"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "emptyObject"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "updater"
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "||",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "updater"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "ReactNoopUpdateQueue"
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "StaticMemberExpression",
                              "computed": false,
                              "object": {
                                "type": "StaticMemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "Component"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "prototype"
                                }
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "isReactComponent"
                              }
                            },
                            "right": {
                              "type": "ObjectExpression",
                              "properties": []
                            }
                          }
                        },
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "StaticMemberExpression",
                              "computed": false,
                              "object": {
                                "type": "StaticMemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "Component"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "prototype"
                                }
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "setState"
                              }
                            },
                            "right": {
                              "type": "FunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "BindingIdentifier",
                                  "name": "partialState"
                                },
                                {
                                  "type": "BindingIdentifier",
                                  "name": "callback"
                                }
                              ],
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "SequenceExpression",
                                        "expressions": [
                                          {
                                            "type": "BinaryExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "||",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "===",
                                                "left": {
                                                  "type": "UnaryExpression",
                                                  "operator": "typeof",
                                                  "argument": {
                                                    "type": "Identifier",
                                                    "name": "partialState"
                                                  },
                                                  "prefix": true
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "object",
                                                  "raw": "object"
                                                }
                                              },
                                              "right": {
                                                "type": "BinaryExpression",
                                                "operator": "===",
                                                "left": {
                                                  "type": "UnaryExpression",
                                                  "operator": "typeof",
                                                  "argument": {
                                                    "type": "Identifier",
                                                    "name": "partialState"
                                                  },
                                                  "prefix": true
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "function",
                                                  "raw": "function"
                                                }
                                              }
                                            },
                                            "right": {
                                              "type": "BinaryExpression",
                                              "operator": "==",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "partialState"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": null,
                                                "raw": "null"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "prefix": true
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ThrowStatement",
                                              "argument": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "Error"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Literal",
                                                    "value": "setState(...): takes an object of state variables to update or a function which returns an object of state variables.",
                                                    "raw": "setState(...): takes an object of state variables to update or a function which returns an object of state variables."
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "ThisExpression"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "updater"
                                          }
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "enqueueSetState"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "ThisExpression"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "partialState"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "callback"
                                        },
                                        {
                                          "type": "Literal",
                                          "value": "setState",
                                          "raw": "setState"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "generator": false,
                              "expression": false,
                              "async": false
                            }
                          }
                        },
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "StaticMemberExpression",
                              "computed": false,
                              "object": {
                                "type": "StaticMemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "Component"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "prototype"
                                }
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "forceUpdate"
                              }
                            },
                            "right": {
                              "type": "FunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "BindingIdentifier",
                                  "name": "callback"
                                }
                              ],
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "ThisExpression"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "updater"
                                          }
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "enqueueForceUpdate"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "ThisExpression"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "callback"
                                        },
                                        {
                                          "type": "Literal",
                                          "value": "forceUpdate",
                                          "raw": "forceUpdate"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "generator": false,
                              "expression": false,
                              "async": false
                            }
                          }
                        },
                        {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "BindingIdentifier",
                                    "name": "deprecatedAPIs"
                                  },
                                  "init": {
                                    "type": "ObjectExpression",
                                    "properties": [
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "isMounted"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "ArrayExpression",
                                          "elements": [
                                            {
                                              "type": "Literal",
                                              "value": "isMounted",
                                              "raw": "isMounted"
                                            },
                                            {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Literal",
                                                "value": "Instead, make sure to clean up subscriptions and pending requests in ",
                                                "raw": "Instead, make sure to clean up subscriptions and pending requests in "
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "componentWillUnmount to prevent memory leaks.",
                                                "raw": "componentWillUnmount to prevent memory leaks."
                                              }
                                            }
                                          ]
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 442,
                                            "col": 442,
                                            "idx": 15372
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 442,
                                            "col": 442,
                                            "idx": 15509
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "replaceState"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "ArrayExpression",
                                          "elements": [
                                            {
                                              "type": "Literal",
                                              "value": "replaceState",
                                              "raw": "replaceState"
                                            },
                                            {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Literal",
                                                "value": "Refactor your code to use setState instead (see ",
                                                "raw": "Refactor your code to use setState instead (see "
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "https://github.com/facebook/react/issues/3236).",
                                                "raw": "https://github.com/facebook/react/issues/3236)."
                                              }
                                            }
                                          ]
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 443,
                                            "col": 443,
                                            "idx": 15528
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 444,
                                            "col": 444,
                                            "idx": 15652
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "BindingIdentifier",
                                    "name": "defineDeprecationWarning"
                                  },
                                  "init": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [
                                      {
                                        "type": "BindingIdentifier",
                                        "name": "methodName"
                                      },
                                      {
                                        "type": "BindingIdentifier",
                                        "name": "info"
                                      }
                                    ],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "Object"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "defineProperty"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "Component"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "prototype"
                                                }
                                              },
                                              {
                                                "type": "Identifier",
                                                "name": "methodName"
                                              },
                                              {
                                                "type": "ObjectExpression",
                                                "properties": [
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "get"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "Identifier",
                                                                "name": "lowPriorityWarningWithoutStack$1"
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Literal",
                                                                  "value": "false",
                                                                  "raw": "false"
                                                                },
                                                                {
                                                                  "type": "Literal",
                                                                  "value": "%s(...) is deprecated in plain JavaScript React classes. %s",
                                                                  "raw": "%s(...) is deprecated in plain JavaScript React classes. %s"
                                                                },
                                                                {
                                                                  "type": "ComputedMemberExpression",
                                                                  "computed": true,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "info"
                                                                  },
                                                                  "property": {
                                                                    "type": "Literal",
                                                                    "value": 0.0,
                                                                    "raw": "0"
                                                                  }
                                                                },
                                                                {
                                                                  "type": "ComputedMemberExpression",
                                                                  "computed": true,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "info"
                                                                  },
                                                                  "property": {
                                                                    "type": "Literal",
                                                                    "value": 1.0,
                                                                    "raw": "1"
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                              "type": "Identifier",
                                                              "name": "undefined"
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "generator": false,
                                                      "expression": false,
                                                      "async": false
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 449,
                                                        "col": 449,
                                                        "idx": 15914
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 452,
                                                        "col": 452,
                                                        "idx": 15972
                                                      }
                                                    }
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "ForInStatement",
                              "left": {
                                "type": "BindingIdentifier",
                                "name": "fnName"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "deprecatedAPIs"
                              },
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "deprecatedAPIs"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "hasOwnProperty"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "fnName"
                                        }
                                      ]
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "defineDeprecationWarning"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "fnName"
                                              },
                                              {
                                                "type": "ComputedMemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "deprecatedAPIs"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "fnName"
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  }
                                ]
                              },
                              "each": false
                            }
                          ]
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "ComponentDummy"
                          },
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": []
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "StaticMemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "ComponentDummy"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "prototype"
                              }
                            },
                            "right": {
                              "type": "StaticMemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "Component"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "prototype"
                              }
                            }
                          }
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "PureComponent"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "props"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "context"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "updater"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "props"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "props"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "context"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "context"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "refs"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "emptyObject"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "updater"
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "||",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "updater"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "ReactNoopUpdateQueue"
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "pureComponentPrototype"
                              },
                              "init": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "PureComponent"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "prototype"
                                  }
                                },
                                "right": {
                                  "type": "NewExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "ComponentDummy"
                                  },
                                  "arguments": []
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "StaticMemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "pureComponentPrototype"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "constructor"
                              }
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "PureComponent"
                            }
                          }
                        },
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "objectAssign"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "pureComponentPrototype"
                              },
                              {
                                "type": "StaticMemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "Component"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "prototype"
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "StaticMemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "pureComponentPrototype"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "isPureReactComponent"
                              }
                            },
                            "right": {
                              "type": "Literal",
                              "value": "true",
                              "raw": "true"
                            }
                          }
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "createRef"
                          },
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "refObject"
                                    },
                                    "init": {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "current"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Literal",
                                            "value": null,
                                            "raw": "null"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 487,
                                              "col": 487,
                                              "idx": 16960
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 488,
                                              "col": 488,
                                              "idx": 16968
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "Object"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "seal"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "refObject"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "refObject"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "ReactCurrentDispatcher"
                              },
                              "init": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "current"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 505,
                                        "col": 505,
                                        "idx": 17178
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 506,
                                        "col": 506,
                                        "idx": 17184
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "ReactCurrentBatchConfig"
                              },
                              "init": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "suspense"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 513,
                                        "col": 513,
                                        "idx": 17356
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 514,
                                        "col": 514,
                                        "idx": 17362
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "ReactCurrentOwner"
                              },
                              "init": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "current"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 527,
                                        "col": 527,
                                        "idx": 17614
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 528,
                                        "col": 528,
                                        "idx": 17620
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "BEFORE_SLASH_RE"
                              },
                              "init": {
                                "type": "RegexLiteral",
                                "value": ";",
                                "raw": ";",
                                "regex": {
                                  "type": "Regex",
                                  "pattern": "",
                                  "flags": []
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "describeComponentFrame"
                              },
                              "init": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [
                                  {
                                    "type": "BindingIdentifier",
                                    "name": "name"
                                  },
                                  {
                                    "type": "BindingIdentifier",
                                    "name": "source"
                                  },
                                  {
                                    "type": "BindingIdentifier",
                                    "name": "ownerName"
                                  }
                                ],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "sourceInfo"
                                          },
                                          "init": {
                                            "type": "Literal",
                                            "value": "",
                                            "raw": ""
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "Identifier",
                                        "name": "source"
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "BindingIdentifier",
                                                  "name": "path"
                                                },
                                                "init": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "source"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "fileName"
                                                  }
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "BindingIdentifier",
                                                  "name": "fileName"
                                                },
                                                "init": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "path"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "replace"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "BEFORE_SLASH_RE"
                                                    },
                                                    {
                                                      "type": "Literal",
                                                      "value": "",
                                                      "raw": ""
                                                    }
                                                  ]
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "RegexLiteral",
                                                      "value": ".",
                                                      "raw": ".",
                                                      "regex": {
                                                        "type": "Regex",
                                                        "pattern": "",
                                                        "flags": []
                                                      }
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "test"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "fileName"
                                                    }
                                                  ]
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "BindingIdentifier",
                                                            "name": "match"
                                                          },
                                                          "init": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "StaticMemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "path"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "match"
                                                              }
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "BEFORE_SLASH_RE"
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "Identifier",
                                                        "name": "match"
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "VariableDeclaration",
                                                            "declarations": [
                                                              {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                  "type": "BindingIdentifier",
                                                                  "name": "pathBeforeSlash"
                                                                },
                                                                "init": {
                                                                  "type": "ComputedMemberExpression",
                                                                  "computed": true,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "match"
                                                                  },
                                                                  "property": {
                                                                    "type": "Literal",
                                                                    "value": 1.0,
                                                                    "raw": "1"
                                                                  }
                                                                }
                                                              }
                                                            ],
                                                            "kind": "var"
                                                          },
                                                          {
                                                            "type": "IfStatement",
                                                            "test": {
                                                              "type": "Identifier",
                                                              "name": "pathBeforeSlash"
                                                            },
                                                            "consequent": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "VariableDeclaration",
                                                                  "declarations": [
                                                                    {
                                                                      "type": "VariableDeclarator",
                                                                      "id": {
                                                                        "type": "BindingIdentifier",
                                                                        "name": "folderName"
                                                                      },
                                                                      "init": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "StaticMemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "pathBeforeSlash"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "replace"
                                                                          }
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Identifier",
                                                                            "name": "BEFORE_SLASH_RE"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "",
                                                                            "raw": ""
                                                                          }
                                                                        ]
                                                                      }
                                                                    }
                                                                  ],
                                                                  "kind": "var"
                                                                },
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                      "type": "Identifier",
                                                                      "name": "fileName"
                                                                    },
                                                                    "right": {
                                                                      "type": "BinaryExpression",
                                                                      "operator": "+",
                                                                      "left": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "+",
                                                                        "left": {
                                                                          "type": "Identifier",
                                                                          "name": "folderName"
                                                                        },
                                                                        "right": {
                                                                          "type": "Literal",
                                                                          "value": "/",
                                                                          "raw": "/"
                                                                        }
                                                                      },
                                                                      "right": {
                                                                        "type": "Identifier",
                                                                        "name": "fileName"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "alternate": null
                                                          }
                                                        ]
                                                      },
                                                      "alternate": null
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "sourceInfo"
                                              },
                                              "right": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "BinaryExpression",
                                                      "operator": "+",
                                                      "left": {
                                                        "type": "Literal",
                                                        "value": " (at ",
                                                        "raw": " (at "
                                                      },
                                                      "right": {
                                                        "type": "Identifier",
                                                        "name": "fileName"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": ":",
                                                      "raw": ":"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "source"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "lineNumber"
                                                    }
                                                  }
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": ")",
                                                  "raw": ")"
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "Identifier",
                                          "name": "ownerName"
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "sourceInfo"
                                                },
                                                "right": {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "Literal",
                                                      "value": " (created by ",
                                                      "raw": " (created by "
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "ownerName"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": ")",
                                                    "raw": ")"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      }
                                    },
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "Literal",
                                            "value": "\n    in ",
                                            "raw": "\n    in "
                                          },
                                          "right": {
                                            "type": "SequenceExpression",
                                            "expressions": [
                                              {
                                                "type": "BinaryExpression",
                                                "operator": "||",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "name"
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "Unknown",
                                                  "raw": "Unknown"
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "sourceInfo"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "Resolved"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 1.0,
                                "raw": "1"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "refineResolvedLazyComponent"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "lazyComponent"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ConditionalExpression",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "lazyComponent"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "_status"
                                      }
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "Resolved"
                                    }
                                  },
                                  "consequent": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "lazyComponent"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "_result"
                                    }
                                  },
                                  "alternate": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "getWrappedName"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "outerType"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "innerType"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "wrapperName"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "functionName"
                                    },
                                    "init": {
                                      "type": "BinaryExpression",
                                      "operator": "||",
                                      "left": {
                                        "type": "BinaryExpression",
                                        "operator": "||",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "innerType"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "displayName"
                                          }
                                        },
                                        "right": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "innerType"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "name"
                                          }
                                        }
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": "",
                                        "raw": ""
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "BinaryExpression",
                                  "operator": "||",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "outerType"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "displayName"
                                    }
                                  },
                                  "right": {
                                    "type": "SequenceExpression",
                                    "expressions": [
                                      {
                                        "type": "ConditionalExpression",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "!==",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "functionName"
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": "",
                                            "raw": ""
                                          }
                                        },
                                        "consequent": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "wrapperName"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "(",
                                                "raw": "("
                                              }
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "functionName"
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": ")",
                                            "raw": ")"
                                          }
                                        },
                                        "alternate": {
                                          "type": "Identifier",
                                          "name": "wrapperName"
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "getComponentName"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "type"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "==",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "type"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Literal",
                                        "value": null,
                                        "raw": "null"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "UnaryExpression",
                                        "operator": "typeof",
                                        "argument": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "type"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "tag"
                                          }
                                        },
                                        "prefix": true
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": "number",
                                        "raw": "number"
                                      }
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "warningWithoutStack$1"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "false",
                                                "raw": "false"
                                              },
                                              {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "Literal",
                                                  "value": "Received an unexpected object in getComponentName(). ",
                                                  "raw": "Received an unexpected object in getComponentName(). "
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "This is likely a bug in React. Please file an issue.",
                                                  "raw": "This is likely a bug in React. Please file an issue."
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  }
                                ]
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "UnaryExpression",
                                    "operator": "typeof",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "type"
                                    },
                                    "prefix": true
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "function",
                                    "raw": "function"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "BinaryExpression",
                                        "operator": "||",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "||",
                                          "left": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "type"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "displayName"
                                            }
                                          },
                                          "right": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "type"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "name"
                                            }
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "UnaryExpression",
                                    "operator": "typeof",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "type"
                                    },
                                    "prefix": true
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "string",
                                    "raw": "string"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "type"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "SwitchStatement",
                                "discriminant": {
                                  "type": "Identifier",
                                  "name": "type"
                                },
                                "cases": [
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "REACT_FRAGMENT_TYPE"
                                    },
                                    "consequent": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Literal",
                                          "value": "Fragment",
                                          "raw": "Fragment"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "REACT_PORTAL_TYPE"
                                    },
                                    "consequent": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Literal",
                                          "value": "Portal",
                                          "raw": "Portal"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "REACT_PROFILER_TYPE"
                                    },
                                    "consequent": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Literal",
                                          "value": "Profiler",
                                          "raw": "Profiler"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "REACT_STRICT_MODE_TYPE"
                                    },
                                    "consequent": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Literal",
                                          "value": "StrictMode",
                                          "raw": "StrictMode"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "REACT_SUSPENSE_TYPE"
                                    },
                                    "consequent": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Literal",
                                          "value": "Suspense",
                                          "raw": "Suspense"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "REACT_SUSPENSE_LIST_TYPE"
                                    },
                                    "consequent": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Literal",
                                          "value": "SuspenseList",
                                          "raw": "SuspenseList"
                                        }
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "UnaryExpression",
                                    "operator": "typeof",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "type"
                                    },
                                    "prefix": true
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "object",
                                    "raw": "object"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "SwitchStatement",
                                      "discriminant": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "type"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "$$typeof"
                                        }
                                      },
                                      "cases": [
                                        {
                                          "type": "SwitchCase",
                                          "test": {
                                            "type": "Identifier",
                                            "name": "REACT_CONTEXT_TYPE"
                                          },
                                          "consequent": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "Literal",
                                                "value": "Context.Consumer",
                                                "raw": "Context.Consumer"
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "SwitchCase",
                                          "test": {
                                            "type": "Identifier",
                                            "name": "REACT_PROVIDER_TYPE"
                                          },
                                          "consequent": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "Literal",
                                                "value": "Context.Provider",
                                                "raw": "Context.Provider"
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "SwitchCase",
                                          "test": {
                                            "type": "Identifier",
                                            "name": "REACT_FORWARD_REF_TYPE"
                                          },
                                          "consequent": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "getWrappedName"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "type"
                                                  },
                                                  {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "type"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "render"
                                                    }
                                                  },
                                                  {
                                                    "type": "Literal",
                                                    "value": "ForwardRef",
                                                    "raw": "ForwardRef"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "SwitchCase",
                                          "test": {
                                            "type": "Identifier",
                                            "name": "REACT_MEMO_TYPE"
                                          },
                                          "consequent": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "getComponentName"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "type"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "type"
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "SwitchCase",
                                          "test": {
                                            "type": "Identifier",
                                            "name": "REACT_LAZY_TYPE"
                                          },
                                          "consequent": [
                                            {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "VariableDeclaration",
                                                  "declarations": [
                                                    {
                                                      "type": "VariableDeclarator",
                                                      "id": {
                                                        "type": "BindingIdentifier",
                                                        "name": "thenable"
                                                      },
                                                      "init": {
                                                        "type": "Identifier",
                                                        "name": "type"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "var"
                                                },
                                                {
                                                  "type": "VariableDeclaration",
                                                  "declarations": [
                                                    {
                                                      "type": "VariableDeclarator",
                                                      "id": {
                                                        "type": "BindingIdentifier",
                                                        "name": "resolvedThenable"
                                                      },
                                                      "init": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "refineResolvedLazyComponent"
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "thenable"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ],
                                                  "kind": "var"
                                                },
                                                {
                                                  "type": "IfStatement",
                                                  "test": {
                                                    "type": "Identifier",
                                                    "name": "resolvedThenable"
                                                  },
                                                  "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ReturnStatement",
                                                        "argument": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "Identifier",
                                                            "name": "getComponentName"
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "resolvedThenable"
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "alternate": null
                                                },
                                                {
                                                  "type": "BreakStatement",
                                                  "label": null
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Literal",
                                  "value": null,
                                  "raw": "null"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "ReactDebugCurrentFrame"
                              },
                              "init": {
                                "type": "ObjectExpression",
                                "properties": []
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "currentlyValidatingElement"
                              },
                              "init": {
                                "type": "Literal",
                                "value": null,
                                "raw": "null"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "setCurrentlyValidatingElement"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "element"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "currentlyValidatingElement"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "element"
                                      }
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "ReactDebugCurrentFrame"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "getCurrentStack"
                                  }
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": null,
                                  "raw": "null"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "ReactDebugCurrentFrame"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "getStackAddendum"
                                  }
                                },
                                "right": {
                                  "type": "FunctionExpression",
                                  "id": null,
                                  "params": [],
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "BindingIdentifier",
                                              "name": "stack"
                                            },
                                            "init": {
                                              "type": "Literal",
                                              "value": "",
                                              "raw": ""
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "Identifier",
                                          "name": "currentlyValidatingElement"
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "BindingIdentifier",
                                                    "name": "name"
                                                  },
                                                  "init": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "getComponentName"
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "StaticMemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "currentlyValidatingElement"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "type"
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "BindingIdentifier",
                                                    "name": "owner"
                                                  },
                                                  "init": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "currentlyValidatingElement"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "_owner"
                                                    }
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "+=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "stack"
                                                },
                                                "right": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "describeComponentFrame"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "name"
                                                    },
                                                    {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "currentlyValidatingElement"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "_source"
                                                      }
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "&&",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "owner"
                                                      },
                                                      "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "getComponentName"
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "StaticMemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "owner"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "type"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "BindingIdentifier",
                                              "name": "impl"
                                            },
                                            "init": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "ReactDebugCurrentFrame"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "getCurrentStack"
                                              }
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "Identifier",
                                          "name": "impl"
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "+=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "stack"
                                                },
                                                "right": {
                                                  "type": "BinaryExpression",
                                                  "operator": "||",
                                                  "left": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "impl"
                                                    },
                                                    "arguments": []
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "",
                                                    "raw": ""
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "stack"
                                        }
                                      }
                                    ]
                                  },
                                  "generator": false,
                                  "expression": false,
                                  "async": false
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "IsSomeRendererActing"
                              },
                              "init": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "current"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Literal",
                                      "value": "false",
                                      "raw": "false"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 681,
                                        "col": 681,
                                        "idx": 21478
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 682,
                                        "col": 682,
                                        "idx": 21485
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "ReactSharedInternals"
                              },
                              "init": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "ReactCurrentDispatcher"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "ReactCurrentDispatcher"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 685,
                                        "col": 685,
                                        "idx": 21543
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 685,
                                        "col": 685,
                                        "idx": 21566
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "ReactCurrentBatchConfig"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "ReactCurrentBatchConfig"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 686,
                                        "col": 686,
                                        "idx": 21594
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 686,
                                        "col": 686,
                                        "idx": 21618
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "ReactCurrentOwner"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "ReactCurrentOwner"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 687,
                                        "col": 687,
                                        "idx": 21640
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 687,
                                        "col": 687,
                                        "idx": 21658
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "IsSomeRendererActing"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "IsSomeRendererActing"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 688,
                                        "col": 688,
                                        "idx": 21683
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 688,
                                        "col": 688,
                                        "idx": 21704
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "assign"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "objectAssign"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 690,
                                        "col": 690,
                                        "idx": 21792
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 691,
                                        "col": 691,
                                        "idx": 21806
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "objectAssign"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "ReactSharedInternals"
                                  },
                                  {
                                    "type": "ObjectExpression",
                                    "properties": [
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "ReactDebugCurrentFrame"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "ReactDebugCurrentFrame"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 696,
                                            "col": 696,
                                            "idx": 21929
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 696,
                                            "col": 696,
                                            "idx": 21952
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "ReactComponentTreeHook"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "ObjectExpression",
                                          "properties": []
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 699,
                                            "col": 699,
                                            "idx": 22095
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 700,
                                            "col": 700,
                                            "idx": 22101
                                          }
                                        }
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "warning"
                              },
                              "init": {
                                "type": "Identifier",
                                "name": "warningWithoutStack$1"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "warning"
                                },
                                "right": {
                                  "type": "FunctionExpression",
                                  "id": null,
                                  "params": [
                                    {
                                      "type": "BindingIdentifier",
                                      "name": "condition"
                                    },
                                    {
                                      "type": "BindingIdentifier",
                                      "name": "format"
                                    }
                                  ],
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "Identifier",
                                          "name": "condition"
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": null
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "BindingIdentifier",
                                              "name": "ReactDebugCurrentFrame"
                                            },
                                            "init": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "ReactSharedInternals"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "ReactDebugCurrentFrame"
                                              }
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "BindingIdentifier",
                                              "name": "stack"
                                            },
                                            "init": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "ReactDebugCurrentFrame"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "getStackAddendum"
                                                }
                                              },
                                              "arguments": []
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "ForStatement",
                                        "init": {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "BindingIdentifier",
                                                "name": "_len"
                                              },
                                              "init": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "arguments"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "length"
                                                }
                                              }
                                            },
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "BindingIdentifier",
                                                "name": "args"
                                              },
                                              "init": {
                                                "type": "NewExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "Array"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "ConditionalExpression",
                                                    "test": {
                                                      "type": "BinaryExpression",
                                                      "operator": ">",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "_len"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": 2.0,
                                                        "raw": "2"
                                                      }
                                                    },
                                                    "consequent": {
                                                      "type": "BinaryExpression",
                                                      "operator": "-",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "_len"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": 2.0,
                                                        "raw": "2"
                                                      }
                                                    },
                                                    "alternate": {
                                                      "type": "Literal",
                                                      "value": 0.0,
                                                      "raw": "0"
                                                    }
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "BindingIdentifier",
                                                "name": "_key"
                                              },
                                              "init": {
                                                "type": "Literal",
                                                "value": 2.0,
                                                "raw": "2"
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "<",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "_key"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "_len"
                                          }
                                        },
                                        "update": {
                                          "type": "UpdateExpression",
                                          "operator": "++",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "_key"
                                          },
                                          "prefix": false
                                        },
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "ComputedMemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "args"
                                                  },
                                                  "property": {
                                                    "type": "BinaryExpression",
                                                    "operator": "-",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "_key"
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": 2.0,
                                                      "raw": "2"
                                                    }
                                                  }
                                                },
                                                "right": {
                                                  "type": "ComputedMemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "arguments"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "_key"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "warningWithoutStack$1"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "apply"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "UnaryExpression",
                                              "operator": "void",
                                              "argument": {
                                                "type": "Literal",
                                                "value": 0.0,
                                                "raw": "0"
                                              },
                                              "prefix": true
                                            },
                                            {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "Literal",
                                                      "value": "false",
                                                      "raw": "false"
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "+",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "format"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": "%s",
                                                        "raw": "%s"
                                                      }
                                                    }
                                                  ]
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "concat"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "args"
                                                },
                                                {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "stack"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "generator": false,
                                  "expression": false,
                                  "async": false
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "warning$1"
                              },
                              "init": {
                                "type": "Identifier",
                                "name": "warning"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "hasOwnProperty$1"
                              },
                              "init": {
                                "type": "StaticMemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "Object"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "prototype"
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "hasOwnProperty"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "RESERVED_PROPS"
                              },
                              "init": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Literal",
                                      "value": "true",
                                      "raw": "true"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 733,
                                        "col": 733,
                                        "idx": 23092
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 733,
                                        "col": 733,
                                        "idx": 23097
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "ref"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Literal",
                                      "value": "true",
                                      "raw": "true"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 734,
                                        "col": 734,
                                        "idx": 23105
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 734,
                                        "col": 734,
                                        "idx": 23110
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "__self"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Literal",
                                      "value": "true",
                                      "raw": "true"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 735,
                                        "col": 735,
                                        "idx": 23121
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 735,
                                        "col": 735,
                                        "idx": 23126
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "__source"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Literal",
                                      "value": "true",
                                      "raw": "true"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 736,
                                        "col": 736,
                                        "idx": 23139
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 737,
                                        "col": 737,
                                        "idx": 23145
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "specialPropKeyWarningShown"
                              },
                              "init": null
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "specialPropRefWarningShown"
                              },
                              "init": null
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "hasValidRef"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "config"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "hasOwnProperty$1"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "call"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "config"
                                        },
                                        {
                                          "type": "Literal",
                                          "value": "ref",
                                          "raw": "ref"
                                        }
                                      ]
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "BindingIdentifier",
                                                "name": "getter"
                                              },
                                              "init": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "Object"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "getOwnPropertyDescriptor"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "config"
                                                    },
                                                    {
                                                      "type": "Literal",
                                                      "value": "ref",
                                                      "raw": "ref"
                                                    }
                                                  ]
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "get"
                                                }
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": "&&",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "getter"
                                            },
                                            "right": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "getter"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "isReactWarning"
                                              }
                                            }
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "Literal",
                                                  "value": "false",
                                                  "raw": "false"
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  }
                                ]
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "BinaryExpression",
                                  "operator": "!==",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "config"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "ref"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "undefined"
                                  }
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "hasValidKey"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "config"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "hasOwnProperty$1"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "call"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "config"
                                        },
                                        {
                                          "type": "Literal",
                                          "value": "key",
                                          "raw": "key"
                                        }
                                      ]
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "BindingIdentifier",
                                                "name": "getter"
                                              },
                                              "init": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "Object"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "getOwnPropertyDescriptor"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "config"
                                                    },
                                                    {
                                                      "type": "Literal",
                                                      "value": "key",
                                                      "raw": "key"
                                                    }
                                                  ]
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "get"
                                                }
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": "&&",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "getter"
                                            },
                                            "right": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "getter"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "isReactWarning"
                                              }
                                            }
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "Literal",
                                                  "value": "false",
                                                  "raw": "false"
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  }
                                ]
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "BinaryExpression",
                                  "operator": "!==",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "config"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "key"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "undefined"
                                  }
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "defineKeyPropWarningGetter"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "props"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "displayName"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "warnAboutAccessingKey"
                                    },
                                    "init": {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "UnaryExpression",
                                              "operator": "!",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "specialPropKeyWarningShown"
                                              },
                                              "prefix": true
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "specialPropKeyWarningShown"
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": "true",
                                                      "raw": "true"
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "warningWithoutStack$1"
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Literal",
                                                        "value": "false",
                                                        "raw": "false"
                                                      },
                                                      {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                          "type": "BinaryExpression",
                                                          "operator": "+",
                                                          "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                              "type": "Literal",
                                                              "value": "%s: `key` is not a prop. Trying to access it will result ",
                                                              "raw": "%s: `key` is not a prop. Trying to access it will result "
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "in `undefined` being returned. If you need to access the same ",
                                                              "raw": "in `undefined` being returned. If you need to access the same "
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "Literal",
                                                            "value": "value within the child component, you should pass it as a different ",
                                                            "raw": "value within the child component, you should pass it as a different "
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": "prop. (https://fb.me/react-special-props)",
                                                          "raw": "prop. (https://fb.me/react-special-props)"
                                                        }
                                                      },
                                                      {
                                                        "type": "Identifier",
                                                        "name": "displayName"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "warnAboutAccessingKey"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "isReactWarning"
                                    }
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "true",
                                    "raw": "true"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Object"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "defineProperty"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "props"
                                    },
                                    {
                                      "type": "Literal",
                                      "value": "key",
                                      "raw": "key"
                                    },
                                    {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "get"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "warnAboutAccessingKey"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 779,
                                              "col": 779,
                                              "idx": 24355
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 779,
                                              "col": 779,
                                              "idx": 24377
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "configurable"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Literal",
                                            "value": "true",
                                            "raw": "true"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 780,
                                              "col": 780,
                                              "idx": 24396
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 781,
                                              "col": 781,
                                              "idx": 24404
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "defineRefPropWarningGetter"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "props"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "displayName"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "warnAboutAccessingRef"
                                    },
                                    "init": {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "UnaryExpression",
                                              "operator": "!",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "specialPropRefWarningShown"
                                              },
                                              "prefix": true
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "specialPropRefWarningShown"
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": "true",
                                                      "raw": "true"
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "warningWithoutStack$1"
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Literal",
                                                        "value": "false",
                                                        "raw": "false"
                                                      },
                                                      {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                          "type": "BinaryExpression",
                                                          "operator": "+",
                                                          "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                              "type": "Literal",
                                                              "value": "%s: `ref` is not a prop. Trying to access it will result ",
                                                              "raw": "%s: `ref` is not a prop. Trying to access it will result "
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "in `undefined` being returned. If you need to access the same ",
                                                              "raw": "in `undefined` being returned. If you need to access the same "
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "Literal",
                                                            "value": "value within the child component, you should pass it as a different ",
                                                            "raw": "value within the child component, you should pass it as a different "
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": "prop. (https://fb.me/react-special-props)",
                                                          "raw": "prop. (https://fb.me/react-special-props)"
                                                        }
                                                      },
                                                      {
                                                        "type": "Identifier",
                                                        "name": "displayName"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "warnAboutAccessingRef"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "isReactWarning"
                                    }
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "true",
                                    "raw": "true"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Object"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "defineProperty"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "props"
                                    },
                                    {
                                      "type": "Literal",
                                      "value": "ref",
                                      "raw": "ref"
                                    },
                                    {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "get"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "warnAboutAccessingRef"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 794,
                                              "col": 794,
                                              "idx": 24995
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 794,
                                              "col": 794,
                                              "idx": 25017
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "configurable"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Literal",
                                            "value": "true",
                                            "raw": "true"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 795,
                                              "col": 795,
                                              "idx": 25036
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 796,
                                              "col": 796,
                                              "idx": 25044
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "ReactElement"
                              },
                              "init": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [
                                  {
                                    "type": "BindingIdentifier",
                                    "name": "type"
                                  },
                                  {
                                    "type": "BindingIdentifier",
                                    "name": "key"
                                  },
                                  {
                                    "type": "BindingIdentifier",
                                    "name": "ref"
                                  },
                                  {
                                    "type": "BindingIdentifier",
                                    "name": "self"
                                  },
                                  {
                                    "type": "BindingIdentifier",
                                    "name": "source"
                                  },
                                  {
                                    "type": "BindingIdentifier",
                                    "name": "owner"
                                  },
                                  {
                                    "type": "BindingIdentifier",
                                    "name": "props"
                                  }
                                ],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "element"
                                          },
                                          "init": {
                                            "type": "ObjectExpression",
                                            "properties": [
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "$$typeof"
                                                },
                                                "computed": false,
                                                "value": {
                                                  "type": "Identifier",
                                                  "name": "REACT_ELEMENT_TYPE"
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false,
                                                "span": {
                                                  "type": "Span",
                                                  "start": {
                                                    "type": "Marker",
                                                    "line": 823,
                                                    "col": 823,
                                                    "idx": 26107
                                                  },
                                                  "end": {
                                                    "type": "Marker",
                                                    "line": 823,
                                                    "col": 823,
                                                    "idx": 26126
                                                  }
                                                }
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "type"
                                                },
                                                "computed": false,
                                                "value": {
                                                  "type": "Identifier",
                                                  "name": "type"
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false,
                                                "span": {
                                                  "type": "Span",
                                                  "start": {
                                                    "type": "Marker",
                                                    "line": 825,
                                                    "col": 825,
                                                    "idx": 26191
                                                  },
                                                  "end": {
                                                    "type": "Marker",
                                                    "line": 825,
                                                    "col": 825,
                                                    "idx": 26196
                                                  }
                                                }
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "key"
                                                },
                                                "computed": false,
                                                "value": {
                                                  "type": "Identifier",
                                                  "name": "key"
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false,
                                                "span": {
                                                  "type": "Span",
                                                  "start": {
                                                    "type": "Marker",
                                                    "line": 826,
                                                    "col": 826,
                                                    "idx": 26206
                                                  },
                                                  "end": {
                                                    "type": "Marker",
                                                    "line": 826,
                                                    "col": 826,
                                                    "idx": 26210
                                                  }
                                                }
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "ref"
                                                },
                                                "computed": false,
                                                "value": {
                                                  "type": "Identifier",
                                                  "name": "ref"
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false,
                                                "span": {
                                                  "type": "Span",
                                                  "start": {
                                                    "type": "Marker",
                                                    "line": 827,
                                                    "col": 827,
                                                    "idx": 26220
                                                  },
                                                  "end": {
                                                    "type": "Marker",
                                                    "line": 827,
                                                    "col": 827,
                                                    "idx": 26224
                                                  }
                                                }
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "props"
                                                },
                                                "computed": false,
                                                "value": {
                                                  "type": "Identifier",
                                                  "name": "props"
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false,
                                                "span": {
                                                  "type": "Span",
                                                  "start": {
                                                    "type": "Marker",
                                                    "line": 828,
                                                    "col": 828,
                                                    "idx": 26236
                                                  },
                                                  "end": {
                                                    "type": "Marker",
                                                    "line": 828,
                                                    "col": 828,
                                                    "idx": 26242
                                                  }
                                                }
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "_owner"
                                                },
                                                "computed": false,
                                                "value": {
                                                  "type": "Identifier",
                                                  "name": "owner"
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false,
                                                "span": {
                                                  "type": "Span",
                                                  "start": {
                                                    "type": "Marker",
                                                    "line": 830,
                                                    "col": 830,
                                                    "idx": 26322
                                                  },
                                                  "end": {
                                                    "type": "Marker",
                                                    "line": 831,
                                                    "col": 831,
                                                    "idx": 26331
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "element"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "_store"
                                              }
                                            },
                                            "right": {
                                              "type": "ObjectExpression",
                                              "properties": []
                                            }
                                          }
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "Object"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "defineProperty"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "element"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "_store"
                                                }
                                              },
                                              {
                                                "type": "Literal",
                                                "value": "validated",
                                                "raw": "validated"
                                              },
                                              {
                                                "type": "ObjectExpression",
                                                "properties": [
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "configurable"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Literal",
                                                      "value": "false",
                                                      "raw": "false"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 844,
                                                        "col": 844,
                                                        "idx": 26932
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 844,
                                                        "col": 844,
                                                        "idx": 26938
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "enumerable"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Literal",
                                                      "value": "false",
                                                      "raw": "false"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 845,
                                                        "col": 845,
                                                        "idx": 26957
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 845,
                                                        "col": 845,
                                                        "idx": 26963
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "writable"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Literal",
                                                      "value": "true",
                                                      "raw": "true"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 846,
                                                        "col": 846,
                                                        "idx": 26980
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 846,
                                                        "col": 846,
                                                        "idx": 26985
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "value"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Literal",
                                                      "value": "false",
                                                      "raw": "false"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 847,
                                                        "col": 847,
                                                        "idx": 26999
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 848,
                                                        "col": 848,
                                                        "idx": 27010
                                                      }
                                                    }
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "Object"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "defineProperty"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "element"
                                              },
                                              {
                                                "type": "Literal",
                                                "value": "_self",
                                                "raw": "_self"
                                              },
                                              {
                                                "type": "ObjectExpression",
                                                "properties": [
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "configurable"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Literal",
                                                      "value": "false",
                                                      "raw": "false"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 851,
                                                        "col": 851,
                                                        "idx": 27124
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 851,
                                                        "col": 851,
                                                        "idx": 27130
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "enumerable"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Literal",
                                                      "value": "false",
                                                      "raw": "false"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 852,
                                                        "col": 852,
                                                        "idx": 27149
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 852,
                                                        "col": 852,
                                                        "idx": 27155
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "writable"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Literal",
                                                      "value": "false",
                                                      "raw": "false"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 853,
                                                        "col": 853,
                                                        "idx": 27172
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 853,
                                                        "col": 853,
                                                        "idx": 27178
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "value"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Identifier",
                                                      "name": "self"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 854,
                                                        "col": 854,
                                                        "idx": 27192
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 855,
                                                        "col": 855,
                                                        "idx": 27202
                                                      }
                                                    }
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "Object"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "defineProperty"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "element"
                                              },
                                              {
                                                "type": "Literal",
                                                "value": "_source",
                                                "raw": "_source"
                                              },
                                              {
                                                "type": "ObjectExpression",
                                                "properties": [
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "configurable"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Literal",
                                                      "value": "false",
                                                      "raw": "false"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 859,
                                                        "col": 859,
                                                        "idx": 27420
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 859,
                                                        "col": 859,
                                                        "idx": 27426
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "enumerable"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Literal",
                                                      "value": "false",
                                                      "raw": "false"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 860,
                                                        "col": 860,
                                                        "idx": 27445
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 860,
                                                        "col": 860,
                                                        "idx": 27451
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "writable"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Literal",
                                                      "value": "false",
                                                      "raw": "false"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 861,
                                                        "col": 861,
                                                        "idx": 27468
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 861,
                                                        "col": 861,
                                                        "idx": 27474
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "value"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Identifier",
                                                      "name": "source"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 862,
                                                        "col": 862,
                                                        "idx": 27488
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 863,
                                                        "col": 863,
                                                        "idx": 27500
                                                      }
                                                    }
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "Object"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "freeze"
                                            }
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "Object"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "freeze"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "element"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "props"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "Object"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "freeze"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "element"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "element"
                                      }
                                    }
                                  ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "jsxDEV"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "type"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "config"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "maybeKey"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "source"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "self"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "propName"
                                    },
                                    "init": null
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "props"
                                    },
                                    "init": {
                                      "type": "ObjectExpression",
                                      "properties": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "key"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "ref"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "!==",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "maybeKey"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "undefined"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "key"
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "Literal",
                                            "value": "",
                                            "raw": ""
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "maybeKey"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "hasValidKey"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "config"
                                    }
                                  ]
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "key"
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "Literal",
                                            "value": "",
                                            "raw": ""
                                          },
                                          "right": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "config"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "key"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "hasValidRef"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "config"
                                    }
                                  ]
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "ref"
                                        },
                                        "right": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "config"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "ref"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ForInStatement",
                                "left": {
                                  "type": "Identifier",
                                  "name": "propName"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "config"
                                },
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "hasOwnProperty$1"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "call"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "config"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "propName"
                                            }
                                          ]
                                        },
                                        "right": {
                                          "type": "UnaryExpression",
                                          "operator": "!",
                                          "argument": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "RESERVED_PROPS"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "hasOwnProperty"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "propName"
                                              }
                                            ]
                                          },
                                          "prefix": true
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "ComputedMemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "props"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "propName"
                                                }
                                              },
                                              "right": {
                                                "type": "ComputedMemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "config"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "propName"
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "each": false
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "type"
                                  },
                                  "right": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "type"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "defaultProps"
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "defaultProps"
                                          },
                                          "init": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "type"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "defaultProps"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ForInStatement",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "propName"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "defaultProps"
                                      },
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "ComputedMemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "props"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "propName"
                                                }
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "undefined"
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "ComputedMemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "props"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "propName"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "ComputedMemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "defaultProps"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "propName"
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          }
                                        ]
                                      },
                                      "each": false
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "||",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "key"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "ref"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "displayName"
                                          },
                                          "init": {
                                            "type": "ConditionalExpression",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "UnaryExpression",
                                                "operator": "typeof",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "type"
                                                },
                                                "prefix": true
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "function",
                                                "raw": "function"
                                              }
                                            },
                                            "consequent": {
                                              "type": "BinaryExpression",
                                              "operator": "||",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "||",
                                                "left": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "type"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "displayName"
                                                  }
                                                },
                                                "right": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "type"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "name"
                                                  }
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "Unknown",
                                                "raw": "Unknown"
                                              }
                                            },
                                            "alternate": {
                                              "type": "Identifier",
                                              "name": "type"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "Identifier",
                                        "name": "key"
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "defineKeyPropWarningGetter"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "props"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "displayName"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "Identifier",
                                        "name": "ref"
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "defineRefPropWarningGetter"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "props"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "displayName"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "ReactElement"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "type"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "ref"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "self"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "source"
                                    },
                                    {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "ReactCurrentOwner"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "current"
                                      }
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "props"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "createElement"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "type"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "config"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "children"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "propName"
                                    },
                                    "init": null
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "props"
                                    },
                                    "init": {
                                      "type": "ObjectExpression",
                                      "properties": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "key"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "ref"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "self"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "source"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "!=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "config"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "hasValidRef"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "config"
                                          }
                                        ]
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "ref"
                                              },
                                              "right": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "config"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "ref"
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "hasValidKey"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "config"
                                          }
                                        ]
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "key"
                                              },
                                              "right": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "Literal",
                                                  "value": "",
                                                  "raw": ""
                                                },
                                                "right": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "config"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "key"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "self"
                                        },
                                        "right": {
                                          "type": "ConditionalExpression",
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "config"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "__self"
                                              }
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "undefined"
                                            }
                                          },
                                          "consequent": {
                                            "type": "Literal",
                                            "value": null,
                                            "raw": "null"
                                          },
                                          "alternate": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "config"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "__self"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "source"
                                        },
                                        "right": {
                                          "type": "ConditionalExpression",
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "config"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "__source"
                                              }
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "undefined"
                                            }
                                          },
                                          "consequent": {
                                            "type": "Literal",
                                            "value": null,
                                            "raw": "null"
                                          },
                                          "alternate": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "config"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "__source"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "ForInStatement",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "propName"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "config"
                                      },
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "&&",
                                              "left": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "hasOwnProperty$1"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "call"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "config"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "propName"
                                                  }
                                                ]
                                              },
                                              "right": {
                                                "type": "UnaryExpression",
                                                "operator": "!",
                                                "argument": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "RESERVED_PROPS"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "hasOwnProperty"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "propName"
                                                    }
                                                  ]
                                                },
                                                "prefix": true
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "ComputedMemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "props"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "propName"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "ComputedMemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "config"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "propName"
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          }
                                        ]
                                      },
                                      "each": false
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "childrenLength"
                                    },
                                    "init": {
                                      "type": "BinaryExpression",
                                      "operator": "-",
                                      "left": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "arguments"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "length"
                                        }
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": 2.0,
                                        "raw": "2"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "childrenLength"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": 1.0,
                                    "raw": "1"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "props"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "children"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "children"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": ">",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "childrenLength"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": 1.0,
                                      "raw": "1"
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "BindingIdentifier",
                                              "name": "childArray"
                                            },
                                            "init": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "Array"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "childrenLength"
                                                }
                                              ]
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "ForStatement",
                                        "init": {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "BindingIdentifier",
                                                "name": "i"
                                              },
                                              "init": {
                                                "type": "Literal",
                                                "value": 0.0,
                                                "raw": "0"
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "<",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "i"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "childrenLength"
                                          }
                                        },
                                        "update": {
                                          "type": "UpdateExpression",
                                          "operator": "++",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "i"
                                          },
                                          "prefix": false
                                        },
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "ComputedMemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "childArray"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                  }
                                                },
                                                "right": {
                                                  "type": "ComputedMemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "arguments"
                                                  },
                                                  "property": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "i"
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": 2.0,
                                                      "raw": "2"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "Object"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "freeze"
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "Object"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "freeze"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "childArray"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "props"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "children"
                                            }
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "childArray"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                }
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "type"
                                  },
                                  "right": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "type"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "defaultProps"
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "defaultProps"
                                          },
                                          "init": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "type"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "defaultProps"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ForInStatement",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "propName"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "defaultProps"
                                      },
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "ComputedMemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "props"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "propName"
                                                }
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "undefined"
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "ComputedMemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "props"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "propName"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "ComputedMemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "defaultProps"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "propName"
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          }
                                        ]
                                      },
                                      "each": false
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "||",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "key"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "ref"
                                      }
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "BindingIdentifier",
                                                "name": "displayName"
                                              },
                                              "init": {
                                                "type": "ConditionalExpression",
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": "===",
                                                  "left": {
                                                    "type": "UnaryExpression",
                                                    "operator": "typeof",
                                                    "argument": {
                                                      "type": "Identifier",
                                                      "name": "type"
                                                    },
                                                    "prefix": true
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "function",
                                                    "raw": "function"
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BinaryExpression",
                                                  "operator": "||",
                                                  "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "||",
                                                    "left": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "type"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "displayName"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "type"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "name"
                                                      }
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "Unknown",
                                                    "raw": "Unknown"
                                                  }
                                                },
                                                "alternate": {
                                                  "type": "Identifier",
                                                  "name": "type"
                                                }
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "Identifier",
                                            "name": "key"
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "defineKeyPropWarningGetter"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "props"
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "displayName"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        },
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "Identifier",
                                            "name": "ref"
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "defineRefPropWarningGetter"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "props"
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "displayName"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  }
                                ]
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "ReactElement"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "type"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "ref"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "self"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "source"
                                    },
                                    {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "ReactCurrentOwner"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "current"
                                      }
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "props"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "cloneAndReplaceKey"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "oldElement"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "newKey"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "newElement"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "ReactElement"
                                      },
                                      "arguments": [
                                        {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "oldElement"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "type"
                                          }
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "newKey"
                                        },
                                        {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "oldElement"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "ref"
                                          }
                                        },
                                        {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "oldElement"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "_self"
                                          }
                                        },
                                        {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "oldElement"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "_source"
                                          }
                                        },
                                        {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "oldElement"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "_owner"
                                          }
                                        },
                                        {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "oldElement"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "props"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "newElement"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "cloneElement"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "element"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "config"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "children"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "SequenceExpression",
                                      "expressions": [
                                        {
                                          "type": "BinaryExpression",
                                          "operator": "||",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "element"
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": null,
                                              "raw": "null"
                                            }
                                          },
                                          "right": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "element"
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "undefined"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "prefix": true
                                  },
                                  "prefix": true
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ThrowStatement",
                                          "argument": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "Error"
                                            },
                                            "arguments": [
                                              {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "Literal",
                                                    "value": "React.cloneElement(...): The argument must be a React element, but you passed ",
                                                    "raw": "React.cloneElement(...): The argument must be a React element, but you passed "
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "element"
                                                  }
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": ".",
                                                  "raw": "."
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "propName"
                                    },
                                    "init": null
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "props"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "objectAssign"
                                      },
                                      "arguments": [
                                        {
                                          "type": "ObjectExpression",
                                          "properties": []
                                        },
                                        {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "element"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "props"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "key"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "key"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "ref"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "ref"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "self"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "_self"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "source"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "_source"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "owner"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "_owner"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "!=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "config"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "hasValidRef"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "config"
                                          }
                                        ]
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "ref"
                                              },
                                              "right": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "config"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "ref"
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "owner"
                                              },
                                              "right": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "ReactCurrentOwner"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "current"
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "hasValidKey"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "config"
                                          }
                                        ]
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "key"
                                              },
                                              "right": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "Literal",
                                                  "value": "",
                                                  "raw": ""
                                                },
                                                "right": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "config"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "key"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "defaultProps"
                                          },
                                          "init": null
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "element"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "type"
                                          }
                                        },
                                        "right": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "element"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "type"
                                            }
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "defaultProps"
                                          }
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "defaultProps"
                                              },
                                              "right": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "element"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "type"
                                                  }
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "defaultProps"
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "ForInStatement",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "propName"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "config"
                                      },
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "&&",
                                              "left": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "hasOwnProperty$1"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "call"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "config"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "propName"
                                                  }
                                                ]
                                              },
                                              "right": {
                                                "type": "UnaryExpression",
                                                "operator": "!",
                                                "argument": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "RESERVED_PROPS"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "hasOwnProperty"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "propName"
                                                    }
                                                  ]
                                                },
                                                "prefix": true
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "IfStatement",
                                                  "test": {
                                                    "type": "BinaryExpression",
                                                    "operator": "&&",
                                                    "left": {
                                                      "type": "BinaryExpression",
                                                      "operator": "===",
                                                      "left": {
                                                        "type": "ComputedMemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "config"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "propName"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Identifier",
                                                        "name": "undefined"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "BinaryExpression",
                                                      "operator": "!==",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "defaultProps"
                                                      },
                                                      "right": {
                                                        "type": "Identifier",
                                                        "name": "undefined"
                                                      }
                                                    }
                                                  },
                                                  "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "AssignmentExpression",
                                                          "operator": "=",
                                                          "left": {
                                                            "type": "ComputedMemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "props"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "propName"
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "ComputedMemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "defaultProps"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "propName"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "alternate": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "AssignmentExpression",
                                                          "operator": "=",
                                                          "left": {
                                                            "type": "ComputedMemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "props"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "propName"
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "ComputedMemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "config"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "propName"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          }
                                        ]
                                      },
                                      "each": false
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "childrenLength"
                                    },
                                    "init": {
                                      "type": "BinaryExpression",
                                      "operator": "-",
                                      "left": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "arguments"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "length"
                                        }
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": 2.0,
                                        "raw": "2"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "childrenLength"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": 1.0,
                                    "raw": "1"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "props"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "children"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "children"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": ">",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "childrenLength"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": 1.0,
                                      "raw": "1"
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "BindingIdentifier",
                                              "name": "childArray"
                                            },
                                            "init": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "Array"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "childrenLength"
                                                }
                                              ]
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "ForStatement",
                                        "init": {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "BindingIdentifier",
                                                "name": "i"
                                              },
                                              "init": {
                                                "type": "Literal",
                                                "value": 0.0,
                                                "raw": "0"
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "<",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "i"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "childrenLength"
                                          }
                                        },
                                        "update": {
                                          "type": "UpdateExpression",
                                          "operator": "++",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "i"
                                          },
                                          "prefix": false
                                        },
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "ComputedMemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "childArray"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                  }
                                                },
                                                "right": {
                                                  "type": "ComputedMemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "arguments"
                                                  },
                                                  "property": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "i"
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": 2.0,
                                                      "raw": "2"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "props"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "children"
                                            }
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "childArray"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "ReactElement"
                                  },
                                  "arguments": [
                                    {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "type"
                                      }
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "ref"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "self"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "source"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "owner"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "props"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "isValidElement"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "object"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "BinaryExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "UnaryExpression",
                                        "operator": "typeof",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "object"
                                        },
                                        "prefix": true
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": "object",
                                        "raw": "object"
                                      }
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "!==",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "object"
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": null,
                                        "raw": "null"
                                      }
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "object"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "$$typeof"
                                      }
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "REACT_ELEMENT_TYPE"
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "SEPARATOR"
                              },
                              "init": {
                                "type": "Literal",
                                "value": ".",
                                "raw": "."
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "SUBSEPARATOR"
                              },
                              "init": {
                                "type": "Literal",
                                "value": ":",
                                "raw": ":"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "escape"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "key"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "escapeRegex"
                                    },
                                    "init": {
                                      "type": "RegexLiteral",
                                      "value": ";",
                                      "raw": ";",
                                      "regex": {
                                        "type": "Regex",
                                        "pattern": "",
                                        "flags": [
                                          "g"
                                        ]
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "escaperLookup"
                                    },
                                    "init": {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Literal",
                                            "value": "=",
                                            "raw": ":"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Literal",
                                            "value": "=0",
                                            "raw": "=0"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 1137,
                                              "col": 1137,
                                              "idx": 34732
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 1137,
                                              "col": 1137,
                                              "idx": 34737
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Literal",
                                            "value": ":",
                                            "raw": ":"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Literal",
                                            "value": "=2",
                                            "raw": "=2"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 1138,
                                              "col": 1138,
                                              "idx": 34747
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 1139,
                                              "col": 1139,
                                              "idx": 34755
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "escapedString"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "SequenceExpression",
                                          "expressions": [
                                            {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Literal",
                                                "value": "",
                                                "raw": ""
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "key"
                                              }
                                            }
                                          ]
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "replace"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "escapeRegex"
                                        },
                                        {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [
                                            {
                                              "type": "BindingIdentifier",
                                              "name": "match"
                                            }
                                          ],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "ComputedMemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "escaperLookup"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "match"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "generator": false,
                                          "expression": false,
                                          "async": false
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "BinaryExpression",
                                  "operator": "+",
                                  "left": {
                                    "type": "Literal",
                                    "value": "$",
                                    "raw": "$"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "escapedString"
                                  }
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "didWarnAboutMaps"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "false",
                                "raw": "false"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "userProvidedKeyEscapeRegex"
                              },
                              "init": {
                                "type": "RegexLiteral",
                                "value": ";",
                                "raw": ";",
                                "regex": {
                                  "type": "Regex",
                                  "pattern": "",
                                  "flags": [
                                    "g"
                                  ]
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "escapeUserProvidedKey"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "text"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "SequenceExpression",
                                      "expressions": [
                                        {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "Literal",
                                            "value": "",
                                            "raw": ""
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "text"
                                          }
                                        }
                                      ]
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "replace"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "userProvidedKeyEscapeRegex"
                                    },
                                    {
                                      "type": "Literal",
                                      "value": "$&/",
                                      "raw": "$&/"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "POOL_SIZE"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 10.0,
                                "raw": "10"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "traverseContextPool"
                              },
                              "init": {
                                "type": "ArrayExpression",
                                "elements": []
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "getPooledTraverseContext"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "mapResult"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "keyPrefix"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "mapFunction"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "mapContext"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "traverseContextPool"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "length"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "traverseContext"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "traverseContextPool"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "pop"
                                              }
                                            },
                                            "arguments": []
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "traverseContext"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "result"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "mapResult"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "traverseContext"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "keyPrefix"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "keyPrefix"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "traverseContext"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "func"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "mapFunction"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "traverseContext"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "context"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "mapContext"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "traverseContext"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "count"
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": 0.0,
                                          "raw": "0"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "traverseContext"
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "ObjectExpression",
                                        "properties": [
                                          {
                                            "type": "Property",
                                            "key": {
                                              "type": "Identifier",
                                              "name": "result"
                                            },
                                            "computed": false,
                                            "value": {
                                              "type": "Identifier",
                                              "name": "mapResult"
                                            },
                                            "kind": "init",
                                            "method": false,
                                            "shorthand": false,
                                            "span": {
                                              "type": "Span",
                                              "start": {
                                                "type": "Marker",
                                                "line": 1172,
                                                "col": 1172,
                                                "idx": 35666
                                              },
                                              "end": {
                                                "type": "Marker",
                                                "line": 1172,
                                                "col": 1172,
                                                "idx": 35676
                                              }
                                            }
                                          },
                                          {
                                            "type": "Property",
                                            "key": {
                                              "type": "Identifier",
                                              "name": "keyPrefix"
                                            },
                                            "computed": false,
                                            "value": {
                                              "type": "Identifier",
                                              "name": "keyPrefix"
                                            },
                                            "kind": "init",
                                            "method": false,
                                            "shorthand": false,
                                            "span": {
                                              "type": "Span",
                                              "start": {
                                                "type": "Marker",
                                                "line": 1173,
                                                "col": 1173,
                                                "idx": 35694
                                              },
                                              "end": {
                                                "type": "Marker",
                                                "line": 1173,
                                                "col": 1173,
                                                "idx": 35704
                                              }
                                            }
                                          },
                                          {
                                            "type": "Property",
                                            "key": {
                                              "type": "Identifier",
                                              "name": "func"
                                            },
                                            "computed": false,
                                            "value": {
                                              "type": "Identifier",
                                              "name": "mapFunction"
                                            },
                                            "kind": "init",
                                            "method": false,
                                            "shorthand": false,
                                            "span": {
                                              "type": "Span",
                                              "start": {
                                                "type": "Marker",
                                                "line": 1174,
                                                "col": 1174,
                                                "idx": 35717
                                              },
                                              "end": {
                                                "type": "Marker",
                                                "line": 1174,
                                                "col": 1174,
                                                "idx": 35729
                                              }
                                            }
                                          },
                                          {
                                            "type": "Property",
                                            "key": {
                                              "type": "Identifier",
                                              "name": "context"
                                            },
                                            "computed": false,
                                            "value": {
                                              "type": "Identifier",
                                              "name": "mapContext"
                                            },
                                            "kind": "init",
                                            "method": false,
                                            "shorthand": false,
                                            "span": {
                                              "type": "Span",
                                              "start": {
                                                "type": "Marker",
                                                "line": 1175,
                                                "col": 1175,
                                                "idx": 35745
                                              },
                                              "end": {
                                                "type": "Marker",
                                                "line": 1175,
                                                "col": 1175,
                                                "idx": 35756
                                              }
                                            }
                                          },
                                          {
                                            "type": "Property",
                                            "key": {
                                              "type": "Identifier",
                                              "name": "count"
                                            },
                                            "computed": false,
                                            "value": {
                                              "type": "Literal",
                                              "value": 0.0,
                                              "raw": "0"
                                            },
                                            "kind": "init",
                                            "method": false,
                                            "shorthand": false,
                                            "span": {
                                              "type": "Span",
                                              "start": {
                                                "type": "Marker",
                                                "line": 1176,
                                                "col": 1176,
                                                "idx": 35770
                                              },
                                              "end": {
                                                "type": "Marker",
                                                "line": 1177,
                                                "col": 1177,
                                                "idx": 35777
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "releaseTraverseContext"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "traverseContext"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "traverseContext"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "result"
                                    }
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "traverseContext"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "keyPrefix"
                                    }
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "traverseContext"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "func"
                                    }
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "traverseContext"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "context"
                                    }
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "traverseContext"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "count"
                                    }
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": 0.0,
                                    "raw": "0"
                                  }
                                }
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "<",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "traverseContextPool"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "length"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "POOL_SIZE"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "traverseContextPool"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "push"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "traverseContext"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "traverseAllChildrenImpl"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "children"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "nameSoFar"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "callback"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "traverseContext"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "type"
                                    },
                                    "init": {
                                      "type": "UnaryExpression",
                                      "operator": "typeof",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "children"
                                      },
                                      "prefix": true
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "||",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "type"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": "undefined",
                                      "raw": "undefined"
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "type"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": "boolean",
                                      "raw": "boolean"
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "children"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "invokeCallback"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": "false",
                                      "raw": "false"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "children"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "invokeCallback"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "true",
                                          "raw": "true"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "SwitchStatement",
                                      "discriminant": {
                                        "type": "Identifier",
                                        "name": "type"
                                      },
                                      "cases": [
                                        {
                                          "type": "SwitchCase",
                                          "test": {
                                            "type": "Literal",
                                            "value": "string",
                                            "raw": "string"
                                          },
                                          "consequent": []
                                        },
                                        {
                                          "type": "SwitchCase",
                                          "test": {
                                            "type": "Literal",
                                            "value": "number",
                                            "raw": "number"
                                          },
                                          "consequent": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "invokeCallback"
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "true",
                                                  "raw": "true"
                                                }
                                              }
                                            },
                                            {
                                              "type": "BreakStatement",
                                              "label": null
                                            }
                                          ]
                                        },
                                        {
                                          "type": "SwitchCase",
                                          "test": {
                                            "type": "Literal",
                                            "value": "object",
                                            "raw": "object"
                                          },
                                          "consequent": [
                                            {
                                              "type": "SwitchStatement",
                                              "discriminant": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "children"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "$$typeof"
                                                }
                                              },
                                              "cases": [
                                                {
                                                  "type": "SwitchCase",
                                                  "test": {
                                                    "type": "Identifier",
                                                    "name": "REACT_ELEMENT_TYPE"
                                                  },
                                                  "consequent": []
                                                },
                                                {
                                                  "type": "SwitchCase",
                                                  "test": {
                                                    "type": "Identifier",
                                                    "name": "REACT_PORTAL_TYPE"
                                                  },
                                                  "consequent": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "invokeCallback"
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": "true",
                                                          "raw": "true"
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "invokeCallback"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "callback"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "traverseContext"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "children"
                                          },
                                          {
                                            "type": "ConditionalExpression",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "nameSoFar"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "",
                                                "raw": ""
                                              }
                                            },
                                            "consequent": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "SEPARATOR"
                                              },
                                              "right": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "getComponentKey"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "children"
                                                  },
                                                  {
                                                    "type": "Literal",
                                                    "value": 0.0,
                                                    "raw": "0"
                                                  }
                                                ]
                                              }
                                            },
                                            "alternate": {
                                              "type": "Identifier",
                                              "name": "nameSoFar"
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Literal",
                                        "value": 1.0,
                                        "raw": "1"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "child"
                                    },
                                    "init": null
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "nextName"
                                    },
                                    "init": null
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "subtreeCount"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": 0.0,
                                      "raw": "0"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "nextNamePrefix"
                                    },
                                    "init": {
                                      "type": "ConditionalExpression",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "nameSoFar"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "",
                                          "raw": ""
                                        }
                                      },
                                      "consequent": {
                                        "type": "Identifier",
                                        "name": "SEPARATOR"
                                      },
                                      "alternate": {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "nameSoFar"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "SUBSEPARATOR"
                                        }
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Array"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "isArray"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "children"
                                    }
                                  ]
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ForStatement",
                                      "init": {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "BindingIdentifier",
                                              "name": "i"
                                            },
                                            "init": {
                                              "type": "Literal",
                                              "value": 0.0,
                                              "raw": "0"
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "<",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "i"
                                        },
                                        "right": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "children"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "length"
                                          }
                                        }
                                      },
                                      "update": {
                                        "type": "UpdateExpression",
                                        "operator": "++",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "i"
                                        },
                                        "prefix": false
                                      },
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "child"
                                              },
                                              "right": {
                                                "type": "ComputedMemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "children"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "i"
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "nextName"
                                              },
                                              "right": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "nextNamePrefix"
                                                },
                                                "right": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "getComponentKey"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "child"
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "i"
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "+=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "subtreeCount"
                                              },
                                              "right": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "traverseAllChildrenImpl"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "child"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "nextName"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "callback"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "traverseContext"
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "iteratorFn"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "getIteratorFn"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "children"
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                          "type": "UnaryExpression",
                                          "operator": "typeof",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "iteratorFn"
                                          },
                                          "prefix": true
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "function",
                                          "raw": "function"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": "===",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "iteratorFn"
                                                  },
                                                  "right": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "children"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "entries"
                                                    }
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "ConditionalExpression",
                                                        "test": {
                                                          "type": "UnaryExpression",
                                                          "operator": "!",
                                                          "argument": {
                                                            "type": "Identifier",
                                                            "name": "didWarnAboutMaps"
                                                          },
                                                          "prefix": true
                                                        },
                                                        "consequent": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "Identifier",
                                                            "name": "warning$1"
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Literal",
                                                              "value": "false",
                                                              "raw": "false"
                                                            },
                                                            {
                                                              "type": "BinaryExpression",
                                                              "operator": "+",
                                                              "left": {
                                                                "type": "BinaryExpression",
                                                                "operator": "+",
                                                                "left": {
                                                                  "type": "Literal",
                                                                  "value": "Using Maps as children is unsupported and will likely yield ",
                                                                  "raw": "Using Maps as children is unsupported and will likely yield "
                                                                },
                                                                "right": {
                                                                  "type": "Literal",
                                                                  "value": "unexpected results. Convert it to a sequence/iterable of keyed ",
                                                                  "raw": "unexpected results. Convert it to a sequence/iterable of keyed "
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "Literal",
                                                                "value": "ReactElements instead.",
                                                                "raw": "ReactElements instead."
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "alternate": {
                                                          "type": "UnaryExpression",
                                                          "operator": "void",
                                                          "argument": {
                                                            "type": "Literal",
                                                            "value": 0.0,
                                                            "raw": "0"
                                                          },
                                                          "prefix": true
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "didWarnAboutMaps"
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": "true",
                                                          "raw": "true"
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              }
                                            ]
                                          },
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "BindingIdentifier",
                                                  "name": "iterator"
                                                },
                                                "init": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "iteratorFn"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "call"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "children"
                                                    }
                                                  ]
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "BindingIdentifier",
                                                  "name": "step"
                                                },
                                                "init": null
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "BindingIdentifier",
                                                  "name": "ii"
                                                },
                                                "init": {
                                                  "type": "Literal",
                                                  "value": 0.0,
                                                  "raw": "0"
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "WhileStatement",
                                            "test": {
                                              "type": "UnaryExpression",
                                              "operator": "!",
                                              "argument": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "SequenceExpression",
                                                  "expressions": [
                                                    {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "step"
                                                      },
                                                      "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "StaticMemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "iterator"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "next"
                                                          }
                                                        },
                                                        "arguments": []
                                                      }
                                                    }
                                                  ]
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "done"
                                                }
                                              },
                                              "prefix": true
                                            },
                                            "body": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "child"
                                                    },
                                                    "right": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "step"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "value"
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "nextName"
                                                    },
                                                    "right": {
                                                      "type": "BinaryExpression",
                                                      "operator": "+",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "nextNamePrefix"
                                                      },
                                                      "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "getComponentKey"
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "child"
                                                          },
                                                          {
                                                            "type": "UpdateExpression",
                                                            "operator": "++",
                                                            "argument": {
                                                              "type": "Identifier",
                                                              "name": "ii"
                                                            },
                                                            "prefix": false
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "+=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "subtreeCount"
                                                    },
                                                    "right": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "Identifier",
                                                        "name": "traverseAllChildrenImpl"
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "child"
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "name": "nextName"
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "name": "callback"
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "name": "traverseContext"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "===",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "type"
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": "object",
                                            "raw": "object"
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "BindingIdentifier",
                                                    "name": "addendum"
                                                  },
                                                  "init": {
                                                    "type": "Literal",
                                                    "value": "",
                                                    "raw": ""
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "addendum"
                                                    },
                                                    "right": {
                                                      "type": "BinaryExpression",
                                                      "operator": "+",
                                                      "left": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                          "type": "Literal",
                                                          "value": " If you meant to render a collection of children, use an array ",
                                                          "raw": " If you meant to render a collection of children, use an array "
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": "instead.",
                                                          "raw": "instead."
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "StaticMemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "ReactDebugCurrentFrame"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "getStackAddendum"
                                                          }
                                                        },
                                                        "arguments": []
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "BindingIdentifier",
                                                    "name": "childrenString"
                                                  },
                                                  "init": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "Literal",
                                                      "value": "",
                                                      "raw": ""
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "children"
                                                    }
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ThrowStatement",
                                                      "argument": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "Error"
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                              "type": "BinaryExpression",
                                                              "operator": "+",
                                                              "left": {
                                                                "type": "BinaryExpression",
                                                                "operator": "+",
                                                                "left": {
                                                                  "type": "Literal",
                                                                  "value": "Objects are not valid as a React child (found: ",
                                                                  "raw": "Objects are not valid as a React child (found: "
                                                                },
                                                                "right": {
                                                                  "type": "SequenceExpression",
                                                                  "expressions": [
                                                                    {
                                                                      "type": "ConditionalExpression",
                                                                      "test": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "===",
                                                                        "left": {
                                                                          "type": "Identifier",
                                                                          "name": "childrenString"
                                                                        },
                                                                        "right": {
                                                                          "type": "Literal",
                                                                          "value": "[object Object]",
                                                                          "raw": "[object Object]"
                                                                        }
                                                                      },
                                                                      "consequent": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "+",
                                                                        "left": {
                                                                          "type": "BinaryExpression",
                                                                          "operator": "+",
                                                                          "left": {
                                                                            "type": "Literal",
                                                                            "value": "object with keys {",
                                                                            "raw": "object with keys {"
                                                                          },
                                                                          "right": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                              "type": "StaticMemberExpression",
                                                                              "computed": false,
                                                                              "object": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                  "type": "StaticMemberExpression",
                                                                                  "computed": false,
                                                                                  "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "Object"
                                                                                  },
                                                                                  "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "keys"
                                                                                  }
                                                                                },
                                                                                "arguments": [
                                                                                  {
                                                                                    "type": "Identifier",
                                                                                    "name": "children"
                                                                                  }
                                                                                ]
                                                                              },
                                                                              "property": {
                                                                                "type": "Identifier",
                                                                                "name": "join"
                                                                              }
                                                                            },
                                                                            "arguments": [
                                                                              {
                                                                                "type": "Literal",
                                                                                "value": ", ",
                                                                                "raw": ", "
                                                                              }
                                                                            ]
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "Literal",
                                                                          "value": "}",
                                                                          "raw": "}"
                                                                        }
                                                                      },
                                                                      "alternate": {
                                                                        "type": "Identifier",
                                                                        "name": "childrenString"
                                                                      }
                                                                    }
                                                                  ]
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "Literal",
                                                                "value": ").",
                                                                "raw": ")."
                                                              }
                                                            },
                                                            "right": {
                                                              "type": "Identifier",
                                                              "name": "addendum"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "subtreeCount"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "traverseAllChildren"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "children"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "callback"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "traverseContext"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "==",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "children"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Literal",
                                        "value": 0.0,
                                        "raw": "0"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "traverseAllChildrenImpl"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "children"
                                    },
                                    {
                                      "type": "Literal",
                                      "value": "",
                                      "raw": ""
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "callback"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "traverseContext"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "getComponentKey"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "component"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "index"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "UnaryExpression",
                                        "operator": "typeof",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "component"
                                        },
                                        "prefix": true
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": "object",
                                        "raw": "object"
                                      }
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "!==",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "component"
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": null,
                                        "raw": "null"
                                      }
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "!=",
                                    "left": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "component"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "key"
                                      }
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "escape"
                                        },
                                        "arguments": [
                                          {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "component"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "key"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "index"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "toString"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": 36.0,
                                      "raw": "36"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "forEachSingleChild"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "bookKeeping"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "child"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "name"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "func"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "bookKeeping"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "func"
                                      }
                                    }
                                  },
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "context"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "bookKeeping"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "context"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "func"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "call"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "context"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "child"
                                    },
                                    {
                                      "type": "UpdateExpression",
                                      "operator": "++",
                                      "argument": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "bookKeeping"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "count"
                                        }
                                      },
                                      "prefix": false
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "forEachChildren"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "children"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "forEachFunc"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "forEachContext"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "==",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "children"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "children"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "traverseContext"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "getPooledTraverseContext"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        },
                                        {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "forEachFunc"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "forEachContext"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "traverseAllChildren"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "children"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "forEachSingleChild"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "traverseContext"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "releaseTraverseContext"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "traverseContext"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "mapSingleChildIntoContext"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "bookKeeping"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "child"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "childKey"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "result"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "bookKeeping"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "result"
                                      }
                                    }
                                  },
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "keyPrefix"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "bookKeeping"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "keyPrefix"
                                      }
                                    }
                                  },
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "func"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "bookKeeping"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "func"
                                      }
                                    }
                                  },
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "context"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "bookKeeping"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "context"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "mappedChild"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "func"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "call"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "context"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "child"
                                        },
                                        {
                                          "type": "UpdateExpression",
                                          "operator": "++",
                                          "argument": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "bookKeeping"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "count"
                                            }
                                          },
                                          "prefix": false
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Array"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "isArray"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "mappedChild"
                                    }
                                  ]
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "mapIntoWithKeyPrefixInternal"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "mappedChild"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "result"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "childKey"
                                          },
                                          {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [
                                              {
                                                "type": "BindingIdentifier",
                                                "name": "c"
                                              }
                                            ],
                                            "body": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ReturnStatement",
                                                  "argument": {
                                                    "type": "Identifier",
                                                    "name": "c"
                                                  }
                                                }
                                              ]
                                            },
                                            "generator": false,
                                            "expression": false,
                                            "async": false
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "mappedChild"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "isValidElement"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "mappedChild"
                                            }
                                          ]
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "mappedChild"
                                                },
                                                "right": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "cloneAndReplaceKey"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "mappedChild"
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "+",
                                                      "left": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "keyPrefix"
                                                        },
                                                        "right": {
                                                          "type": "SequenceExpression",
                                                          "expressions": [
                                                            {
                                                              "type": "ConditionalExpression",
                                                              "test": {
                                                                "type": "BinaryExpression",
                                                                "operator": "&&",
                                                                "left": {
                                                                  "type": "StaticMemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "mappedChild"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "key"
                                                                  }
                                                                },
                                                                "right": {
                                                                  "type": "SequenceExpression",
                                                                  "expressions": [
                                                                    {
                                                                      "type": "BinaryExpression",
                                                                      "operator": "||",
                                                                      "left": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "!",
                                                                        "argument": {
                                                                          "type": "Identifier",
                                                                          "name": "child"
                                                                        },
                                                                        "prefix": true
                                                                      },
                                                                      "right": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "!==",
                                                                        "left": {
                                                                          "type": "StaticMemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "child"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "key"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "StaticMemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "mappedChild"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "key"
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  ]
                                                                }
                                                              },
                                                              "consequent": {
                                                                "type": "BinaryExpression",
                                                                "operator": "+",
                                                                "left": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "Identifier",
                                                                    "name": "escapeUserProvidedKey"
                                                                  },
                                                                  "arguments": [
                                                                    {
                                                                      "type": "StaticMemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "mappedChild"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "key"
                                                                      }
                                                                    }
                                                                  ]
                                                                },
                                                                "right": {
                                                                  "type": "Literal",
                                                                  "value": "/",
                                                                  "raw": "/"
                                                                }
                                                              },
                                                              "alternate": {
                                                                "type": "Literal",
                                                                "value": "",
                                                                "raw": ""
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Identifier",
                                                        "name": "childKey"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "result"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "push"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "mappedChild"
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "mapIntoWithKeyPrefixInternal"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "children"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "array"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "prefix"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "func"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "context"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "escapedPrefix"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": "",
                                      "raw": ""
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "!=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "prefix"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "escapedPrefix"
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "escapeUserProvidedKey"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "prefix"
                                              }
                                            ]
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": "/",
                                            "raw": "/"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "traverseContext"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "getPooledTraverseContext"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "array"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "escapedPrefix"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "func"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "context"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "traverseAllChildren"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "children"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "mapSingleChildIntoContext"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "traverseContext"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "releaseTraverseContext"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "traverseContext"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "mapChildren"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "children"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "func"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "context"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "==",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "children"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "children"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "result"
                                    },
                                    "init": {
                                      "type": "ArrayExpression",
                                      "elements": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "mapIntoWithKeyPrefixInternal"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "children"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "result"
                                    },
                                    {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "func"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "context"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "result"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "countChildren"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "children"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "traverseAllChildren"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "children"
                                    },
                                    {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ReturnStatement",
                                            "argument": {
                                              "type": "Literal",
                                              "value": null,
                                              "raw": "null"
                                            }
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    },
                                    {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "toArray"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "children"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "result"
                                    },
                                    "init": {
                                      "type": "ArrayExpression",
                                      "elements": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "mapIntoWithKeyPrefixInternal"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "children"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "result"
                                    },
                                    {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    },
                                    {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "child"
                                        }
                                      ],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ReturnStatement",
                                            "argument": {
                                              "type": "Identifier",
                                              "name": "child"
                                            }
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "result"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "onlyChild"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "children"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "isValidElement"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "children"
                                      }
                                    ]
                                  },
                                  "prefix": true
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ThrowStatement",
                                          "argument": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "Error"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "React.Children.only expected to receive a single React element child.",
                                                "raw": "React.Children.only expected to receive a single React element child."
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "children"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "createContext"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "defaultValue"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "calculateChangedBits"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "calculateChangedBits"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "undefined"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "calculateChangedBits"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "ConditionalExpression",
                                            "test": {
                                              "type": "UnaryExpression",
                                              "operator": "!",
                                              "argument": {
                                                "type": "SequenceExpression",
                                                "expressions": [
                                                  {
                                                    "type": "BinaryExpression",
                                                    "operator": "||",
                                                    "left": {
                                                      "type": "BinaryExpression",
                                                      "operator": "===",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "calculateChangedBits"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": null,
                                                        "raw": "null"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "BinaryExpression",
                                                      "operator": "===",
                                                      "left": {
                                                        "type": "UnaryExpression",
                                                        "operator": "typeof",
                                                        "argument": {
                                                          "type": "Identifier",
                                                          "name": "calculateChangedBits"
                                                        },
                                                        "prefix": true
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": "function",
                                                        "raw": "function"
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "prefix": true
                                            },
                                            "consequent": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "warningWithoutStack$1"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "false",
                                                  "raw": "false"
                                                },
                                                {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "Literal",
                                                    "value": "createContext: Expected the optional second argument to be a ",
                                                    "raw": "createContext: Expected the optional second argument to be a "
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "function. Instead received: %s",
                                                    "raw": "function. Instead received: %s"
                                                  }
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "calculateChangedBits"
                                                }
                                              ]
                                            },
                                            "alternate": {
                                              "type": "UnaryExpression",
                                              "operator": "void",
                                              "argument": {
                                                "type": "Literal",
                                                "value": 0.0,
                                                "raw": "0"
                                              },
                                              "prefix": true
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "context"
                                    },
                                    "init": {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "$$typeof"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "REACT_CONTEXT_TYPE"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 1489,
                                              "col": 1489,
                                              "idx": 45474
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 1489,
                                              "col": 1489,
                                              "idx": 45493
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "_calculateChangedBits"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "calculateChangedBits"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 1490,
                                              "col": 1490,
                                              "idx": 45521
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 1490,
                                              "col": 1490,
                                              "idx": 45542
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "_currentValue"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "defaultValue"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 1496,
                                              "col": 1496,
                                              "idx": 45942
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 1496,
                                              "col": 1496,
                                              "idx": 45955
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "_currentValue2"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "defaultValue"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 1497,
                                              "col": 1497,
                                              "idx": 45976
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 1497,
                                              "col": 1497,
                                              "idx": 45989
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "_threadCount"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Literal",
                                            "value": 0.0,
                                            "raw": "0"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 1500,
                                              "col": 1500,
                                              "idx": 46162
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 1500,
                                              "col": 1500,
                                              "idx": 46164
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "Provider"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Literal",
                                            "value": null,
                                            "raw": "null"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 1502,
                                              "col": 1502,
                                              "idx": 46205
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 1502,
                                              "col": 1502,
                                              "idx": 46210
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "Consumer"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Literal",
                                            "value": null,
                                            "raw": "null"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 1503,
                                              "col": 1503,
                                              "idx": 46225
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 1504,
                                              "col": 1504,
                                              "idx": 46233
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "context"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "Provider"
                                    }
                                  },
                                  "right": {
                                    "type": "ObjectExpression",
                                    "properties": [
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "$$typeof"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "REACT_PROVIDER_TYPE"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 1506,
                                            "col": 1506,
                                            "idx": 46272
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 1506,
                                            "col": 1506,
                                            "idx": 46292
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "_context"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "context"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 1507,
                                            "col": 1507,
                                            "idx": 46307
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 1508,
                                            "col": 1508,
                                            "idx": 46318
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "hasWarnedAboutUsingNestedContextConsumers"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": "false",
                                      "raw": "false"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "hasWarnedAboutUsingConsumerProvider"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": "false",
                                      "raw": "false"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "BindingIdentifier",
                                          "name": "Consumer"
                                        },
                                        "init": {
                                          "type": "ObjectExpression",
                                          "properties": [
                                            {
                                              "type": "Property",
                                              "key": {
                                                "type": "Identifier",
                                                "name": "$$typeof"
                                              },
                                              "computed": false,
                                              "value": {
                                                "type": "Identifier",
                                                "name": "REACT_CONTEXT_TYPE"
                                              },
                                              "kind": "init",
                                              "method": false,
                                              "shorthand": false,
                                              "span": {
                                                "type": "Span",
                                                "start": {
                                                  "type": "Marker",
                                                  "line": 1517,
                                                  "col": 1517,
                                                  "idx": 46690
                                                },
                                                "end": {
                                                  "type": "Marker",
                                                  "line": 1517,
                                                  "col": 1517,
                                                  "idx": 46709
                                                }
                                              }
                                            },
                                            {
                                              "type": "Property",
                                              "key": {
                                                "type": "Identifier",
                                                "name": "_context"
                                              },
                                              "computed": false,
                                              "value": {
                                                "type": "Identifier",
                                                "name": "context"
                                              },
                                              "kind": "init",
                                              "method": false,
                                              "shorthand": false,
                                              "span": {
                                                "type": "Span",
                                                "start": {
                                                  "type": "Marker",
                                                  "line": 1518,
                                                  "col": 1518,
                                                  "idx": 46726
                                                },
                                                "end": {
                                                  "type": "Marker",
                                                  "line": 1518,
                                                  "col": 1518,
                                                  "idx": 46734
                                                }
                                              }
                                            },
                                            {
                                              "type": "Property",
                                              "key": {
                                                "type": "Identifier",
                                                "name": "_calculateChangedBits"
                                              },
                                              "computed": false,
                                              "value": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "context"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "_calculateChangedBits"
                                                }
                                              },
                                              "kind": "init",
                                              "method": false,
                                              "shorthand": false,
                                              "span": {
                                                "type": "Span",
                                                "start": {
                                                  "type": "Marker",
                                                  "line": 1519,
                                                  "col": 1519,
                                                  "idx": 46764
                                                },
                                                "end": {
                                                  "type": "Marker",
                                                  "line": 1520,
                                                  "col": 1520,
                                                  "idx": 46799
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "Object"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "defineProperties"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "Consumer"
                                        },
                                        {
                                          "type": "ObjectExpression",
                                          "properties": [
                                            {
                                              "type": "Property",
                                              "key": {
                                                "type": "Identifier",
                                                "name": "Provider"
                                              },
                                              "computed": false,
                                              "value": {
                                                "type": "ObjectExpression",
                                                "properties": [
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "get"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "IfStatement",
                                                            "test": {
                                                              "type": "UnaryExpression",
                                                              "operator": "!",
                                                              "argument": {
                                                                "type": "Identifier",
                                                                "name": "hasWarnedAboutUsingConsumerProvider"
                                                              },
                                                              "prefix": true
                                                            },
                                                            "consequent": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                      "type": "Identifier",
                                                                      "name": "hasWarnedAboutUsingConsumerProvider"
                                                                    },
                                                                    "right": {
                                                                      "type": "Literal",
                                                                      "value": "true",
                                                                      "raw": "true"
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "Identifier",
                                                                      "name": "warning$1"
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Literal",
                                                                        "value": "false",
                                                                        "raw": "false"
                                                                      },
                                                                      {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "+",
                                                                        "left": {
                                                                          "type": "Literal",
                                                                          "value": "Rendering <Context.Consumer.Provider> is not supported and will be removed in ",
                                                                          "raw": "Rendering <Context.Consumer.Provider> is not supported and will be removed in "
                                                                        },
                                                                        "right": {
                                                                          "type": "Literal",
                                                                          "value": "a future major release. Did you mean to render <Context.Provider> instead?",
                                                                          "raw": "a future major release. Did you mean to render <Context.Provider> instead?"
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "alternate": null
                                                          },
                                                          {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                              "type": "StaticMemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "context"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "Provider"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "generator": false,
                                                      "expression": false,
                                                      "async": false
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 1527,
                                                        "col": 1527,
                                                        "idx": 47091
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 1531,
                                                        "col": 1531,
                                                        "idx": 47328
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "set"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [
                                                        {
                                                          "type": "BindingIdentifier",
                                                          "name": "_Provider"
                                                        }
                                                      ],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "AssignmentExpression",
                                                              "operator": "=",
                                                              "left": {
                                                                "type": "StaticMemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "context"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "Provider"
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "Identifier",
                                                                "name": "_Provider"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "generator": false,
                                                      "expression": false,
                                                      "async": false
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 1532,
                                                        "col": 1532,
                                                        "idx": 47341
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 1535,
                                                        "col": 1535,
                                                        "idx": 47421
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "kind": "init",
                                              "method": false,
                                              "shorthand": false,
                                              "span": {
                                                "type": "Span",
                                                "start": {
                                                  "type": "Marker",
                                                  "line": 1532,
                                                  "col": 1532,
                                                  "idx": 47341
                                                },
                                                "end": {
                                                  "type": "Marker",
                                                  "line": 1535,
                                                  "col": 1535,
                                                  "idx": 47422
                                                }
                                              }
                                            },
                                            {
                                              "type": "Property",
                                              "key": {
                                                "type": "Identifier",
                                                "name": "_currentValue"
                                              },
                                              "computed": false,
                                              "value": {
                                                "type": "ObjectExpression",
                                                "properties": [
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "get"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                              "type": "StaticMemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "context"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "_currentValue"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "generator": false,
                                                      "expression": false,
                                                      "async": false
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 1537,
                                                        "col": 1537,
                                                        "idx": 47458
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 1539,
                                                        "col": 1539,
                                                        "idx": 47522
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "set"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [
                                                        {
                                                          "type": "BindingIdentifier",
                                                          "name": "_currentValue"
                                                        }
                                                      ],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "AssignmentExpression",
                                                              "operator": "=",
                                                              "left": {
                                                                "type": "StaticMemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "context"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "_currentValue"
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "Identifier",
                                                                "name": "_currentValue"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "generator": false,
                                                      "expression": false,
                                                      "async": false
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 1540,
                                                        "col": 1540,
                                                        "idx": 47535
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 1543,
                                                        "col": 1543,
                                                        "idx": 47628
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "kind": "init",
                                              "method": false,
                                              "shorthand": false,
                                              "span": {
                                                "type": "Span",
                                                "start": {
                                                  "type": "Marker",
                                                  "line": 1540,
                                                  "col": 1540,
                                                  "idx": 47535
                                                },
                                                "end": {
                                                  "type": "Marker",
                                                  "line": 1543,
                                                  "col": 1543,
                                                  "idx": 47629
                                                }
                                              }
                                            },
                                            {
                                              "type": "Property",
                                              "key": {
                                                "type": "Identifier",
                                                "name": "_currentValue2"
                                              },
                                              "computed": false,
                                              "value": {
                                                "type": "ObjectExpression",
                                                "properties": [
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "get"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                              "type": "StaticMemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "context"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "_currentValue2"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "generator": false,
                                                      "expression": false,
                                                      "async": false
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 1545,
                                                        "col": 1545,
                                                        "idx": 47666
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 1547,
                                                        "col": 1547,
                                                        "idx": 47731
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "set"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [
                                                        {
                                                          "type": "BindingIdentifier",
                                                          "name": "_currentValue2"
                                                        }
                                                      ],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "AssignmentExpression",
                                                              "operator": "=",
                                                              "left": {
                                                                "type": "StaticMemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "context"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "_currentValue2"
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "Identifier",
                                                                "name": "_currentValue2"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "generator": false,
                                                      "expression": false,
                                                      "async": false
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 1548,
                                                        "col": 1548,
                                                        "idx": 47744
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 1551,
                                                        "col": 1551,
                                                        "idx": 47840
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "kind": "init",
                                              "method": false,
                                              "shorthand": false,
                                              "span": {
                                                "type": "Span",
                                                "start": {
                                                  "type": "Marker",
                                                  "line": 1548,
                                                  "col": 1548,
                                                  "idx": 47744
                                                },
                                                "end": {
                                                  "type": "Marker",
                                                  "line": 1551,
                                                  "col": 1551,
                                                  "idx": 47841
                                                }
                                              }
                                            },
                                            {
                                              "type": "Property",
                                              "key": {
                                                "type": "Identifier",
                                                "name": "_threadCount"
                                              },
                                              "computed": false,
                                              "value": {
                                                "type": "ObjectExpression",
                                                "properties": [
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "get"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                              "type": "StaticMemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "context"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "_threadCount"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "generator": false,
                                                      "expression": false,
                                                      "async": false
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 1553,
                                                        "col": 1553,
                                                        "idx": 47876
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 1555,
                                                        "col": 1555,
                                                        "idx": 47939
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "set"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [
                                                        {
                                                          "type": "BindingIdentifier",
                                                          "name": "_threadCount"
                                                        }
                                                      ],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "AssignmentExpression",
                                                              "operator": "=",
                                                              "left": {
                                                                "type": "StaticMemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "context"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "_threadCount"
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "Identifier",
                                                                "name": "_threadCount"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "generator": false,
                                                      "expression": false,
                                                      "async": false
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 1556,
                                                        "col": 1556,
                                                        "idx": 47952
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 1559,
                                                        "col": 1559,
                                                        "idx": 48042
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "kind": "init",
                                              "method": false,
                                              "shorthand": false,
                                              "span": {
                                                "type": "Span",
                                                "start": {
                                                  "type": "Marker",
                                                  "line": 1556,
                                                  "col": 1556,
                                                  "idx": 47952
                                                },
                                                "end": {
                                                  "type": "Marker",
                                                  "line": 1559,
                                                  "col": 1559,
                                                  "idx": 48043
                                                }
                                              }
                                            },
                                            {
                                              "type": "Property",
                                              "key": {
                                                "type": "Identifier",
                                                "name": "Consumer"
                                              },
                                              "computed": false,
                                              "value": {
                                                "type": "ObjectExpression",
                                                "properties": [
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "get"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "IfStatement",
                                                            "test": {
                                                              "type": "UnaryExpression",
                                                              "operator": "!",
                                                              "argument": {
                                                                "type": "Identifier",
                                                                "name": "hasWarnedAboutUsingNestedContextConsumers"
                                                              },
                                                              "prefix": true
                                                            },
                                                            "consequent": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                      "type": "Identifier",
                                                                      "name": "hasWarnedAboutUsingNestedContextConsumers"
                                                                    },
                                                                    "right": {
                                                                      "type": "Literal",
                                                                      "value": "true",
                                                                      "raw": "true"
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "Identifier",
                                                                      "name": "warning$1"
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Literal",
                                                                        "value": "false",
                                                                        "raw": "false"
                                                                      },
                                                                      {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "+",
                                                                        "left": {
                                                                          "type": "Literal",
                                                                          "value": "Rendering <Context.Consumer.Consumer> is not supported and will be removed in ",
                                                                          "raw": "Rendering <Context.Consumer.Consumer> is not supported and will be removed in "
                                                                        },
                                                                        "right": {
                                                                          "type": "Literal",
                                                                          "value": "a future major release. Did you mean to render <Context.Consumer> instead?",
                                                                          "raw": "a future major release. Did you mean to render <Context.Consumer> instead?"
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "alternate": null
                                                          },
                                                          {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                              "type": "StaticMemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "context"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "Consumer"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "generator": false,
                                                      "expression": false,
                                                      "async": false
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 1564,
                                                        "col": 1564,
                                                        "idx": 48222
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 1569,
                                                        "col": 1569,
                                                        "idx": 48466
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "kind": "init",
                                              "method": false,
                                              "shorthand": false,
                                              "span": {
                                                "type": "Span",
                                                "start": {
                                                  "type": "Marker",
                                                  "line": 1563,
                                                  "col": 1563,
                                                  "idx": 48160
                                                },
                                                "end": {
                                                  "type": "Marker",
                                                  "line": 1570,
                                                  "col": 1570,
                                                  "idx": 48472
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "context"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "Consumer"
                                        }
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "Consumer"
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "context"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_currentRenderer"
                                        }
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": null,
                                        "raw": "null"
                                      }
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "context"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_currentRenderer2"
                                        }
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": null,
                                        "raw": "null"
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "context"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "lazy"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "ctor"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "lazyType"
                                    },
                                    "init": {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "$$typeof"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "REACT_LAZY_TYPE"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 1585,
                                              "col": 1585,
                                              "idx": 48774
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 1585,
                                              "col": 1585,
                                              "idx": 48790
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "_ctor"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "ctor"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 1586,
                                              "col": 1586,
                                              "idx": 48802
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 1586,
                                              "col": 1586,
                                              "idx": 48807
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "_status"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "UnaryExpression",
                                            "operator": "-",
                                            "argument": {
                                              "type": "Literal",
                                              "value": 1.0,
                                              "raw": "1"
                                            },
                                            "prefix": true
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 1588,
                                              "col": 1588,
                                              "idx": 48873
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 1588,
                                              "col": 1588,
                                              "idx": 48876
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "_result"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Literal",
                                            "value": null,
                                            "raw": "null"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 1589,
                                              "col": 1589,
                                              "idx": 48890
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 1590,
                                              "col": 1590,
                                              "idx": 48898
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "BindingIdentifier",
                                          "name": "defaultProps"
                                        },
                                        "init": null
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "BindingIdentifier",
                                          "name": "propTypes"
                                        },
                                        "init": null
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "Object"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "defineProperties"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "lazyType"
                                        },
                                        {
                                          "type": "ObjectExpression",
                                          "properties": [
                                            {
                                              "type": "Property",
                                              "key": {
                                                "type": "Identifier",
                                                "name": "defaultProps"
                                              },
                                              "computed": false,
                                              "value": {
                                                "type": "ObjectExpression",
                                                "properties": [
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "configurable"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Literal",
                                                      "value": "true",
                                                      "raw": "true"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 1598,
                                                        "col": 1598,
                                                        "idx": 49090
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 1598,
                                                        "col": 1598,
                                                        "idx": 49095
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "get"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                              "type": "Identifier",
                                                              "name": "defaultProps"
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "generator": false,
                                                      "expression": false,
                                                      "async": false
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 1599,
                                                        "col": 1599,
                                                        "idx": 49108
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 1601,
                                                        "col": 1601,
                                                        "idx": 49163
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "set"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [
                                                        {
                                                          "type": "BindingIdentifier",
                                                          "name": "newDefaultProps"
                                                        }
                                                      ],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "Identifier",
                                                                "name": "warning$1"
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Literal",
                                                                  "value": "false",
                                                                  "raw": "false"
                                                                },
                                                                {
                                                                  "type": "BinaryExpression",
                                                                  "operator": "+",
                                                                  "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "+",
                                                                    "left": {
                                                                      "type": "Literal",
                                                                      "value": "React.lazy(...): It is not supported to assign `defaultProps` to ",
                                                                      "raw": "React.lazy(...): It is not supported to assign `defaultProps` to "
                                                                    },
                                                                    "right": {
                                                                      "type": "Literal",
                                                                      "value": "a lazy component import. Either specify them where the component ",
                                                                      "raw": "a lazy component import. Either specify them where the component "
                                                                    }
                                                                  },
                                                                  "right": {
                                                                    "type": "Literal",
                                                                    "value": "is defined, or create a wrapping component around it.",
                                                                    "raw": "is defined, or create a wrapping component around it."
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "AssignmentExpression",
                                                              "operator": "=",
                                                              "left": {
                                                                "type": "Identifier",
                                                                "name": "defaultProps"
                                                              },
                                                              "right": {
                                                                "type": "Identifier",
                                                                "name": "newDefaultProps"
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "StaticMemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "Object"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "defineProperty"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "lazyType"
                                                                },
                                                                {
                                                                  "type": "Literal",
                                                                  "value": "defaultProps",
                                                                  "raw": "defaultProps"
                                                                },
                                                                {
                                                                  "type": "ObjectExpression",
                                                                  "properties": [
                                                                    {
                                                                      "type": "Property",
                                                                      "key": {
                                                                        "type": "Identifier",
                                                                        "name": "enumerable"
                                                                      },
                                                                      "computed": false,
                                                                      "value": {
                                                                        "type": "Literal",
                                                                        "value": "true",
                                                                        "raw": "true"
                                                                      },
                                                                      "kind": "init",
                                                                      "method": false,
                                                                      "shorthand": false,
                                                                      "span": {
                                                                        "type": "Span",
                                                                        "start": {
                                                                          "type": "Marker",
                                                                          "line": 1607,
                                                                          "col": 1607,
                                                                          "idx": 49600
                                                                        },
                                                                        "end": {
                                                                          "type": "Marker",
                                                                          "line": 1608,
                                                                          "col": 1608,
                                                                          "idx": 49616
                                                                        }
                                                                      }
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "generator": false,
                                                      "expression": false,
                                                      "async": false
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 1606,
                                                        "col": 1606,
                                                        "idx": 49526
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 1610,
                                                        "col": 1610,
                                                        "idx": 49636
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "kind": "init",
                                              "method": false,
                                              "shorthand": false,
                                              "span": {
                                                "type": "Span",
                                                "start": {
                                                  "type": "Marker",
                                                  "line": 1604,
                                                  "col": 1604,
                                                  "idx": 49440
                                                },
                                                "end": {
                                                  "type": "Marker",
                                                  "line": 1610,
                                                  "col": 1610,
                                                  "idx": 49637
                                                }
                                              }
                                            },
                                            {
                                              "type": "Property",
                                              "key": {
                                                "type": "Identifier",
                                                "name": "propTypes"
                                              },
                                              "computed": false,
                                              "value": {
                                                "type": "ObjectExpression",
                                                "properties": [
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "configurable"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Literal",
                                                      "value": "true",
                                                      "raw": "true"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 1612,
                                                        "col": 1612,
                                                        "idx": 49679
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 1612,
                                                        "col": 1612,
                                                        "idx": 49684
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "get"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                              "type": "Identifier",
                                                              "name": "propTypes"
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "generator": false,
                                                      "expression": false,
                                                      "async": false
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 1613,
                                                        "col": 1613,
                                                        "idx": 49697
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 1615,
                                                        "col": 1615,
                                                        "idx": 49749
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "set"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [
                                                        {
                                                          "type": "BindingIdentifier",
                                                          "name": "newPropTypes"
                                                        }
                                                      ],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "Identifier",
                                                                "name": "warning$1"
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Literal",
                                                                  "value": "false",
                                                                  "raw": "false"
                                                                },
                                                                {
                                                                  "type": "BinaryExpression",
                                                                  "operator": "+",
                                                                  "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "+",
                                                                    "left": {
                                                                      "type": "Literal",
                                                                      "value": "React.lazy(...): It is not supported to assign `propTypes` to ",
                                                                      "raw": "React.lazy(...): It is not supported to assign `propTypes` to "
                                                                    },
                                                                    "right": {
                                                                      "type": "Literal",
                                                                      "value": "a lazy component import. Either specify them where the component ",
                                                                      "raw": "a lazy component import. Either specify them where the component "
                                                                    }
                                                                  },
                                                                  "right": {
                                                                    "type": "Literal",
                                                                    "value": "is defined, or create a wrapping component around it.",
                                                                    "raw": "is defined, or create a wrapping component around it."
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "AssignmentExpression",
                                                              "operator": "=",
                                                              "left": {
                                                                "type": "Identifier",
                                                                "name": "propTypes"
                                                              },
                                                              "right": {
                                                                "type": "Identifier",
                                                                "name": "newPropTypes"
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "StaticMemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "Object"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "defineProperty"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "lazyType"
                                                                },
                                                                {
                                                                  "type": "Literal",
                                                                  "value": "propTypes",
                                                                  "raw": "propTypes"
                                                                },
                                                                {
                                                                  "type": "ObjectExpression",
                                                                  "properties": [
                                                                    {
                                                                      "type": "Property",
                                                                      "key": {
                                                                        "type": "Identifier",
                                                                        "name": "enumerable"
                                                                      },
                                                                      "computed": false,
                                                                      "value": {
                                                                        "type": "Literal",
                                                                        "value": "true",
                                                                        "raw": "true"
                                                                      },
                                                                      "kind": "init",
                                                                      "method": false,
                                                                      "shorthand": false,
                                                                      "span": {
                                                                        "type": "Span",
                                                                        "start": {
                                                                          "type": "Marker",
                                                                          "line": 1621,
                                                                          "col": 1621,
                                                                          "idx": 50171
                                                                        },
                                                                        "end": {
                                                                          "type": "Marker",
                                                                          "line": 1622,
                                                                          "col": 1622,
                                                                          "idx": 50187
                                                                        }
                                                                      }
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "generator": false,
                                                      "expression": false,
                                                      "async": false
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 1620,
                                                        "col": 1620,
                                                        "idx": 50100
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 1624,
                                                        "col": 1624,
                                                        "idx": 50207
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "kind": "init",
                                              "method": false,
                                              "shorthand": false,
                                              "span": {
                                                "type": "Span",
                                                "start": {
                                                  "type": "Marker",
                                                  "line": 1618,
                                                  "col": 1618,
                                                  "idx": 50020
                                                },
                                                "end": {
                                                  "type": "Marker",
                                                  "line": 1625,
                                                  "col": 1625,
                                                  "idx": 50213
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "lazyType"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "forwardRef"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "render"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "&&",
                                      "left": {
                                        "type": "BinaryExpression",
                                        "operator": "!=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "render"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "right": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "render"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "$$typeof"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "REACT_MEMO_TYPE"
                                        }
                                      }
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "warningWithoutStack$1"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "false",
                                                "raw": "false"
                                              },
                                              {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "Literal",
                                                    "value": "forwardRef requires a render function but received a `memo` ",
                                                    "raw": "forwardRef requires a render function but received a `memo` "
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "component. Instead of forwardRef(memo(...)), use ",
                                                    "raw": "component. Instead of forwardRef(memo(...)), use "
                                                  }
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "memo(forwardRef(...)).",
                                                  "raw": "memo(forwardRef(...))."
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "UnaryExpression",
                                          "operator": "typeof",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "render"
                                          },
                                          "prefix": true
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "function",
                                          "raw": "function"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "warningWithoutStack$1"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "false",
                                                  "raw": "false"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": "forwardRef requires a render function but was given %s.",
                                                  "raw": "forwardRef requires a render function but was given %s."
                                                },
                                                {
                                                  "type": "ConditionalExpression",
                                                  "test": {
                                                    "type": "BinaryExpression",
                                                    "operator": "===",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "render"
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": null,
                                                      "raw": "null"
                                                    }
                                                  },
                                                  "consequent": {
                                                    "type": "Literal",
                                                    "value": "null",
                                                    "raw": "null"
                                                  },
                                                  "alternate": {
                                                    "type": "UnaryExpression",
                                                    "operator": "typeof",
                                                    "argument": {
                                                      "type": "Identifier",
                                                      "name": "render"
                                                    },
                                                    "prefix": true
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "ConditionalExpression",
                                              "test": {
                                                "type": "UnaryExpression",
                                                "operator": "!",
                                                "argument": {
                                                  "type": "SequenceExpression",
                                                  "expressions": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "||",
                                                      "left": {
                                                        "type": "BinaryExpression",
                                                        "operator": "===",
                                                        "left": {
                                                          "type": "StaticMemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "render"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "length"
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": 0.0,
                                                          "raw": "0"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "BinaryExpression",
                                                        "operator": "===",
                                                        "left": {
                                                          "type": "StaticMemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "render"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "length"
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": 2.0,
                                                          "raw": "2"
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "prefix": true
                                              },
                                              "consequent": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "warningWithoutStack$1"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Literal",
                                                    "value": "false",
                                                    "raw": "false"
                                                  },
                                                  {
                                                    "type": "Literal",
                                                    "value": "forwardRef render functions accept exactly two parameters: props and ref. %s",
                                                    "raw": "forwardRef render functions accept exactly two parameters: props and ref. %s"
                                                  },
                                                  {
                                                    "type": "ConditionalExpression",
                                                    "test": {
                                                      "type": "BinaryExpression",
                                                      "operator": "===",
                                                      "left": {
                                                        "type": "StaticMemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "render"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "length"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": 1.0,
                                                        "raw": "1"
                                                      }
                                                    },
                                                    "consequent": {
                                                      "type": "Literal",
                                                      "value": "Did you forget to use the ref parameter?",
                                                      "raw": "Did you forget to use the ref parameter?"
                                                    },
                                                    "alternate": {
                                                      "type": "Literal",
                                                      "value": "Any additional parameter will be undefined.",
                                                      "raw": "Any additional parameter will be undefined."
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": {
                                                "type": "UnaryExpression",
                                                "operator": "void",
                                                "argument": {
                                                  "type": "Literal",
                                                  "value": 0.0,
                                                  "raw": "0"
                                                },
                                                "prefix": true
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "!=",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "render"
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": null,
                                        "raw": "null"
                                      }
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "ConditionalExpression",
                                            "test": {
                                              "type": "UnaryExpression",
                                              "operator": "!",
                                              "argument": {
                                                "type": "SequenceExpression",
                                                "expressions": [
                                                  {
                                                    "type": "BinaryExpression",
                                                    "operator": "&&",
                                                    "left": {
                                                      "type": "BinaryExpression",
                                                      "operator": "==",
                                                      "left": {
                                                        "type": "StaticMemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "render"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "defaultProps"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": null,
                                                        "raw": "null"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "BinaryExpression",
                                                      "operator": "==",
                                                      "left": {
                                                        "type": "StaticMemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "render"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "propTypes"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": null,
                                                        "raw": "null"
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "prefix": true
                                            },
                                            "consequent": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "warningWithoutStack$1"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "false",
                                                  "raw": "false"
                                                },
                                                {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "Literal",
                                                    "value": "forwardRef render functions do not support propTypes or defaultProps. ",
                                                    "raw": "forwardRef render functions do not support propTypes or defaultProps. "
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "Did you accidentally pass a React component?",
                                                    "raw": "Did you accidentally pass a React component?"
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": {
                                              "type": "UnaryExpression",
                                              "operator": "void",
                                              "argument": {
                                                "type": "Literal",
                                                "value": 0.0,
                                                "raw": "0"
                                              },
                                              "prefix": true
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  }
                                ]
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ObjectExpression",
                                  "properties": [
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "$$typeof"
                                      },
                                      "computed": false,
                                      "value": {
                                        "type": "Identifier",
                                        "name": "REACT_FORWARD_REF_TYPE"
                                      },
                                      "kind": "init",
                                      "method": false,
                                      "shorthand": false,
                                      "span": {
                                        "type": "Span",
                                        "start": {
                                          "type": "Marker",
                                          "line": 1648,
                                          "col": 1648,
                                          "idx": 51402
                                        },
                                        "end": {
                                          "type": "Marker",
                                          "line": 1648,
                                          "col": 1648,
                                          "idx": 51425
                                        }
                                      }
                                    },
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "render"
                                      },
                                      "computed": false,
                                      "value": {
                                        "type": "Identifier",
                                        "name": "render"
                                      },
                                      "kind": "init",
                                      "method": false,
                                      "shorthand": false,
                                      "span": {
                                        "type": "Span",
                                        "start": {
                                          "type": "Marker",
                                          "line": 1649,
                                          "col": 1649,
                                          "idx": 51438
                                        },
                                        "end": {
                                          "type": "Marker",
                                          "line": 1650,
                                          "col": 1650,
                                          "idx": 51448
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "isValidElementType"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "type"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "BinaryExpression",
                                  "operator": "||",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "||",
                                    "left": {
                                      "type": "BinaryExpression",
                                      "operator": "||",
                                      "left": {
                                        "type": "BinaryExpression",
                                        "operator": "||",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "||",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "||",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "||",
                                                "left": {
                                                  "type": "BinaryExpression",
                                                  "operator": "===",
                                                  "left": {
                                                    "type": "UnaryExpression",
                                                    "operator": "typeof",
                                                    "argument": {
                                                      "type": "Identifier",
                                                      "name": "type"
                                                    },
                                                    "prefix": true
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "string",
                                                    "raw": "string"
                                                  }
                                                },
                                                "right": {
                                                  "type": "BinaryExpression",
                                                  "operator": "===",
                                                  "left": {
                                                    "type": "UnaryExpression",
                                                    "operator": "typeof",
                                                    "argument": {
                                                      "type": "Identifier",
                                                      "name": "type"
                                                    },
                                                    "prefix": true
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "function",
                                                    "raw": "function"
                                                  }
                                                }
                                              },
                                              "right": {
                                                "type": "BinaryExpression",
                                                "operator": "===",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "type"
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "REACT_FRAGMENT_TYPE"
                                                }
                                              }
                                            },
                                            "right": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "type"
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "REACT_CONCURRENT_MODE_TYPE"
                                              }
                                            }
                                          },
                                          "right": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "type"
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "REACT_PROFILER_TYPE"
                                            }
                                          }
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": "===",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "type"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "REACT_STRICT_MODE_TYPE"
                                          }
                                        }
                                      },
                                      "right": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "type"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "REACT_SUSPENSE_TYPE"
                                        }
                                      }
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "type"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "REACT_SUSPENSE_LIST_TYPE"
                                      }
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "BinaryExpression",
                                      "operator": "&&",
                                      "left": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                          "type": "UnaryExpression",
                                          "operator": "typeof",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "type"
                                          },
                                          "prefix": true
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "object",
                                          "raw": "object"
                                        }
                                      },
                                      "right": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "type"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      }
                                    },
                                    "right": {
                                      "type": "SequenceExpression",
                                      "expressions": [
                                        {
                                          "type": "BinaryExpression",
                                          "operator": "||",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "||",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "||",
                                                "left": {
                                                  "type": "BinaryExpression",
                                                  "operator": "||",
                                                  "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "||",
                                                    "left": {
                                                      "type": "BinaryExpression",
                                                      "operator": "||",
                                                      "left": {
                                                        "type": "BinaryExpression",
                                                        "operator": "===",
                                                        "left": {
                                                          "type": "StaticMemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "type"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "$$typeof"
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "REACT_LAZY_TYPE"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "BinaryExpression",
                                                        "operator": "===",
                                                        "left": {
                                                          "type": "StaticMemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "type"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "$$typeof"
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "REACT_MEMO_TYPE"
                                                        }
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "BinaryExpression",
                                                      "operator": "===",
                                                      "left": {
                                                        "type": "StaticMemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "type"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "$$typeof"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Identifier",
                                                        "name": "REACT_PROVIDER_TYPE"
                                                      }
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "BinaryExpression",
                                                    "operator": "===",
                                                    "left": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "type"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "$$typeof"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "REACT_CONTEXT_TYPE"
                                                    }
                                                  }
                                                },
                                                "right": {
                                                  "type": "BinaryExpression",
                                                  "operator": "===",
                                                  "left": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "type"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "$$typeof"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "REACT_FORWARD_REF_TYPE"
                                                  }
                                                }
                                              },
                                              "right": {
                                                "type": "BinaryExpression",
                                                "operator": "===",
                                                "left": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "type"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "$$typeof"
                                                  }
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "REACT_FUNDAMENTAL_TYPE"
                                                }
                                              }
                                            },
                                            "right": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "type"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "$$typeof"
                                                }
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "REACT_RESPONDER_TYPE"
                                              }
                                            }
                                          },
                                          "right": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "type"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "$$typeof"
                                              }
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "REACT_SCOPE_TYPE"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "memo"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "type"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "compare"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "isValidElementType"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "type"
                                          }
                                        ]
                                      },
                                      "prefix": true
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "warningWithoutStack$1"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "false",
                                                "raw": "false"
                                              },
                                              {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "Literal",
                                                  "value": "memo: The first argument must be a component. Instead ",
                                                  "raw": "memo: The first argument must be a component. Instead "
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "received: %s",
                                                  "raw": "received: %s"
                                                }
                                              },
                                              {
                                                "type": "ConditionalExpression",
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": "===",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "type"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": null,
                                                    "raw": "null"
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "Literal",
                                                  "value": "null",
                                                  "raw": "null"
                                                },
                                                "alternate": {
                                                  "type": "UnaryExpression",
                                                  "operator": "typeof",
                                                  "argument": {
                                                    "type": "Identifier",
                                                    "name": "type"
                                                  },
                                                  "prefix": true
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  }
                                ]
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ObjectExpression",
                                  "properties": [
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "$$typeof"
                                      },
                                      "computed": false,
                                      "value": {
                                        "type": "Identifier",
                                        "name": "REACT_MEMO_TYPE"
                                      },
                                      "kind": "init",
                                      "method": false,
                                      "shorthand": false,
                                      "span": {
                                        "type": "Span",
                                        "start": {
                                          "type": "Marker",
                                          "line": 1666,
                                          "col": 1666,
                                          "idx": 52474
                                        },
                                        "end": {
                                          "type": "Marker",
                                          "line": 1666,
                                          "col": 1666,
                                          "idx": 52490
                                        }
                                      }
                                    },
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "type"
                                      },
                                      "computed": false,
                                      "value": {
                                        "type": "Identifier",
                                        "name": "type"
                                      },
                                      "kind": "init",
                                      "method": false,
                                      "shorthand": false,
                                      "span": {
                                        "type": "Span",
                                        "start": {
                                          "type": "Marker",
                                          "line": 1667,
                                          "col": 1667,
                                          "idx": 52501
                                        },
                                        "end": {
                                          "type": "Marker",
                                          "line": 1667,
                                          "col": 1667,
                                          "idx": 52506
                                        }
                                      }
                                    },
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "compare"
                                      },
                                      "computed": false,
                                      "value": {
                                        "type": "ConditionalExpression",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "===",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "compare"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "undefined"
                                          }
                                        },
                                        "consequent": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        },
                                        "alternate": {
                                          "type": "Identifier",
                                          "name": "compare"
                                        }
                                      },
                                      "kind": "init",
                                      "method": false,
                                      "shorthand": false,
                                      "span": {
                                        "type": "Span",
                                        "start": {
                                          "type": "Marker",
                                          "line": 1668,
                                          "col": 1668,
                                          "idx": 52544
                                        },
                                        "end": {
                                          "type": "Marker",
                                          "line": 1669,
                                          "col": 1669,
                                          "idx": 52562
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "resolveDispatcher"
                          },
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "dispatcher"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "ReactCurrentDispatcher"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "current"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "SequenceExpression",
                                    "expressions": [
                                      {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "dispatcher"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      }
                                    ]
                                  },
                                  "prefix": true
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ThrowStatement",
                                          "argument": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "Error"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.",
                                                "raw": "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem."
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "dispatcher"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "useContext"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "Context"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "unstable_observedBits"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "dispatcher"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "resolveDispatcher"
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "ConditionalExpression",
                                      "test": {
                                        "type": "UnaryExpression",
                                        "operator": "!",
                                        "argument": {
                                          "type": "SequenceExpression",
                                          "expressions": [
                                            {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "unstable_observedBits"
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "undefined"
                                              }
                                            }
                                          ]
                                        },
                                        "prefix": true
                                      },
                                      "consequent": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "warning$1"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "false",
                                            "raw": "false"
                                          },
                                          {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Literal",
                                                "value": "useContext() second argument is reserved for future ",
                                                "raw": "useContext() second argument is reserved for future "
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "use in React. Passing it is not supported. ",
                                                "raw": "use in React. Passing it is not supported. "
                                              }
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": "You passed: %s.%s",
                                              "raw": "You passed: %s.%s"
                                            }
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "unstable_observedBits"
                                          },
                                          {
                                            "type": "ConditionalExpression",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "&&",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "===",
                                                "left": {
                                                  "type": "UnaryExpression",
                                                  "operator": "typeof",
                                                  "argument": {
                                                    "type": "Identifier",
                                                    "name": "unstable_observedBits"
                                                  },
                                                  "prefix": true
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "number",
                                                  "raw": "number"
                                                }
                                              },
                                              "right": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "Array"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "isArray"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "ComputedMemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "arguments"
                                                    },
                                                    "property": {
                                                      "type": "Literal",
                                                      "value": 2.0,
                                                      "raw": "2"
                                                    }
                                                  }
                                                ]
                                              }
                                            },
                                            "consequent": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "Literal",
                                                  "value": "\n\nDid you call array.map(useContext)? ",
                                                  "raw": "\n\nDid you call array.map(useContext)? "
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "Calling Hooks inside a loop is not supported. ",
                                                  "raw": "Calling Hooks inside a loop is not supported. "
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "Learn more at https://fb.me/rules-of-hooks",
                                                "raw": "Learn more at https://fb.me/rules-of-hooks"
                                              }
                                            },
                                            "alternate": {
                                              "type": "Literal",
                                              "value": "",
                                              "raw": ""
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "UnaryExpression",
                                        "operator": "void",
                                        "argument": {
                                          "type": "Literal",
                                          "value": 0.0,
                                          "raw": "0"
                                        },
                                        "prefix": true
                                      }
                                    }
                                  },
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "!==",
                                      "left": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "Context"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_context"
                                        }
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "undefined"
                                      }
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "BindingIdentifier",
                                                "name": "realContext"
                                              },
                                              "init": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "Context"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "_context"
                                                }
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "realContext"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "Consumer"
                                              }
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "Context"
                                            }
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "warning$1"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Literal",
                                                      "value": "false",
                                                      "raw": "false"
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "+",
                                                      "left": {
                                                        "type": "Literal",
                                                        "value": "Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ",
                                                        "raw": "Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be "
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": "removed in a future major release. Did you mean to call useContext(Context) instead?",
                                                        "raw": "removed in a future major release. Did you mean to call useContext(Context) instead?"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "realContext"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "Provider"
                                                }
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "Context"
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "warning$1"
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Literal",
                                                        "value": "false",
                                                        "raw": "false"
                                                      },
                                                      {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                          "type": "Literal",
                                                          "value": "Calling useContext(Context.Provider) is not supported. ",
                                                          "raw": "Calling useContext(Context.Provider) is not supported. "
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": "Did you mean to call useContext(Context) instead?",
                                                          "raw": "Did you mean to call useContext(Context) instead?"
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  }
                                ]
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "dispatcher"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useContext"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "Context"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "unstable_observedBits"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "useState"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "initialState"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "dispatcher"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "resolveDispatcher"
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "dispatcher"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useState"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "initialState"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "useReducer"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "reducer"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "initialArg"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "init"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "dispatcher"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "resolveDispatcher"
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "dispatcher"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useReducer"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "reducer"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "initialArg"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "init"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "useRef"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "initialValue"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "dispatcher"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "resolveDispatcher"
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "dispatcher"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useRef"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "initialValue"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "useEffect"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "create"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "inputs"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "dispatcher"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "resolveDispatcher"
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "dispatcher"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useEffect"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "create"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "inputs"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "useLayoutEffect"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "create"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "inputs"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "dispatcher"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "resolveDispatcher"
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "dispatcher"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useLayoutEffect"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "create"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "inputs"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "useCallback"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "callback"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "inputs"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "dispatcher"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "resolveDispatcher"
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "dispatcher"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useCallback"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "callback"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "inputs"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "useMemo"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "create"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "inputs"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "dispatcher"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "resolveDispatcher"
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "dispatcher"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useMemo"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "create"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "inputs"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "useImperativeHandle"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "ref"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "create"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "inputs"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "dispatcher"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "resolveDispatcher"
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "dispatcher"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useImperativeHandle"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "ref"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "create"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "inputs"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "useDebugValue"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "value"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "formatterFn"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "BindingIdentifier",
                                          "name": "dispatcher"
                                        },
                                        "init": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "resolveDispatcher"
                                          },
                                          "arguments": []
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "dispatcher"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "useDebugValue"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "value"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "formatterFn"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "emptyObject$1"
                              },
                              "init": {
                                "type": "ObjectExpression",
                                "properties": []
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "useResponder"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "responder"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "listenerProps"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "dispatcher"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "resolveDispatcher"
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "||",
                                      "left": {
                                        "type": "BinaryExpression",
                                        "operator": "==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "responder"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "right": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "responder"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "$$typeof"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "REACT_RESPONDER_TYPE"
                                        }
                                      }
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "warning$1"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "false",
                                                "raw": "false"
                                              },
                                              {
                                                "type": "Literal",
                                                "value": "useResponder: invalid first argument. Expected an event responder, but instead got %s",
                                                "raw": "useResponder: invalid first argument. Expected an event responder, but instead got %s"
                                              },
                                              {
                                                "type": "Identifier",
                                                "name": "responder"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "ReturnStatement",
                                          "argument": null
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  }
                                ]
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "dispatcher"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useResponder"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "responder"
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "operator": "||",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "listenerProps"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "emptyObject$1"
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "useTransition"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "config"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "dispatcher"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "resolveDispatcher"
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "dispatcher"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useTransition"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "config"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "useDeferredValue"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "value"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "config"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "dispatcher"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "resolveDispatcher"
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "dispatcher"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useDeferredValue"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "value"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "config"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "withSuspenseConfig"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "scope"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "config"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "previousConfig"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "ReactCurrentBatchConfig"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "suspense"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "ReactCurrentBatchConfig"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "suspense"
                                    }
                                  },
                                  "right": {
                                    "type": "ConditionalExpression",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "config"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "undefined"
                                      }
                                    },
                                    "consequent": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    },
                                    "alternate": {
                                      "type": "Identifier",
                                      "name": "config"
                                    }
                                  }
                                }
                              },
                              {
                                "type": "TryStatement",
                                "block": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "scope"
                                        },
                                        "arguments": []
                                      }
                                    }
                                  ]
                                },
                                "handler": null,
                                "finalizer": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "ReactCurrentBatchConfig"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "suspense"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "previousConfig"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "ReactPropTypesSecret$1"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED",
                                "raw": "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "ReactPropTypesSecret_1"
                              },
                              "init": {
                                "type": "Identifier",
                                "name": "ReactPropTypesSecret$1"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "printWarning$1"
                              },
                              "init": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": []
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "BindingIdentifier",
                                    "name": "ReactPropTypesSecret"
                                  },
                                  "init": {
                                    "type": "Identifier",
                                    "name": "ReactPropTypesSecret_1"
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "BindingIdentifier",
                                    "name": "loggedTypeFailures"
                                  },
                                  "init": {
                                    "type": "ObjectExpression",
                                    "properties": []
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "BindingIdentifier",
                                    "name": "has"
                                  },
                                  "init": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "Function"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "call"
                                        }
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "bind"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "Object"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "prototype"
                                          }
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "hasOwnProperty"
                                        }
                                      }
                                    ]
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "printWarning$1"
                                },
                                "right": {
                                  "type": "FunctionExpression",
                                  "id": null,
                                  "params": [
                                    {
                                      "type": "BindingIdentifier",
                                      "name": "text"
                                    }
                                  ],
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "BindingIdentifier",
                                              "name": "message"
                                            },
                                            "init": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Literal",
                                                "value": "Warning: ",
                                                "raw": "Warning: "
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "text"
                                              }
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "!==",
                                          "left": {
                                            "type": "UnaryExpression",
                                            "operator": "typeof",
                                            "argument": {
                                              "type": "Identifier",
                                              "name": "console"
                                            },
                                            "prefix": true
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": "undefined",
                                            "raw": "undefined"
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "console"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "error"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "message"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "TryStatement",
                                        "block": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ThrowStatement",
                                              "argument": {
                                                "type": "NewExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "Error"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "message"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "handler": {
                                          "type": "CatchClause",
                                          "param": {
                                            "type": "BindingIdentifier",
                                            "name": "x"
                                          },
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": []
                                          }
                                        },
                                        "finalizer": null
                                      }
                                    ]
                                  },
                                  "generator": false,
                                  "expression": false,
                                  "async": false
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "checkPropTypes"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "typeSpecs"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "values"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "location"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "componentName"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "getStack"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ForInStatement",
                                    "left": {
                                      "type": "BindingIdentifier",
                                      "name": "typeSpecName"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "typeSpecs"
                                    },
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "has"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "typeSpecs"
                                              },
                                              {
                                                "type": "Identifier",
                                                "name": "typeSpecName"
                                              }
                                            ]
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "BindingIdentifier",
                                                      "name": "error"
                                                    },
                                                    "init": null
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "TryStatement",
                                                "block": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "!==",
                                                        "left": {
                                                          "type": "UnaryExpression",
                                                          "operator": "typeof",
                                                          "argument": {
                                                            "type": "ComputedMemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "typeSpecs"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "typeSpecName"
                                                            }
                                                          },
                                                          "prefix": true
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": "function",
                                                          "raw": "function"
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "VariableDeclaration",
                                                            "declarations": [
                                                              {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                  "type": "BindingIdentifier",
                                                                  "name": "err"
                                                                },
                                                                "init": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "Identifier",
                                                                    "name": "Error"
                                                                  },
                                                                  "arguments": [
                                                                    {
                                                                      "type": "BinaryExpression",
                                                                      "operator": "+",
                                                                      "left": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "+",
                                                                        "left": {
                                                                          "type": "BinaryExpression",
                                                                          "operator": "+",
                                                                          "left": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "+",
                                                                            "left": {
                                                                              "type": "BinaryExpression",
                                                                              "operator": "+",
                                                                              "left": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                  "type": "BinaryExpression",
                                                                                  "operator": "+",
                                                                                  "left": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                      "type": "SequenceExpression",
                                                                                      "expressions": [
                                                                                        {
                                                                                          "type": "BinaryExpression",
                                                                                          "operator": "||",
                                                                                          "left": {
                                                                                            "type": "Identifier",
                                                                                            "name": "componentName"
                                                                                          },
                                                                                          "right": {
                                                                                            "type": "Literal",
                                                                                            "value": "React class",
                                                                                            "raw": "React class"
                                                                                          }
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    "right": {
                                                                                      "type": "Literal",
                                                                                      "value": ": ",
                                                                                      "raw": ": "
                                                                                    }
                                                                                  },
                                                                                  "right": {
                                                                                    "type": "Identifier",
                                                                                    "name": "location"
                                                                                  }
                                                                                },
                                                                                "right": {
                                                                                  "type": "Literal",
                                                                                  "value": " type `",
                                                                                  "raw": " type `"
                                                                                }
                                                                              },
                                                                              "right": {
                                                                                "type": "Identifier",
                                                                                "name": "typeSpecName"
                                                                              }
                                                                            },
                                                                            "right": {
                                                                              "type": "Literal",
                                                                              "value": "` is invalid; ",
                                                                              "raw": "` is invalid; "
                                                                            }
                                                                          },
                                                                          "right": {
                                                                            "type": "Literal",
                                                                            "value": "it must be a function, usually from the `prop-types` package, but received `",
                                                                            "raw": "it must be a function, usually from the `prop-types` package, but received `"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "UnaryExpression",
                                                                          "operator": "typeof",
                                                                          "argument": {
                                                                            "type": "ComputedMemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "typeSpecs"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "typeSpecName"
                                                                            }
                                                                          },
                                                                          "prefix": true
                                                                        }
                                                                      },
                                                                      "right": {
                                                                        "type": "Literal",
                                                                        "value": "`.",
                                                                        "raw": "`."
                                                                      }
                                                                    }
                                                                  ]
                                                                }
                                                              }
                                                            ],
                                                            "kind": "var"
                                                          },
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "AssignmentExpression",
                                                              "operator": "=",
                                                              "left": {
                                                                "type": "StaticMemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "err"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "name"
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "Literal",
                                                                "value": "Invariant Violation",
                                                                "raw": "Invariant Violation"
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "type": "ThrowStatement",
                                                            "argument": {
                                                              "type": "Identifier",
                                                              "name": "err"
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "alternate": null
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "error"
                                                        },
                                                        "right": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "ComputedMemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "typeSpecs"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "typeSpecName"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "values"
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "name": "typeSpecName"
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "name": "componentName"
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "name": "location"
                                                            },
                                                            {
                                                              "type": "Literal",
                                                              "value": null,
                                                              "raw": "null"
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "name": "ReactPropTypesSecret"
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "handler": {
                                                  "type": "CatchClause",
                                                  "param": {
                                                    "type": "BindingIdentifier",
                                                    "name": "ex"
                                                  },
                                                  "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "AssignmentExpression",
                                                          "operator": "=",
                                                          "left": {
                                                            "type": "Identifier",
                                                            "name": "error"
                                                          },
                                                          "right": {
                                                            "type": "Identifier",
                                                            "name": "ex"
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  }
                                                },
                                                "finalizer": null
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": "&&",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "error"
                                                  },
                                                  "right": {
                                                    "type": "UnaryExpression",
                                                    "operator": "!",
                                                    "argument": {
                                                      "type": "SequenceExpression",
                                                      "expressions": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "operator": "instanceof",
                                                          "left": {
                                                            "type": "Identifier",
                                                            "name": "error"
                                                          },
                                                          "right": {
                                                            "type": "Identifier",
                                                            "name": "Error"
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "prefix": true
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "printWarning$1"
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                              "type": "BinaryExpression",
                                                              "operator": "+",
                                                              "left": {
                                                                "type": "BinaryExpression",
                                                                "operator": "+",
                                                                "left": {
                                                                  "type": "BinaryExpression",
                                                                  "operator": "+",
                                                                  "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "+",
                                                                    "left": {
                                                                      "type": "BinaryExpression",
                                                                      "operator": "+",
                                                                      "left": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "+",
                                                                        "left": {
                                                                          "type": "BinaryExpression",
                                                                          "operator": "+",
                                                                          "left": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "+",
                                                                            "left": {
                                                                              "type": "BinaryExpression",
                                                                              "operator": "+",
                                                                              "left": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                  "type": "SequenceExpression",
                                                                                  "expressions": [
                                                                                    {
                                                                                      "type": "BinaryExpression",
                                                                                      "operator": "||",
                                                                                      "left": {
                                                                                        "type": "Identifier",
                                                                                        "name": "componentName"
                                                                                      },
                                                                                      "right": {
                                                                                        "type": "Literal",
                                                                                        "value": "React class",
                                                                                        "raw": "React class"
                                                                                      }
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                "right": {
                                                                                  "type": "Literal",
                                                                                  "value": ": type specification of ",
                                                                                  "raw": ": type specification of "
                                                                                }
                                                                              },
                                                                              "right": {
                                                                                "type": "Identifier",
                                                                                "name": "location"
                                                                              }
                                                                            },
                                                                            "right": {
                                                                              "type": "Literal",
                                                                              "value": " `",
                                                                              "raw": " `"
                                                                            }
                                                                          },
                                                                          "right": {
                                                                            "type": "Identifier",
                                                                            "name": "typeSpecName"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "Literal",
                                                                          "value": "` is invalid; the type checker ",
                                                                          "raw": "` is invalid; the type checker "
                                                                        }
                                                                      },
                                                                      "right": {
                                                                        "type": "Literal",
                                                                        "value": "function must return `null` or an `Error` but returned a ",
                                                                        "raw": "function must return `null` or an `Error` but returned a "
                                                                      }
                                                                    },
                                                                    "right": {
                                                                      "type": "UnaryExpression",
                                                                      "operator": "typeof",
                                                                      "argument": {
                                                                        "type": "Identifier",
                                                                        "name": "error"
                                                                      },
                                                                      "prefix": true
                                                                    }
                                                                  },
                                                                  "right": {
                                                                    "type": "Literal",
                                                                    "value": ". ",
                                                                    "raw": ". "
                                                                  }
                                                                },
                                                                "right": {
                                                                  "type": "Literal",
                                                                  "value": "You may have forgotten to pass an argument to the type checker ",
                                                                  "raw": "You may have forgotten to pass an argument to the type checker "
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "Literal",
                                                                "value": "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ",
                                                                "raw": "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and "
                                                              }
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "shape all require an argument).",
                                                              "raw": "shape all require an argument)."
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": "&&",
                                                  "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "instanceof",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "error"
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "Error"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "UnaryExpression",
                                                    "operator": "!",
                                                    "argument": {
                                                      "type": "SequenceExpression",
                                                      "expressions": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "operator": "in",
                                                          "left": {
                                                            "type": "StaticMemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "error"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "message"
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "Identifier",
                                                            "name": "loggedTypeFailures"
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "prefix": true
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "ComputedMemberExpression",
                                                          "computed": true,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "loggedTypeFailures"
                                                          },
                                                          "property": {
                                                            "type": "StaticMemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "error"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "message"
                                                            }
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": "true",
                                                          "raw": "true"
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "BindingIdentifier",
                                                            "name": "stack"
                                                          },
                                                          "init": {
                                                            "type": "ConditionalExpression",
                                                            "test": {
                                                              "type": "Identifier",
                                                              "name": "getStack"
                                                            },
                                                            "consequent": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "Identifier",
                                                                "name": "getStack"
                                                              },
                                                              "arguments": []
                                                            },
                                                            "alternate": {
                                                              "type": "Literal",
                                                              "value": "",
                                                              "raw": ""
                                                            }
                                                          }
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "printWarning$1"
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                              "type": "BinaryExpression",
                                                              "operator": "+",
                                                              "left": {
                                                                "type": "BinaryExpression",
                                                                "operator": "+",
                                                                "left": {
                                                                  "type": "BinaryExpression",
                                                                  "operator": "+",
                                                                  "left": {
                                                                    "type": "Literal",
                                                                    "value": "Failed ",
                                                                    "raw": "Failed "
                                                                  },
                                                                  "right": {
                                                                    "type": "Identifier",
                                                                    "name": "location"
                                                                  }
                                                                },
                                                                "right": {
                                                                  "type": "Literal",
                                                                  "value": " type: ",
                                                                  "raw": " type: "
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "StaticMemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "error"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "message"
                                                                }
                                                              }
                                                            },
                                                            "right": {
                                                              "type": "SequenceExpression",
                                                              "expressions": [
                                                                {
                                                                  "type": "ConditionalExpression",
                                                                  "test": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "!=",
                                                                    "left": {
                                                                      "type": "Identifier",
                                                                      "name": "stack"
                                                                    },
                                                                    "right": {
                                                                      "type": "Literal",
                                                                      "value": null,
                                                                      "raw": "null"
                                                                    }
                                                                  },
                                                                  "consequent": {
                                                                    "type": "Identifier",
                                                                    "name": "stack"
                                                                  },
                                                                  "alternate": {
                                                                    "type": "Literal",
                                                                    "value": "",
                                                                    "raw": ""
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        }
                                      ]
                                    },
                                    "each": false
                                  }
                                ]
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "StaticMemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "checkPropTypes"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "resetWarningCache"
                              }
                            },
                            "right": {
                              "type": "FunctionExpression",
                              "id": null,
                              "params": [],
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "loggedTypeFailures"
                                          },
                                          "right": {
                                            "type": "ObjectExpression",
                                            "properties": []
                                          }
                                        }
                                      }
                                    ]
                                  }
                                ]
                              },
                              "generator": false,
                              "expression": false,
                              "async": false
                            }
                          }
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "checkPropTypes_1"
                              },
                              "init": {
                                "type": "Identifier",
                                "name": "checkPropTypes"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "propTypesMisspellWarningShown"
                              },
                              "init": null
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "propTypesMisspellWarningShown"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "false",
                                  "raw": "false"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "hasOwnProperty$2"
                              },
                              "init": {
                                "type": "StaticMemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "Object"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "prototype"
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "hasOwnProperty"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "getDeclarationErrorAddendum"
                          },
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "ReactCurrentOwner"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "current"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "name"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "getComponentName"
                                            },
                                            "arguments": [
                                              {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "ReactCurrentOwner"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "current"
                                                  }
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "type"
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "Identifier",
                                        "name": "name"
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ReturnStatement",
                                            "argument": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "Literal",
                                                  "value": "\n\nCheck the render method of `",
                                                  "raw": "\n\nCheck the render method of `"
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "name"
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "`.",
                                                "raw": "`."
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Literal",
                                  "value": "",
                                  "raw": ""
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "getSourceInfoErrorAddendum"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "source"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "!==",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "source"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "undefined"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "fileName"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "source"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "fileName"
                                                }
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "replace"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "RegexLiteral",
                                                "value": ",",
                                                "raw": ",",
                                                "regex": {
                                                  "type": "Regex",
                                                  "pattern": "",
                                                  "flags": []
                                                }
                                              },
                                              {
                                                "type": "Literal",
                                                "value": "",
                                                "raw": ""
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "lineNumber"
                                          },
                                          "init": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "source"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "lineNumber"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Literal",
                                                "value": "\n\nCheck your code at ",
                                                "raw": "\n\nCheck your code at "
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "fileName"
                                              }
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": ":",
                                              "raw": ":"
                                            }
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "lineNumber"
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": ".",
                                          "raw": "."
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Literal",
                                  "value": "",
                                  "raw": ""
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "getSourceInfoErrorAddendumForProps"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "elementProps"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "elementProps"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "elementProps"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "undefined"
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "getSourceInfoErrorAddendum"
                                        },
                                        "arguments": [
                                          {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "elementProps"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "__source"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Literal",
                                  "value": "",
                                  "raw": ""
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "ownerHasKeyUseWarning"
                              },
                              "init": {
                                "type": "ObjectExpression",
                                "properties": []
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "getCurrentComponentErrorInfo"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "parentType"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "info"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "getDeclarationErrorAddendum"
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "info"
                                  },
                                  "prefix": true
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "parentName"
                                          },
                                          "init": {
                                            "type": "ConditionalExpression",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "UnaryExpression",
                                                "operator": "typeof",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "parentType"
                                                },
                                                "prefix": true
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "string",
                                                "raw": "string"
                                              }
                                            },
                                            "consequent": {
                                              "type": "Identifier",
                                              "name": "parentType"
                                            },
                                            "alternate": {
                                              "type": "BinaryExpression",
                                              "operator": "||",
                                              "left": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "parentType"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "displayName"
                                                }
                                              },
                                              "right": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "parentType"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "name"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "Identifier",
                                        "name": "parentName"
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "info"
                                              },
                                              "right": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "Literal",
                                                    "value": "\n\nCheck the top-level render call using <",
                                                    "raw": "\n\nCheck the top-level render call using <"
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "parentName"
                                                  }
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": ">.",
                                                  "raw": ">."
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "info"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "validateExplicitKey"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "element"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "parentType"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "||",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "||",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "element"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_store"
                                        }
                                      },
                                      "prefix": true
                                    },
                                    "right": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "element"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_store"
                                        }
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "validated"
                                      }
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "!=",
                                    "left": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "key"
                                      }
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": null
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "_store"
                                      }
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "validated"
                                    }
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "true",
                                    "raw": "true"
                                  }
                                }
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "currentComponentErrorInfo"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "getCurrentComponentErrorInfo"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "parentType"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "ComputedMemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "ownerHasKeyUseWarning"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "currentComponentErrorInfo"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": null
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "ComputedMemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "ownerHasKeyUseWarning"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "currentComponentErrorInfo"
                                    }
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "true",
                                    "raw": "true"
                                  }
                                }
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "childOwner"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": "",
                                      "raw": ""
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "element"
                                    },
                                    "right": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "_owner"
                                      }
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "_owner"
                                      }
                                    },
                                    "right": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "ReactCurrentOwner"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "current"
                                      }
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "childOwner"
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "Literal",
                                              "value": " It was passed a child from ",
                                              "raw": " It was passed a child from "
                                            },
                                            "right": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "getComponentName"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "element"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "_owner"
                                                    }
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "type"
                                                  }
                                                }
                                              ]
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": ".",
                                            "raw": "."
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "setCurrentlyValidatingElement"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "element"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "warning$1"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": "false",
                                          "raw": "false"
                                        },
                                        {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "Literal",
                                            "value": "Each child in a list should have a unique \"key\" prop.",
                                            "raw": "Each child in a list should have a unique \"key\" prop."
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": "%s%s See https://fb.me/react-warning-keys for more information.",
                                            "raw": "%s%s See https://fb.me/react-warning-keys for more information."
                                          }
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "currentComponentErrorInfo"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "childOwner"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "setCurrentlyValidatingElement"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "validateChildKeys"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "node"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "parentType"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "!==",
                                  "left": {
                                    "type": "UnaryExpression",
                                    "operator": "typeof",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "node"
                                    },
                                    "prefix": true
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "object",
                                    "raw": "object"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": null
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Array"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "isArray"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "node"
                                    }
                                  ]
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ForStatement",
                                      "init": {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "BindingIdentifier",
                                              "name": "i"
                                            },
                                            "init": {
                                              "type": "Literal",
                                              "value": 0.0,
                                              "raw": "0"
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "<",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "i"
                                        },
                                        "right": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "node"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "length"
                                          }
                                        }
                                      },
                                      "update": {
                                        "type": "UpdateExpression",
                                        "operator": "++",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "i"
                                        },
                                        "prefix": false
                                      },
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "BindingIdentifier",
                                                  "name": "child"
                                                },
                                                "init": {
                                                  "type": "ComputedMemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "node"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                  }
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "isValidElement"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "child"
                                                }
                                              ]
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "validateExplicitKey"
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "child"
                                                      },
                                                      {
                                                        "type": "Identifier",
                                                        "name": "parentType"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "isValidElement"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "node"
                                      }
                                    ]
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "node"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "_store"
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "node"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "_store"
                                                    }
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "validated"
                                                  }
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "true",
                                                  "raw": "true"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      }
                                    ]
                                  },
                                  "alternate": {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "node"
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "BindingIdentifier",
                                                "name": "iteratorFn"
                                              },
                                              "init": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "getIteratorFn"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "node"
                                                  }
                                                ]
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "UnaryExpression",
                                              "operator": "typeof",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "iteratorFn"
                                              },
                                              "prefix": true
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": "function",
                                              "raw": "function"
                                            }
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": "!==",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "iteratorFn"
                                                  },
                                                  "right": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "node"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "entries"
                                                    }
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "BindingIdentifier",
                                                            "name": "iterator"
                                                          },
                                                          "init": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "StaticMemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "iteratorFn"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "call"
                                                              }
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "node"
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "BindingIdentifier",
                                                            "name": "step"
                                                          },
                                                          "init": null
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    {
                                                      "type": "WhileStatement",
                                                      "test": {
                                                        "type": "UnaryExpression",
                                                        "operator": "!",
                                                        "argument": {
                                                          "type": "StaticMemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "SequenceExpression",
                                                            "expressions": [
                                                              {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                  "type": "Identifier",
                                                                  "name": "step"
                                                                },
                                                                "right": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "StaticMemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "iterator"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "next"
                                                                    }
                                                                  },
                                                                  "arguments": []
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "done"
                                                          }
                                                        },
                                                        "prefix": true
                                                      },
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "IfStatement",
                                                            "test": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "Identifier",
                                                                "name": "isValidElement"
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "StaticMemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "step"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "value"
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "consequent": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "Identifier",
                                                                      "name": "validateExplicitKey"
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "StaticMemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "step"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "value"
                                                                        }
                                                                      },
                                                                      {
                                                                        "type": "Identifier",
                                                                        "name": "parentType"
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "alternate": null
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  }
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "validatePropTypes"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "element"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "type"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "type"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "||",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "||",
                                    "left": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "type"
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": null,
                                        "raw": "null"
                                      }
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "type"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "undefined"
                                      }
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "typeof",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "type"
                                      },
                                      "prefix": true
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": "string",
                                      "raw": "string"
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": null
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "name"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "getComponentName"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "type"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "propTypes"
                                    },
                                    "init": null
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "UnaryExpression",
                                    "operator": "typeof",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "type"
                                    },
                                    "prefix": true
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "function",
                                    "raw": "function"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "propTypes"
                                        },
                                        "right": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "type"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "propTypes"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "UnaryExpression",
                                        "operator": "typeof",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "type"
                                        },
                                        "prefix": true
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": "object",
                                        "raw": "object"
                                      }
                                    },
                                    "right": {
                                      "type": "SequenceExpression",
                                      "expressions": [
                                        {
                                          "type": "BinaryExpression",
                                          "operator": "||",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "type"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "$$typeof"
                                              }
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "REACT_FORWARD_REF_TYPE"
                                            }
                                          },
                                          "right": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "type"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "$$typeof"
                                              }
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "REACT_MEMO_TYPE"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "propTypes"
                                          },
                                          "right": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "type"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "propTypes"
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": null
                                      }
                                    ]
                                  }
                                }
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "propTypes"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "setCurrentlyValidatingElement"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "element"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "checkPropTypes_1"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "propTypes"
                                          },
                                          {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "element"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "props"
                                            }
                                          },
                                          {
                                            "type": "Literal",
                                            "value": "prop",
                                            "raw": "prop"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "name"
                                          },
                                          {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "ReactDebugCurrentFrame"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "getStackAddendum"
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "setCurrentlyValidatingElement"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": null,
                                            "raw": "null"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "BinaryExpression",
                                      "operator": "!==",
                                      "left": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "type"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "PropTypes"
                                        }
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "undefined"
                                      }
                                    },
                                    "right": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "propTypesMisspellWarningShown"
                                      },
                                      "prefix": true
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "propTypesMisspellWarningShown"
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": "true",
                                            "raw": "true"
                                          }
                                        }
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "warningWithoutStack$1"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Literal",
                                              "value": "false",
                                              "raw": "false"
                                            },
                                            {
                                              "type": "Literal",
                                              "value": "Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",
                                              "raw": "Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?"
                                            },
                                            {
                                              "type": "BinaryExpression",
                                              "operator": "||",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "name"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "Unknown",
                                                "raw": "Unknown"
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                }
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "UnaryExpression",
                                    "operator": "typeof",
                                    "argument": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "type"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "getDefaultProps"
                                      }
                                    },
                                    "prefix": true
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "function",
                                    "raw": "function"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "ConditionalExpression",
                                        "test": {
                                          "type": "UnaryExpression",
                                          "operator": "!",
                                          "argument": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "type"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "getDefaultProps"
                                              }
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "isReactClassApproved"
                                            }
                                          },
                                          "prefix": true
                                        },
                                        "consequent": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "warningWithoutStack$1"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Literal",
                                              "value": "false",
                                              "raw": "false"
                                            },
                                            {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Literal",
                                                "value": "getDefaultProps is only used on classic React.createClass ",
                                                "raw": "getDefaultProps is only used on classic React.createClass "
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "definitions. Use a static property named `defaultProps` instead.",
                                                "raw": "definitions. Use a static property named `defaultProps` instead."
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": {
                                          "type": "UnaryExpression",
                                          "operator": "void",
                                          "argument": {
                                            "type": "Literal",
                                            "value": 0.0,
                                            "raw": "0"
                                          },
                                          "prefix": true
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "validateFragmentProps"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "fragment"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "setCurrentlyValidatingElement"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "fragment"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "keys"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "Object"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "keys"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "fragment"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "props"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ForStatement",
                                "init": {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "BindingIdentifier",
                                        "name": "i"
                                      },
                                      "init": {
                                        "type": "Literal",
                                        "value": 0.0,
                                        "raw": "0"
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "<",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "i"
                                  },
                                  "right": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "keys"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "length"
                                    }
                                  }
                                },
                                "update": {
                                  "type": "UpdateExpression",
                                  "operator": "++",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "i"
                                  },
                                  "prefix": false
                                },
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "key"
                                          },
                                          "init": {
                                            "type": "ComputedMemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "keys"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "i"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "!==",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "key"
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": "children",
                                            "raw": "children"
                                          }
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": "!==",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "key"
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": "key",
                                            "raw": "key"
                                          }
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "warning$1"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "false",
                                                  "raw": "false"
                                                },
                                                {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "Literal",
                                                    "value": "Invalid prop `%s` supplied to `React.Fragment`. ",
                                                    "raw": "Invalid prop `%s` supplied to `React.Fragment`. "
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "React.Fragment can only have `key` and `children` props.",
                                                    "raw": "React.Fragment can only have `key` and `children` props."
                                                  }
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "key"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "BreakStatement",
                                            "label": null
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "!==",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "fragment"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "ref"
                                    }
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "warning$1"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "false",
                                            "raw": "false"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": "Invalid attribute `ref` supplied to `React.Fragment`.",
                                            "raw": "Invalid attribute `ref` supplied to `React.Fragment`."
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "setCurrentlyValidatingElement"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "jsxWithValidation"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "type"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "props"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "key"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "isStaticChildren"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "source"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "self"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "validType"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "isValidElementType"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "type"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "validType"
                                  },
                                  "prefix": true
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "info"
                                          },
                                          "init": {
                                            "type": "Literal",
                                            "value": "",
                                            "raw": ""
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "||",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "===",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "type"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "undefined"
                                          }
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": "&&",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "&&",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "UnaryExpression",
                                                "operator": "typeof",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "type"
                                                },
                                                "prefix": true
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "object",
                                                "raw": "object"
                                              }
                                            },
                                            "right": {
                                              "type": "BinaryExpression",
                                              "operator": "!==",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "type"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": null,
                                                "raw": "null"
                                              }
                                            }
                                          },
                                          "right": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "Object"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "keys"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "type"
                                                  }
                                                ]
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "length"
                                              }
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": 0.0,
                                              "raw": "0"
                                            }
                                          }
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "+=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "info"
                                              },
                                              "right": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "Literal",
                                                  "value": " You likely forgot to export your component from the file ",
                                                  "raw": " You likely forgot to export your component from the file "
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "it's defined in, or you might have mixed up default and named imports.",
                                                  "raw": "it's defined in, or you might have mixed up default and named imports."
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "sourceInfo"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "getSourceInfoErrorAddendum"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "source"
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "Identifier",
                                        "name": "sourceInfo"
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "+=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "info"
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "sourceInfo"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "+=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "info"
                                              },
                                              "right": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "getDeclarationErrorAddendum"
                                                },
                                                "arguments": []
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "typeString"
                                          },
                                          "init": null
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "type"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "typeString"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "null",
                                                "raw": "null"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "Array"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "isArray"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "type"
                                            }
                                          ]
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "typeString"
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "array",
                                                  "raw": "array"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": "&&",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "!==",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "type"
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "undefined"
                                              }
                                            },
                                            "right": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "type"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "$$typeof"
                                                }
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "REACT_ELEMENT_TYPE"
                                              }
                                            }
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "typeString"
                                                  },
                                                  "right": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "BinaryExpression",
                                                      "operator": "+",
                                                      "left": {
                                                        "type": "Literal",
                                                        "value": "<",
                                                        "raw": "<"
                                                      },
                                                      "right": {
                                                        "type": "SequenceExpression",
                                                        "expressions": [
                                                          {
                                                            "type": "BinaryExpression",
                                                            "operator": "||",
                                                            "left": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "Identifier",
                                                                "name": "getComponentName"
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "StaticMemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "type"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "type"
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "Unknown",
                                                              "raw": "Unknown"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": " />",
                                                      "raw": " />"
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "info"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": " Did you accidentally export a JSX literal instead of a component?",
                                                    "raw": " Did you accidentally export a JSX literal instead of a component?"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "typeString"
                                                  },
                                                  "right": {
                                                    "type": "UnaryExpression",
                                                    "operator": "typeof",
                                                    "argument": {
                                                      "type": "Identifier",
                                                      "name": "type"
                                                    },
                                                    "prefix": true
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "warning$1"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "false",
                                            "raw": "false"
                                          },
                                          {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Literal",
                                                "value": "React.jsx: type is invalid -- expected a string (for ",
                                                "raw": "React.jsx: type is invalid -- expected a string (for "
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "built-in components) or a class/function (for composite ",
                                                "raw": "built-in components) or a class/function (for composite "
                                              }
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": "components) but got: %s.%s",
                                              "raw": "components) but got: %s.%s"
                                            }
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "typeString"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "info"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "element"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "jsxDEV"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "type"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "props"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "key"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "source"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "self"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "==",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "element"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "element"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "validType"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "children"
                                          },
                                          "init": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "props"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "children"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "children"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "undefined"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "Identifier",
                                              "name": "isStaticChildren"
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "IfStatement",
                                                  "test": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "Array"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "isArray"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "children"
                                                      }
                                                    ]
                                                  },
                                                  "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ForStatement",
                                                        "init": {
                                                          "type": "VariableDeclaration",
                                                          "declarations": [
                                                            {
                                                              "type": "VariableDeclarator",
                                                              "id": {
                                                                "type": "BindingIdentifier",
                                                                "name": "i"
                                                              },
                                                              "init": {
                                                                "type": "Literal",
                                                                "value": 0.0,
                                                                "raw": "0"
                                                              }
                                                            }
                                                          ],
                                                          "kind": "var"
                                                        },
                                                        "test": {
                                                          "type": "BinaryExpression",
                                                          "operator": "<",
                                                          "left": {
                                                            "type": "Identifier",
                                                            "name": "i"
                                                          },
                                                          "right": {
                                                            "type": "StaticMemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "children"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "length"
                                                            }
                                                          }
                                                        },
                                                        "update": {
                                                          "type": "UpdateExpression",
                                                          "operator": "++",
                                                          "argument": {
                                                            "type": "Identifier",
                                                            "name": "i"
                                                          },
                                                          "prefix": false
                                                        },
                                                        "body": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "Identifier",
                                                                  "name": "validateChildKeys"
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "ComputedMemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "children"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "i"
                                                                    }
                                                                  },
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "type"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "IfStatement",
                                                        "test": {
                                                          "type": "StaticMemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "Object"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "freeze"
                                                          }
                                                        },
                                                        "consequent": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "StaticMemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "Object"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "freeze"
                                                                  }
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "children"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "alternate": null
                                                      }
                                                    ]
                                                  },
                                                  "alternate": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "Identifier",
                                                            "name": "warning$1"
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Literal",
                                                              "value": "false",
                                                              "raw": "false"
                                                            },
                                                            {
                                                              "type": "BinaryExpression",
                                                              "operator": "+",
                                                              "left": {
                                                                "type": "BinaryExpression",
                                                                "operator": "+",
                                                                "left": {
                                                                  "type": "Literal",
                                                                  "value": "React.jsx: Static children should always be an array. ",
                                                                  "raw": "React.jsx: Static children should always be an array. "
                                                                },
                                                                "right": {
                                                                  "type": "Literal",
                                                                  "value": "You are likely explicitly calling React.jsxs or React.jsxDEV. ",
                                                                  "raw": "You are likely explicitly calling React.jsxs or React.jsxDEV. "
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "Literal",
                                                                "value": "Use the Babel transform instead.",
                                                                "raw": "Use the Babel transform instead."
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "validateChildKeys"
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "children"
                                                      },
                                                      {
                                                        "type": "Identifier",
                                                        "name": "type"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "hasOwnProperty$2"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "call"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "props"
                                    },
                                    {
                                      "type": "Literal",
                                      "value": "key",
                                      "raw": "key"
                                    }
                                  ]
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "warning$1"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "false",
                                            "raw": "false"
                                          },
                                          {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Literal",
                                                "value": "React.jsx: Spreading a key to JSX is a deprecated pattern. ",
                                                "raw": "React.jsx: Spreading a key to JSX is a deprecated pattern. "
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "Explicitly pass a key after spreading props in your JSX call. ",
                                                "raw": "Explicitly pass a key after spreading props in your JSX call. "
                                              }
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": "E.g. <ComponentName {...props} key={key} />",
                                              "raw": "E.g. <ComponentName {...props} key={key} />"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "type"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "REACT_FRAGMENT_TYPE"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "validateFragmentProps"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "element"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "validatePropTypes"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "element"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "element"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "jsxWithValidationStatic"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "type"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "props"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "key"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "jsxWithValidation"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "type"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "props"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    {
                                      "type": "Literal",
                                      "value": "true",
                                      "raw": "true"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "jsxWithValidationDynamic"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "type"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "props"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "key"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "jsxWithValidation"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "type"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "props"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    {
                                      "type": "Literal",
                                      "value": "false",
                                      "raw": "false"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "createElementWithValidation"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "type"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "props"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "children"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "validType"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "isValidElementType"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "type"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "validType"
                                  },
                                  "prefix": true
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "info"
                                          },
                                          "init": {
                                            "type": "Literal",
                                            "value": "",
                                            "raw": ""
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "||",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "===",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "type"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "undefined"
                                          }
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": "&&",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "&&",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "UnaryExpression",
                                                "operator": "typeof",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "type"
                                                },
                                                "prefix": true
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "object",
                                                "raw": "object"
                                              }
                                            },
                                            "right": {
                                              "type": "BinaryExpression",
                                              "operator": "!==",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "type"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": null,
                                                "raw": "null"
                                              }
                                            }
                                          },
                                          "right": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "Object"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "keys"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "type"
                                                  }
                                                ]
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "length"
                                              }
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": 0.0,
                                              "raw": "0"
                                            }
                                          }
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "+=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "info"
                                              },
                                              "right": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "Literal",
                                                  "value": " You likely forgot to export your component from the file ",
                                                  "raw": " You likely forgot to export your component from the file "
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "it's defined in, or you might have mixed up default and named imports.",
                                                  "raw": "it's defined in, or you might have mixed up default and named imports."
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "sourceInfo"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "getSourceInfoErrorAddendumForProps"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "props"
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "Identifier",
                                        "name": "sourceInfo"
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "+=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "info"
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "sourceInfo"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "+=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "info"
                                              },
                                              "right": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "getDeclarationErrorAddendum"
                                                },
                                                "arguments": []
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "typeString"
                                          },
                                          "init": null
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "type"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "typeString"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "null",
                                                "raw": "null"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "Array"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "isArray"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "type"
                                            }
                                          ]
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "typeString"
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "array",
                                                  "raw": "array"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": "&&",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "!==",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "type"
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "undefined"
                                              }
                                            },
                                            "right": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "type"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "$$typeof"
                                                }
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "REACT_ELEMENT_TYPE"
                                              }
                                            }
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "typeString"
                                                  },
                                                  "right": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "BinaryExpression",
                                                      "operator": "+",
                                                      "left": {
                                                        "type": "Literal",
                                                        "value": "<",
                                                        "raw": "<"
                                                      },
                                                      "right": {
                                                        "type": "SequenceExpression",
                                                        "expressions": [
                                                          {
                                                            "type": "BinaryExpression",
                                                            "operator": "||",
                                                            "left": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "Identifier",
                                                                "name": "getComponentName"
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "StaticMemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "type"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "type"
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "Unknown",
                                                              "raw": "Unknown"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": " />",
                                                      "raw": " />"
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "info"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": " Did you accidentally export a JSX literal instead of a component?",
                                                    "raw": " Did you accidentally export a JSX literal instead of a component?"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "typeString"
                                                  },
                                                  "right": {
                                                    "type": "UnaryExpression",
                                                    "operator": "typeof",
                                                    "argument": {
                                                      "type": "Identifier",
                                                      "name": "type"
                                                    },
                                                    "prefix": true
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "warning$1"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "false",
                                            "raw": "false"
                                          },
                                          {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Literal",
                                                "value": "React.createElement: type is invalid -- expected a string (for ",
                                                "raw": "React.createElement: type is invalid -- expected a string (for "
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "built-in components) or a class/function (for composite ",
                                                "raw": "built-in components) or a class/function (for composite "
                                              }
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": "components) but got: %s.%s",
                                              "raw": "components) but got: %s.%s"
                                            }
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "typeString"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "info"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "element"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "createElement"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "apply"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "ThisExpression"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "arguments"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "==",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "element"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "element"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "validType"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ForStatement",
                                      "init": {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "BindingIdentifier",
                                              "name": "i"
                                            },
                                            "init": {
                                              "type": "Literal",
                                              "value": 2.0,
                                              "raw": "2"
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "<",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "i"
                                        },
                                        "right": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "arguments"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "length"
                                          }
                                        }
                                      },
                                      "update": {
                                        "type": "UpdateExpression",
                                        "operator": "++",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "i"
                                        },
                                        "prefix": false
                                      },
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "validateChildKeys"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "ComputedMemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "arguments"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                  }
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "type"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "type"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "REACT_FRAGMENT_TYPE"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "validateFragmentProps"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "element"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "validatePropTypes"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "element"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "element"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "createFactoryWithValidation"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "type"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "validatedFactory"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "createElementWithValidation"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "bind"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "type"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "validatedFactory"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "type"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "type"
                                  }
                                }
                              },
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "Object"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "defineProperty"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "validatedFactory"
                                        },
                                        {
                                          "type": "Literal",
                                          "value": "type",
                                          "raw": "type"
                                        },
                                        {
                                          "type": "ObjectExpression",
                                          "properties": [
                                            {
                                              "type": "Property",
                                              "key": {
                                                "type": "Identifier",
                                                "name": "enumerable"
                                              },
                                              "computed": false,
                                              "value": {
                                                "type": "Literal",
                                                "value": "false",
                                                "raw": "false"
                                              },
                                              "kind": "init",
                                              "method": false,
                                              "shorthand": false,
                                              "span": {
                                                "type": "Span",
                                                "start": {
                                                  "type": "Marker",
                                                  "line": 2273,
                                                  "col": 2273,
                                                  "idx": 73248
                                                },
                                                "end": {
                                                  "type": "Marker",
                                                  "line": 2273,
                                                  "col": 2273,
                                                  "idx": 73254
                                                }
                                              }
                                            },
                                            {
                                              "type": "Property",
                                              "key": {
                                                "type": "Identifier",
                                                "name": "get"
                                              },
                                              "computed": false,
                                              "value": {
                                                "type": "FunctionExpression",
                                                "id": null,
                                                "params": [],
                                                "body": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "lowPriorityWarningWithoutStack$1"
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Literal",
                                                            "value": "false",
                                                            "raw": "false"
                                                          },
                                                          {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                              "type": "Literal",
                                                              "value": "Factory.type is deprecated. Access the class directly ",
                                                              "raw": "Factory.type is deprecated. Access the class directly "
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "before passing it to createFactory.",
                                                              "raw": "before passing it to createFactory."
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "StaticMemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "Object"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "defineProperty"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "ThisExpression"
                                                          },
                                                          {
                                                            "type": "Literal",
                                                            "value": "type",
                                                            "raw": "type"
                                                          },
                                                          {
                                                            "type": "ObjectExpression",
                                                            "properties": [
                                                              {
                                                                "type": "Property",
                                                                "key": {
                                                                  "type": "Identifier",
                                                                  "name": "value"
                                                                },
                                                                "computed": false,
                                                                "value": {
                                                                  "type": "Identifier",
                                                                  "name": "type"
                                                                },
                                                                "kind": "init",
                                                                "method": false,
                                                                "shorthand": false,
                                                                "span": {
                                                                  "type": "Span",
                                                                  "start": {
                                                                    "type": "Marker",
                                                                    "line": 2277,
                                                                    "col": 2277,
                                                                    "idx": 73489
                                                                  },
                                                                  "end": {
                                                                    "type": "Marker",
                                                                    "line": 2278,
                                                                    "col": 2278,
                                                                    "idx": 73503
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "type": "ReturnStatement",
                                                      "argument": {
                                                        "type": "Identifier",
                                                        "name": "type"
                                                      }
                                                    }
                                                  ]
                                                },
                                                "generator": false,
                                                "expression": false,
                                                "async": false
                                              },
                                              "kind": "init",
                                              "method": false,
                                              "shorthand": false,
                                              "span": {
                                                "type": "Span",
                                                "start": {
                                                  "type": "Marker",
                                                  "line": 2276,
                                                  "col": 2276,
                                                  "idx": 73434
                                                },
                                                "end": {
                                                  "type": "Marker",
                                                  "line": 2281,
                                                  "col": 2281,
                                                  "idx": 73540
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "validatedFactory"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "cloneElementWithValidation"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "element"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "props"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "children"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "newElement"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "cloneElement"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "apply"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "ThisExpression"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "arguments"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ForStatement",
                                "init": {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "BindingIdentifier",
                                        "name": "i"
                                      },
                                      "init": {
                                        "type": "Literal",
                                        "value": 2.0,
                                        "raw": "2"
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "<",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "i"
                                  },
                                  "right": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "arguments"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "length"
                                    }
                                  }
                                },
                                "update": {
                                  "type": "UpdateExpression",
                                  "operator": "++",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "i"
                                  },
                                  "prefix": false
                                },
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "validateChildKeys"
                                        },
                                        "arguments": [
                                          {
                                            "type": "ComputedMemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "arguments"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "i"
                                            }
                                          },
                                          {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "newElement"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "type"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "validatePropTypes"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "newElement"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "newElement"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "enableSchedulerDebugging"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "false",
                                "raw": "false"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "enableIsInputPending"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "false",
                                "raw": "false"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "enableProfiling"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "true",
                                "raw": "true"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "requestHostCallback"
                              },
                              "init": null
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "requestHostTimeout"
                              },
                              "init": null
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "cancelHostTimeout"
                              },
                              "init": null
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "shouldYieldToHost"
                              },
                              "init": null
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "requestPaint"
                              },
                              "init": null
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "getCurrentTime"
                              },
                              "init": null
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "forceFrameRate"
                              },
                              "init": null
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "IfStatement",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "||",
                            "left": {
                              "type": "BinaryExpression",
                              "operator": "===",
                              "left": {
                                "type": "UnaryExpression",
                                "operator": "typeof",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "window"
                                },
                                "prefix": true
                              },
                              "right": {
                                "type": "Literal",
                                "value": "undefined",
                                "raw": "undefined"
                              }
                            },
                            "right": {
                              "type": "BinaryExpression",
                              "operator": "!==",
                              "left": {
                                "type": "UnaryExpression",
                                "operator": "typeof",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "MessageChannel"
                                },
                                "prefix": true
                              },
                              "right": {
                                "type": "Literal",
                                "value": "function",
                                "raw": "function"
                              }
                            }
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "_callback"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "_timeoutID"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "_flushCallback"
                                    },
                                    "init": {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "!==",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "_callback"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": null,
                                                "raw": "null"
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "TryStatement",
                                                  "block": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                          {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                              "type": "BindingIdentifier",
                                                              "name": "currentTime"
                                                            },
                                                            "init": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "Identifier",
                                                                "name": "getCurrentTime"
                                                              },
                                                              "arguments": []
                                                            }
                                                          }
                                                        ],
                                                        "kind": "var"
                                                      },
                                                      {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                          {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                              "type": "BindingIdentifier",
                                                              "name": "hasRemainingTime"
                                                            },
                                                            "init": {
                                                              "type": "Literal",
                                                              "value": "true",
                                                              "raw": "true"
                                                            }
                                                          }
                                                        ],
                                                        "kind": "var"
                                                      },
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "Identifier",
                                                            "name": "_callback"
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "hasRemainingTime"
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "name": "currentTime"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "AssignmentExpression",
                                                          "operator": "=",
                                                          "left": {
                                                            "type": "Identifier",
                                                            "name": "_callback"
                                                          },
                                                          "right": {
                                                            "type": "Literal",
                                                            "value": null,
                                                            "raw": "null"
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "handler": {
                                                    "type": "CatchClause",
                                                    "param": {
                                                      "type": "BindingIdentifier",
                                                      "name": "e"
                                                    },
                                                    "body": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "Identifier",
                                                              "name": "setTimeout"
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "_flushCallback"
                                                              },
                                                              {
                                                                "type": "Literal",
                                                                "value": 0.0,
                                                                "raw": "0"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        {
                                                          "type": "ThrowStatement",
                                                          "argument": {
                                                            "type": "Identifier",
                                                            "name": "e"
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "finalizer": null
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "initialTime"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "Date"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "now"
                                        }
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "getCurrentTime"
                                  },
                                  "right": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ReturnStatement",
                                          "argument": {
                                            "type": "BinaryExpression",
                                            "operator": "-",
                                            "left": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "Date"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "now"
                                                }
                                              },
                                              "arguments": []
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "initialTime"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "requestHostCallback"
                                  },
                                  "right": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [
                                      {
                                        "type": "BindingIdentifier",
                                        "name": "cb"
                                      }
                                    ],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": "!==",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "_callback"
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": null,
                                              "raw": "null"
                                            }
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "setTimeout"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "requestHostCallback"
                                                    },
                                                    {
                                                      "type": "Literal",
                                                      "value": 0.0,
                                                      "raw": "0"
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "cb"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "_callback"
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "cb"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "setTimeout"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "_flushCallback"
                                                    },
                                                    {
                                                      "type": "Literal",
                                                      "value": 0.0,
                                                      "raw": "0"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "requestHostTimeout"
                                  },
                                  "right": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [
                                      {
                                        "type": "BindingIdentifier",
                                        "name": "cb"
                                      },
                                      {
                                        "type": "BindingIdentifier",
                                        "name": "ms"
                                      }
                                    ],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "_timeoutID"
                                            },
                                            "right": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "setTimeout"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "cb"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "ms"
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "cancelHostTimeout"
                                  },
                                  "right": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "clearTimeout"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "_timeoutID"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "shouldYieldToHost"
                                  },
                                  "right": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ReturnStatement",
                                          "argument": {
                                            "type": "Literal",
                                            "value": "false",
                                            "raw": "false"
                                          }
                                        }
                                      ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "requestPaint"
                                  },
                                  "right": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "forceFrameRate"
                                    },
                                    "right": {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": []
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "alternate": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "performance"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "window"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "performance"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "_Date"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "window"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "Date"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "_setTimeout"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "window"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "setTimeout"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "_clearTimeout"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "window"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "clearTimeout"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "!==",
                                  "left": {
                                    "type": "UnaryExpression",
                                    "operator": "typeof",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "console"
                                    },
                                    "prefix": true
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "undefined",
                                    "raw": "undefined"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "requestAnimationFrame"
                                          },
                                          "init": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "window"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "requestAnimationFrame"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "cancelAnimationFrame"
                                          },
                                          "init": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "window"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "cancelAnimationFrame"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "UnaryExpression",
                                          "operator": "typeof",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "requestAnimationFrame"
                                          },
                                          "prefix": true
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "function",
                                          "raw": "function"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "console"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "error"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "Literal",
                                                      "value": "This browser doesn't support requestAnimationFrame. ",
                                                      "raw": "This browser doesn't support requestAnimationFrame. "
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": "Make sure that you load a ",
                                                      "raw": "Make sure that you load a "
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "polyfill in older browsers. https://fb.me/react-polyfills",
                                                    "raw": "polyfill in older browsers. https://fb.me/react-polyfills"
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "UnaryExpression",
                                          "operator": "typeof",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "cancelAnimationFrame"
                                          },
                                          "prefix": true
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "function",
                                          "raw": "function"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "console"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "error"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "Literal",
                                                      "value": "This browser doesn't support cancelAnimationFrame. ",
                                                      "raw": "This browser doesn't support cancelAnimationFrame. "
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": "Make sure that you load a ",
                                                      "raw": "Make sure that you load a "
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "polyfill in older browsers. https://fb.me/react-polyfills",
                                                    "raw": "polyfill in older browsers. https://fb.me/react-polyfills"
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "typeof",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "performance"
                                      },
                                      "prefix": true
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": "object",
                                      "raw": "object"
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "typeof",
                                      "argument": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "performance"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "now"
                                        }
                                      },
                                      "prefix": true
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": "function",
                                      "raw": "function"
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "getCurrentTime"
                                        },
                                        "right": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "performance"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "now"
                                                    }
                                                  },
                                                  "arguments": []
                                                }
                                              }
                                            ]
                                          },
                                          "generator": false,
                                          "expression": false,
                                          "async": false
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "_initialTime"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "_Date"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "now"
                                              }
                                            },
                                            "arguments": []
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "getCurrentTime"
                                        },
                                        "right": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "BinaryExpression",
                                                  "operator": "-",
                                                  "left": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "_Date"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "now"
                                                      }
                                                    },
                                                    "arguments": []
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "_initialTime"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "generator": false,
                                          "expression": false,
                                          "async": false
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "isMessageLoopRunning"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": "false",
                                      "raw": "false"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "scheduledHostCallback"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "taskTimeoutID"
                                    },
                                    "init": {
                                      "type": "UnaryExpression",
                                      "operator": "-",
                                      "argument": {
                                        "type": "Literal",
                                        "value": 1.0,
                                        "raw": "1"
                                      },
                                      "prefix": true
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "yieldInterval"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": 5.0,
                                      "raw": "5"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "deadline"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": 0.0,
                                      "raw": "0"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "maxYieldInterval"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": 300.0,
                                      "raw": "300"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "needsPaint"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": "false",
                                      "raw": "false"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "BinaryExpression",
                                      "operator": "&&",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "enableIsInputPending"
                                      },
                                      "right": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "navigator"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "undefined"
                                        }
                                      }
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "!==",
                                      "left": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "navigator"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "scheduling"
                                        }
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "undefined"
                                      }
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "navigator"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "scheduling"
                                        }
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "isInputPending"
                                      }
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "undefined"
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "scheduling"
                                          },
                                          "init": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "navigator"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "scheduling"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "shouldYieldToHost"
                                        },
                                        "right": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "BindingIdentifier",
                                                      "name": "currentTime"
                                                    },
                                                    "init": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "Identifier",
                                                        "name": "getCurrentTime"
                                                      },
                                                      "arguments": []
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": ">=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "currentTime"
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "deadline"
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "||",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "needsPaint"
                                                        },
                                                        "right": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "StaticMemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "scheduling"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "isInputPending"
                                                            }
                                                          },
                                                          "arguments": []
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                              "type": "Literal",
                                                              "value": "true",
                                                              "raw": "true"
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "alternate": null
                                                    },
                                                    {
                                                      "type": "ReturnStatement",
                                                      "argument": {
                                                        "type": "BinaryExpression",
                                                        "operator": ">=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "currentTime"
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "maxYieldInterval"
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ReturnStatement",
                                                      "argument": {
                                                        "type": "Literal",
                                                        "value": "false",
                                                        "raw": "false"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "generator": false,
                                          "expression": false,
                                          "async": false
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "requestPaint"
                                        },
                                        "right": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "needsPaint"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "true",
                                                    "raw": "true"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "generator": false,
                                          "expression": false,
                                          "async": false
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "shouldYieldToHost"
                                        },
                                        "right": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "BinaryExpression",
                                                  "operator": ">=",
                                                  "left": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "getCurrentTime"
                                                    },
                                                    "arguments": []
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "deadline"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "generator": false,
                                          "expression": false,
                                          "async": false
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "requestPaint"
                                        },
                                        "right": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": []
                                          },
                                          "generator": false,
                                          "expression": false,
                                          "async": false
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "forceFrameRate"
                                  },
                                  "right": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [
                                      {
                                        "type": "BindingIdentifier",
                                        "name": "fps"
                                      }
                                    ],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "<",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "fps"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": 0.0,
                                                "raw": "0"
                                              }
                                            },
                                            "right": {
                                              "type": "BinaryExpression",
                                              "operator": ">",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "fps"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": 125.0,
                                                "raw": "125"
                                              }
                                            }
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "console"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "error"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "+",
                                                      "left": {
                                                        "type": "Literal",
                                                        "value": "forceFrameRate takes a positive int between 0 and 125, ",
                                                        "raw": "forceFrameRate takes a positive int between 0 and 125, "
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": "forcing framerates higher than 125 fps is not unsupported",
                                                        "raw": "forcing framerates higher than 125 fps is not unsupported"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "ReturnStatement",
                                                "argument": null
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        },
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": ">",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "fps"
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": 0.0,
                                              "raw": "0"
                                            }
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "yieldInterval"
                                                  },
                                                  "right": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "Math"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "floor"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "BinaryExpression",
                                                        "operator": "/",
                                                        "left": {
                                                          "type": "Literal",
                                                          "value": 1000.0,
                                                          "raw": "1000"
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "fps"
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "yieldInterval"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": 5.0,
                                                    "raw": "5"
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                  }
                                }
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "performWorkUntilDeadline"
                                    },
                                    "init": {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "!==",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "scheduledHostCallback"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": null,
                                                "raw": "null"
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "VariableDeclaration",
                                                  "declarations": [
                                                    {
                                                      "type": "VariableDeclarator",
                                                      "id": {
                                                        "type": "BindingIdentifier",
                                                        "name": "currentTime"
                                                      },
                                                      "init": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "getCurrentTime"
                                                        },
                                                        "arguments": []
                                                      }
                                                    }
                                                  ],
                                                  "kind": "var"
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "deadline"
                                                    },
                                                    "right": {
                                                      "type": "BinaryExpression",
                                                      "operator": "+",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "currentTime"
                                                      },
                                                      "right": {
                                                        "type": "Identifier",
                                                        "name": "yieldInterval"
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "VariableDeclaration",
                                                  "declarations": [
                                                    {
                                                      "type": "VariableDeclarator",
                                                      "id": {
                                                        "type": "BindingIdentifier",
                                                        "name": "hasTimeRemaining"
                                                      },
                                                      "init": {
                                                        "type": "Literal",
                                                        "value": "true",
                                                        "raw": "true"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "var"
                                                },
                                                {
                                                  "type": "TryStatement",
                                                  "block": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                          {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                              "type": "BindingIdentifier",
                                                              "name": "hasMoreWork"
                                                            },
                                                            "init": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "Identifier",
                                                                "name": "scheduledHostCallback"
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "hasTimeRemaining"
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "currentTime"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ],
                                                        "kind": "var"
                                                      },
                                                      {
                                                        "type": "IfStatement",
                                                        "test": {
                                                          "type": "UnaryExpression",
                                                          "operator": "!",
                                                          "argument": {
                                                            "type": "Identifier",
                                                            "name": "hasMoreWork"
                                                          },
                                                          "prefix": true
                                                        },
                                                        "consequent": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                  "type": "Identifier",
                                                                  "name": "isMessageLoopRunning"
                                                                },
                                                                "right": {
                                                                  "type": "Literal",
                                                                  "value": "false",
                                                                  "raw": "false"
                                                                }
                                                              }
                                                            },
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                  "type": "Identifier",
                                                                  "name": "scheduledHostCallback"
                                                                },
                                                                "right": {
                                                                  "type": "Literal",
                                                                  "value": null,
                                                                  "raw": "null"
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "alternate": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "StaticMemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "port"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "postMessage"
                                                                  }
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Literal",
                                                                    "value": null,
                                                                    "raw": "null"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "handler": {
                                                    "type": "CatchClause",
                                                    "param": {
                                                      "type": "BindingIdentifier",
                                                      "name": "error"
                                                    },
                                                    "body": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "StaticMemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "port"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "postMessage"
                                                              }
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Literal",
                                                                "value": null,
                                                                "raw": "null"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        {
                                                          "type": "ThrowStatement",
                                                          "argument": {
                                                            "type": "Identifier",
                                                            "name": "error"
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "finalizer": null
                                                }
                                              ]
                                            },
                                            "alternate": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "isMessageLoopRunning"
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": "false",
                                                      "raw": "false"
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "needsPaint"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "false",
                                                "raw": "false"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "channel"
                                    },
                                    "init": {
                                      "type": "NewExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "MessageChannel"
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "port"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "channel"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "port2"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "channel"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "port1"
                                      }
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "onmessage"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "performWorkUntilDeadline"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "requestHostCallback"
                                  },
                                  "right": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [
                                      {
                                        "type": "BindingIdentifier",
                                        "name": "callback"
                                      }
                                    ],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "scheduledHostCallback"
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "callback"
                                            }
                                          }
                                        },
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "UnaryExpression",
                                            "operator": "!",
                                            "argument": {
                                              "type": "Identifier",
                                              "name": "isMessageLoopRunning"
                                            },
                                            "prefix": true
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "isMessageLoopRunning"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "true",
                                                    "raw": "true"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "port"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "postMessage"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Literal",
                                                      "value": null,
                                                      "raw": "null"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        }
                                      ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "requestHostTimeout"
                                  },
                                  "right": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [
                                      {
                                        "type": "BindingIdentifier",
                                        "name": "callback"
                                      },
                                      {
                                        "type": "BindingIdentifier",
                                        "name": "ms"
                                      }
                                    ],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "taskTimeoutID"
                                            },
                                            "right": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "_setTimeout"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "FunctionExpression",
                                                  "id": null,
                                                  "params": [],
                                                  "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "Identifier",
                                                            "name": "callback"
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "Identifier",
                                                                "name": "getCurrentTime"
                                                              },
                                                              "arguments": []
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "generator": false,
                                                  "expression": false,
                                                  "async": false
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "ms"
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "cancelHostTimeout"
                                  },
                                  "right": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "_clearTimeout"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "taskTimeoutID"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "taskTimeoutID"
                                            },
                                            "right": {
                                              "type": "UnaryExpression",
                                              "operator": "-",
                                              "argument": {
                                                "type": "Literal",
                                                "value": 1.0,
                                                "raw": "1"
                                              },
                                              "prefix": true
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                  }
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "push"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "heap"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "node"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "index"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "heap"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "length"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "heap"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "push"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "node"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "siftUp"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "heap"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "node"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "index"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "peek"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "heap"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "first"
                                    },
                                    "init": {
                                      "type": "ComputedMemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "heap"
                                      },
                                      "property": {
                                        "type": "Literal",
                                        "value": 0.0,
                                        "raw": "0"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ConditionalExpression",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "first"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "undefined"
                                    }
                                  },
                                  "consequent": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  },
                                  "alternate": {
                                    "type": "Identifier",
                                    "name": "first"
                                  }
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "pop"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "heap"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "first"
                                    },
                                    "init": {
                                      "type": "ComputedMemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "heap"
                                      },
                                      "property": {
                                        "type": "Literal",
                                        "value": 0.0,
                                        "raw": "0"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "!==",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "first"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "undefined"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "last"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "heap"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "pop"
                                              }
                                            },
                                            "arguments": []
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "last"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "first"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "ComputedMemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "heap"
                                                },
                                                "property": {
                                                  "type": "Literal",
                                                  "value": 0.0,
                                                  "raw": "0"
                                                }
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "last"
                                              }
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "siftDown"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "heap"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "last"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": 0.0,
                                                  "raw": "0"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "first"
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Literal",
                                        "value": null,
                                        "raw": "null"
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "siftUp"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "heap"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "node"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "i"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "index"
                                    },
                                    "init": {
                                      "type": "Identifier",
                                      "name": "i"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "WhileStatement",
                                "test": {
                                  "type": "Literal",
                                  "value": "true",
                                  "raw": "true"
                                },
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "parentIndex"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "Math"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "floor"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "BinaryExpression",
                                                "operator": "/",
                                                "left": {
                                                  "type": "SequenceExpression",
                                                  "expressions": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "-",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "index"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": 1.0,
                                                        "raw": "1"
                                                      }
                                                    }
                                                  ]
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": 2.0,
                                                  "raw": "2"
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "parent"
                                          },
                                          "init": {
                                            "type": "ComputedMemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "heap"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "parentIndex"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "!==",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "parent"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "undefined"
                                          }
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": ">",
                                          "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "compare"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "parent"
                                              },
                                              {
                                                "type": "Identifier",
                                                "name": "node"
                                              }
                                            ]
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": 0.0,
                                            "raw": "0"
                                          }
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "ComputedMemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "heap"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "parentIndex"
                                                }
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "node"
                                              }
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "ComputedMemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "heap"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "index"
                                                }
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "parent"
                                              }
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "index"
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "parentIndex"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ReturnStatement",
                                            "argument": null
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "siftDown"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "heap"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "node"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "i"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "index"
                                    },
                                    "init": {
                                      "type": "Identifier",
                                      "name": "i"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "length"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "heap"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "length"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "WhileStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "<",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "index"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "length"
                                  }
                                },
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "leftIndex"
                                          },
                                          "init": {
                                            "type": "BinaryExpression",
                                            "operator": "-",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "*",
                                              "left": {
                                                "type": "SequenceExpression",
                                                "expressions": [
                                                  {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "index"
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": 1.0,
                                                      "raw": "1"
                                                    }
                                                  }
                                                ]
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": 2.0,
                                                "raw": "2"
                                              }
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": 1.0,
                                              "raw": "1"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "left"
                                          },
                                          "init": {
                                            "type": "ComputedMemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "heap"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "leftIndex"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "rightIndex"
                                          },
                                          "init": {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "leftIndex"
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": 1.0,
                                              "raw": "1"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "right"
                                          },
                                          "init": {
                                            "type": "ComputedMemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "heap"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "rightIndex"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "!==",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "left"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "undefined"
                                          }
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": "<",
                                          "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "compare"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "left"
                                              },
                                              {
                                                "type": "Identifier",
                                                "name": "node"
                                              }
                                            ]
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": 0.0,
                                            "raw": "0"
                                          }
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "&&",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "!==",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "right"
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "undefined"
                                                }
                                              },
                                              "right": {
                                                "type": "BinaryExpression",
                                                "operator": "<",
                                                "left": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "compare"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "right"
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "left"
                                                    }
                                                  ]
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": 0.0,
                                                  "raw": "0"
                                                }
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "ComputedMemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "heap"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "index"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "right"
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "ComputedMemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "heap"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "rightIndex"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "node"
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "index"
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "rightIndex"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "ComputedMemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "heap"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "index"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "left"
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "ComputedMemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "heap"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "leftIndex"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "node"
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "index"
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "leftIndex"
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "&&",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "!==",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "right"
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "undefined"
                                            }
                                          },
                                          "right": {
                                            "type": "BinaryExpression",
                                            "operator": "<",
                                            "left": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "compare"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "right"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "node"
                                                }
                                              ]
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": 0.0,
                                              "raw": "0"
                                            }
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "ComputedMemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "heap"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "index"
                                                  }
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "right"
                                                }
                                              }
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "ComputedMemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "heap"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "rightIndex"
                                                  }
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "node"
                                                }
                                              }
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "index"
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "rightIndex"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": null
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "compare"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "a"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "b"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "diff"
                                    },
                                    "init": {
                                      "type": "BinaryExpression",
                                      "operator": "-",
                                      "left": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "a"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "sortIndex"
                                        }
                                      },
                                      "right": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "b"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "sortIndex"
                                        }
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ConditionalExpression",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "diff"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": 0.0,
                                      "raw": "0"
                                    }
                                  },
                                  "consequent": {
                                    "type": "Identifier",
                                    "name": "diff"
                                  },
                                  "alternate": {
                                    "type": "BinaryExpression",
                                    "operator": "-",
                                    "left": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "a"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "id"
                                      }
                                    },
                                    "right": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "b"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "id"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "NoPriority"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 0.0,
                                "raw": "0"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "ImmediatePriority"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 1.0,
                                "raw": "1"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "UserBlockingPriority"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 2.0,
                                "raw": "2"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "NormalPriority"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 3.0,
                                "raw": "3"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "LowPriority"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 4.0,
                                "raw": "4"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "IdlePriority"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 5.0,
                                "raw": "5"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "runIdCounter"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 0.0,
                                "raw": "0"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "mainThreadIdCounter"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 0.0,
                                "raw": "0"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "profilingStateSize"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 4.0,
                                "raw": "4"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "sharedProfilingBuffer"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "enableProfiling"
                                },
                                "consequent": {
                                  "type": "ConditionalExpression",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "typeof",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "SharedArrayBuffer"
                                      },
                                      "prefix": true
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": "function",
                                      "raw": "function"
                                    }
                                  },
                                  "consequent": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "SharedArrayBuffer"
                                    },
                                    "arguments": [
                                      {
                                        "type": "BinaryExpression",
                                        "operator": "*",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "profilingStateSize"
                                        },
                                        "right": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "Int32Array"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "BYTES_PER_ELEMENT"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": {
                                    "type": "ConditionalExpression",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "UnaryExpression",
                                        "operator": "typeof",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "ArrayBuffer"
                                        },
                                        "prefix": true
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": "function",
                                        "raw": "function"
                                      }
                                    },
                                    "consequent": {
                                      "type": "NewExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "ArrayBuffer"
                                      },
                                      "arguments": [
                                        {
                                          "type": "BinaryExpression",
                                          "operator": "*",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "profilingStateSize"
                                          },
                                          "right": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "Int32Array"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "BYTES_PER_ELEMENT"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": null,
                                  "raw": "null"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "profilingState"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "enableProfiling"
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "sharedProfilingBuffer"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "NewExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "Int32Array"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "sharedProfilingBuffer"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "ArrayExpression",
                                  "elements": []
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "PRIORITY"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 0.0,
                                "raw": "0"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "CURRENT_TASK_ID"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 1.0,
                                "raw": "1"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "CURRENT_RUN_ID"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 2.0,
                                "raw": "2"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "QUEUE_SIZE"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 3.0,
                                "raw": "3"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "IfStatement",
                          "test": {
                            "type": "Identifier",
                            "name": "enableProfiling"
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "ComputedMemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "profilingState"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "PRIORITY"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "NoPriority"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "ComputedMemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "profilingState"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "QUEUE_SIZE"
                                    }
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": 0.0,
                                    "raw": "0"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "ComputedMemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "profilingState"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "CURRENT_TASK_ID"
                                    }
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": 0.0,
                                    "raw": "0"
                                  }
                                }
                              }
                            ]
                          },
                          "alternate": null
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "INITIAL_EVENT_LOG_SIZE"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 131072.0,
                                "raw": "131072"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "MAX_EVENT_LOG_SIZE"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 524288.0,
                                "raw": "524288"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "eventLogSize"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 0.0,
                                "raw": "0"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "eventLogBuffer"
                              },
                              "init": {
                                "type": "Literal",
                                "value": null,
                                "raw": "null"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "eventLog"
                              },
                              "init": {
                                "type": "Literal",
                                "value": null,
                                "raw": "null"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "eventLogIndex"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 0.0,
                                "raw": "0"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "TaskStartEvent"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 1.0,
                                "raw": "1"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "TaskCompleteEvent"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 2.0,
                                "raw": "2"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "TaskErrorEvent"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 3.0,
                                "raw": "3"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "TaskCancelEvent"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 4.0,
                                "raw": "4"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "TaskRunEvent"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 5.0,
                                "raw": "5"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "TaskYieldEvent"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 6.0,
                                "raw": "6"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "SchedulerSuspendEvent"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 7.0,
                                "raw": "7"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "SchedulerResumeEvent"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 8.0,
                                "raw": "8"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "logEvent"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "entries"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "!==",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "eventLog"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "offset"
                                          },
                                          "init": {
                                            "type": "Identifier",
                                            "name": "eventLogIndex"
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "+=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "eventLogIndex"
                                        },
                                        "right": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "entries"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "length"
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": ">",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "eventLogIndex"
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": 1.0,
                                            "raw": "1"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "eventLogSize"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "*=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "eventLogSize"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": 2.0,
                                                "raw": "2"
                                              }
                                            }
                                          },
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": ">",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "eventLogSize"
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "MAX_EVENT_LOG_SIZE"
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "console"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "error"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                          "type": "Literal",
                                                          "value": "Scheduler Profiling: Event log exceeded maximum size. Don't ",
                                                          "raw": "Scheduler Profiling: Event log exceeded maximum size. Don't "
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": "forget to call `stopLoggingProfilingEvents()`.",
                                                          "raw": "forget to call `stopLoggingProfilingEvents()`."
                                                        }
                                                      }
                                                    ]
                                                  }
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "stopLoggingProfilingEvents"
                                                    },
                                                    "arguments": []
                                                  }
                                                },
                                                {
                                                  "type": "ReturnStatement",
                                                  "argument": null
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          },
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "BindingIdentifier",
                                                  "name": "newEventLog"
                                                },
                                                "init": {
                                                  "type": "NewExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "Int32Array"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "*",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "eventLogSize"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": 4.0,
                                                        "raw": "4"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "newEventLog"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "set"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "eventLog"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "eventLogBuffer"
                                              },
                                              "right": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "newEventLog"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "buffer"
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "eventLog"
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "newEventLog"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "eventLog"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "set"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "entries"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "offset"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "startLoggingProfilingEvents"
                          },
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "eventLogSize"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "INITIAL_EVENT_LOG_SIZE"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "eventLogBuffer"
                                  },
                                  "right": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "ArrayBuffer"
                                    },
                                    "arguments": [
                                      {
                                        "type": "BinaryExpression",
                                        "operator": "*",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "eventLogSize"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": 4.0,
                                          "raw": "4"
                                        }
                                      }
                                    ]
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "eventLog"
                                  },
                                  "right": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "Int32Array"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "eventLogBuffer"
                                      }
                                    ]
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "eventLogIndex"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": 0.0,
                                    "raw": "0"
                                  }
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "stopLoggingProfilingEvents"
                          },
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "buffer"
                                    },
                                    "init": {
                                      "type": "Identifier",
                                      "name": "eventLogBuffer"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "eventLogSize"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": 0.0,
                                    "raw": "0"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "eventLogBuffer"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "eventLog"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "eventLogIndex"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": 0.0,
                                    "raw": "0"
                                  }
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "buffer"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "markTaskStart"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "task"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "ms"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "enableProfiling"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "UpdateExpression",
                                        "operator": "++",
                                        "argument": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "profilingState"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "QUEUE_SIZE"
                                          }
                                        },
                                        "prefix": false
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "eventLog"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "logEvent"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "TaskStartEvent"
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "*",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "ms"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": 1000.0,
                                                        "raw": "1000"
                                                      }
                                                    },
                                                    {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "task"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "id"
                                                      }
                                                    },
                                                    {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "task"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "priorityLevel"
                                                      }
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "markTaskCompleted"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "task"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "ms"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "enableProfiling"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "profilingState"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "PRIORITY"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "NoPriority"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "profilingState"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "CURRENT_TASK_ID"
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": 0.0,
                                          "raw": "0"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "UpdateExpression",
                                        "operator": "--",
                                        "argument": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "profilingState"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "QUEUE_SIZE"
                                          }
                                        },
                                        "prefix": false
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "eventLog"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "logEvent"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "TaskCompleteEvent"
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "*",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "ms"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": 1000.0,
                                                        "raw": "1000"
                                                      }
                                                    },
                                                    {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "task"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "id"
                                                      }
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "markTaskCanceled"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "task"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "ms"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "enableProfiling"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "UpdateExpression",
                                        "operator": "--",
                                        "argument": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "profilingState"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "QUEUE_SIZE"
                                          }
                                        },
                                        "prefix": false
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "eventLog"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "logEvent"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "TaskCancelEvent"
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "*",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "ms"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": 1000.0,
                                                        "raw": "1000"
                                                      }
                                                    },
                                                    {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "task"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "id"
                                                      }
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "markTaskErrored"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "task"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "ms"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "enableProfiling"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "profilingState"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "PRIORITY"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "NoPriority"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "profilingState"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "CURRENT_TASK_ID"
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": 0.0,
                                          "raw": "0"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "UpdateExpression",
                                        "operator": "--",
                                        "argument": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "profilingState"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "QUEUE_SIZE"
                                          }
                                        },
                                        "prefix": false
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "eventLog"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "logEvent"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "TaskErrorEvent"
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "*",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "ms"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": 1000.0,
                                                        "raw": "1000"
                                                      }
                                                    },
                                                    {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "task"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "id"
                                                      }
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "markTaskRun"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "task"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "ms"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "enableProfiling"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "UpdateExpression",
                                        "operator": "++",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "runIdCounter"
                                        },
                                        "prefix": false
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "profilingState"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "PRIORITY"
                                          }
                                        },
                                        "right": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "task"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "priorityLevel"
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "profilingState"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "CURRENT_TASK_ID"
                                          }
                                        },
                                        "right": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "task"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "id"
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "profilingState"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "CURRENT_RUN_ID"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "runIdCounter"
                                        }
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "eventLog"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "logEvent"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "TaskRunEvent"
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "*",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "ms"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": 1000.0,
                                                        "raw": "1000"
                                                      }
                                                    },
                                                    {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "task"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "id"
                                                      }
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "runIdCounter"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "markTaskYield"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "task"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "ms"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "enableProfiling"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "profilingState"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "PRIORITY"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "NoPriority"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "profilingState"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "CURRENT_TASK_ID"
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": 0.0,
                                          "raw": "0"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "ComputedMemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "profilingState"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "CURRENT_RUN_ID"
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": 0.0,
                                          "raw": "0"
                                        }
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "eventLog"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "logEvent"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "TaskYieldEvent"
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "*",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "ms"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": 1000.0,
                                                        "raw": "1000"
                                                      }
                                                    },
                                                    {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "task"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "id"
                                                      }
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "runIdCounter"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "markSchedulerSuspended"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "ms"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "enableProfiling"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "UpdateExpression",
                                        "operator": "++",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "mainThreadIdCounter"
                                        },
                                        "prefix": false
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "eventLog"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "logEvent"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "SchedulerSuspendEvent"
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "*",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "ms"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": 1000.0,
                                                        "raw": "1000"
                                                      }
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "mainThreadIdCounter"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "markSchedulerUnsuspended"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "ms"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "enableProfiling"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "eventLog"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "logEvent"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "SchedulerResumeEvent"
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "*",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "ms"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": 1000.0,
                                                        "raw": "1000"
                                                      }
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "mainThreadIdCounter"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "maxSigned31BitInt"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 1073741823.0,
                                "raw": "1073741823"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "IMMEDIATE_PRIORITY_TIMEOUT"
                              },
                              "init": {
                                "type": "UnaryExpression",
                                "operator": "-",
                                "argument": {
                                  "type": "Literal",
                                  "value": 1.0,
                                  "raw": "1"
                                },
                                "prefix": true
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "USER_BLOCKING_PRIORITY"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 250.0,
                                "raw": "250"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "NORMAL_PRIORITY_TIMEOUT"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 5000.0,
                                "raw": "5000"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "LOW_PRIORITY_TIMEOUT"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 10000.0,
                                "raw": "10000"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "IDLE_PRIORITY"
                              },
                              "init": {
                                "type": "Identifier",
                                "name": "maxSigned31BitInt"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "taskQueue"
                              },
                              "init": {
                                "type": "ArrayExpression",
                                "elements": []
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "timerQueue"
                              },
                              "init": {
                                "type": "ArrayExpression",
                                "elements": []
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "taskIdCounter"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 1.0,
                                "raw": "1"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "isSchedulerPaused"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "false",
                                "raw": "false"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "currentTask"
                              },
                              "init": {
                                "type": "Literal",
                                "value": null,
                                "raw": "null"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "currentPriorityLevel"
                              },
                              "init": {
                                "type": "Identifier",
                                "name": "NormalPriority"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "isPerformingWork"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "false",
                                "raw": "false"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "isHostCallbackScheduled"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "false",
                                "raw": "false"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "isHostTimeoutScheduled"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "false",
                                "raw": "false"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "advanceTimers"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "currentTime"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "timer"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "peek"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "timerQueue"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "WhileStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "!==",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "timer"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                },
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "timer"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "callback"
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "pop"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "timerQueue"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "<=",
                                          "left": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "timer"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "startTime"
                                            }
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "currentTime"
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "pop"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "timerQueue"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "timer"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "sortIndex"
                                                  }
                                                },
                                                "right": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "timer"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "expirationTime"
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "push"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "taskQueue"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "timer"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "Identifier",
                                                "name": "enableProfiling"
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "Identifier",
                                                        "name": "markTaskStart"
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "timer"
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "name": "currentTime"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "StaticMemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "timer"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "isQueued"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": "true",
                                                        "raw": "true"
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            }
                                          ]
                                        },
                                        "alternate": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": null
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "timer"
                                        },
                                        "right": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "peek"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "timerQueue"
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "handleTimeout"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "currentTime"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "isHostTimeoutScheduled"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "false",
                                    "raw": "false"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "advanceTimers"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "currentTime"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "isHostCallbackScheduled"
                                  },
                                  "prefix": true
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "peek"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "taskQueue"
                                            }
                                          ]
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "isHostCallbackScheduled"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "true",
                                                "raw": "true"
                                              }
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "requestHostCallback"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "flushWork"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "BindingIdentifier",
                                                  "name": "firstTimer"
                                                },
                                                "init": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "peek"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "timerQueue"
                                                    }
                                                  ]
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "!==",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "firstTimer"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": null,
                                                "raw": "null"
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "requestHostTimeout"
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "handleTimeout"
                                                      },
                                                      {
                                                        "type": "BinaryExpression",
                                                        "operator": "-",
                                                        "left": {
                                                          "type": "StaticMemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "firstTimer"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "startTime"
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "currentTime"
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "flushWork"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "hasTimeRemaining"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "initialTime"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "enableProfiling"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "markSchedulerUnsuspended"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "initialTime"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "isHostCallbackScheduled"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "false",
                                    "raw": "false"
                                  }
                                }
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "isHostTimeoutScheduled"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "isHostTimeoutScheduled"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "false",
                                          "raw": "false"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "cancelHostTimeout"
                                        },
                                        "arguments": []
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "isPerformingWork"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "true",
                                    "raw": "true"
                                  }
                                }
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "previousPriorityLevel"
                                    },
                                    "init": {
                                      "type": "Identifier",
                                      "name": "currentPriorityLevel"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "TryStatement",
                                "block": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "Identifier",
                                        "name": "enableProfiling"
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "TryStatement",
                                            "block": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ReturnStatement",
                                                  "argument": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "workLoop"
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "hasTimeRemaining"
                                                      },
                                                      {
                                                        "type": "Identifier",
                                                        "name": "initialTime"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "handler": {
                                              "type": "CatchClause",
                                              "param": {
                                                "type": "BindingIdentifier",
                                                "name": "error"
                                              },
                                              "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "BinaryExpression",
                                                      "operator": "!==",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "currentTask"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": null,
                                                        "raw": "null"
                                                      }
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "VariableDeclaration",
                                                          "declarations": [
                                                            {
                                                              "type": "VariableDeclarator",
                                                              "id": {
                                                                "type": "BindingIdentifier",
                                                                "name": "currentTime"
                                                              },
                                                              "init": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "Identifier",
                                                                  "name": "getCurrentTime"
                                                                },
                                                                "arguments": []
                                                              }
                                                            }
                                                          ],
                                                          "kind": "var"
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "Identifier",
                                                              "name": "markTaskErrored"
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "currentTask"
                                                              },
                                                              {
                                                                "type": "Identifier",
                                                                "name": "currentTime"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "StaticMemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "currentTask"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "isQueued"
                                                              }
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "false",
                                                              "raw": "false"
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  },
                                                  {
                                                    "type": "ThrowStatement",
                                                    "argument": {
                                                      "type": "Identifier",
                                                      "name": "error"
                                                    }
                                                  }
                                                ]
                                              }
                                            },
                                            "finalizer": null
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ReturnStatement",
                                            "argument": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "workLoop"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "hasTimeRemaining"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "initialTime"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "handler": null,
                                "finalizer": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "currentTask"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "currentPriorityLevel"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "previousPriorityLevel"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "isPerformingWork"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "false",
                                          "raw": "false"
                                        }
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "Identifier",
                                        "name": "enableProfiling"
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "BindingIdentifier",
                                                  "name": "_currentTime"
                                                },
                                                "init": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "getCurrentTime"
                                                  },
                                                  "arguments": []
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "markSchedulerSuspended"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "_currentTime"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "workLoop"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "hasTimeRemaining"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "initialTime"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "currentTime"
                                    },
                                    "init": {
                                      "type": "Identifier",
                                      "name": "initialTime"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "advanceTimers"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "currentTime"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "currentTask"
                                  },
                                  "right": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "peek"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "taskQueue"
                                      }
                                    ]
                                  }
                                }
                              },
                              {
                                "type": "WhileStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "currentTask"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  },
                                  "right": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "SequenceExpression",
                                      "expressions": [
                                        {
                                          "type": "BinaryExpression",
                                          "operator": "&&",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "enableSchedulerDebugging"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "isSchedulerPaused"
                                          }
                                        }
                                      ]
                                    },
                                    "prefix": true
                                  }
                                },
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": ">",
                                          "left": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "currentTask"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "expirationTime"
                                            }
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "currentTime"
                                          }
                                        },
                                        "right": {
                                          "type": "SequenceExpression",
                                          "expressions": [
                                            {
                                              "type": "BinaryExpression",
                                              "operator": "||",
                                              "left": {
                                                "type": "UnaryExpression",
                                                "operator": "!",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "hasTimeRemaining"
                                                },
                                                "prefix": true
                                              },
                                              "right": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "shouldYieldToHost"
                                                },
                                                "arguments": []
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "BreakStatement",
                                            "label": null
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "callback"
                                          },
                                          "init": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "currentTask"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "callback"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "callback"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "currentTask"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "callback"
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": null,
                                                "raw": "null"
                                              }
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "currentPriorityLevel"
                                              },
                                              "right": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "currentTask"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "priorityLevel"
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "BindingIdentifier",
                                                  "name": "didUserCallbackTimeout"
                                                },
                                                "init": {
                                                  "type": "BinaryExpression",
                                                  "operator": "<=",
                                                  "left": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "currentTask"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "expirationTime"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "currentTime"
                                                  }
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "markTaskRun"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "currentTask"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "currentTime"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "BindingIdentifier",
                                                  "name": "continuationCallback"
                                                },
                                                "init": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "callback"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "didUserCallbackTimeout"
                                                    }
                                                  ]
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "currentTime"
                                              },
                                              "right": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "getCurrentTime"
                                                },
                                                "arguments": []
                                              }
                                            }
                                          },
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "UnaryExpression",
                                                "operator": "typeof",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "continuationCallback"
                                                },
                                                "prefix": true
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "function",
                                                "raw": "function"
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "currentTask"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "callback"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "continuationCallback"
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "markTaskYield"
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "currentTask"
                                                      },
                                                      {
                                                        "type": "Identifier",
                                                        "name": "currentTime"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "IfStatement",
                                                  "test": {
                                                    "type": "Identifier",
                                                    "name": "enableProfiling"
                                                  },
                                                  "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "Identifier",
                                                            "name": "markTaskCompleted"
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "currentTask"
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "name": "currentTime"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "AssignmentExpression",
                                                          "operator": "=",
                                                          "left": {
                                                            "type": "StaticMemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "currentTask"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "isQueued"
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "Literal",
                                                            "value": "false",
                                                            "raw": "false"
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "alternate": null
                                                },
                                                {
                                                  "type": "IfStatement",
                                                  "test": {
                                                    "type": "BinaryExpression",
                                                    "operator": "===",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "currentTask"
                                                    },
                                                    "right": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "Identifier",
                                                        "name": "peek"
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "taskQueue"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "Identifier",
                                                            "name": "pop"
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "taskQueue"
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "alternate": null
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "advanceTimers"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "currentTime"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "pop"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "taskQueue"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "currentTask"
                                        },
                                        "right": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "peek"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "taskQueue"
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "!==",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "currentTask"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Literal",
                                        "value": "true",
                                        "raw": "true"
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "firstTimer"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "peek"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "timerQueue"
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "firstTimer"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "requestHostTimeout"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "handleTimeout"
                                                },
                                                {
                                                  "type": "BinaryExpression",
                                                  "operator": "-",
                                                  "left": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "firstTimer"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "startTime"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "currentTime"
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Literal",
                                        "value": "false",
                                        "raw": "false"
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_runWithPriority"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "priorityLevel"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "eventHandler"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "SwitchStatement",
                                "discriminant": {
                                  "type": "Identifier",
                                  "name": "priorityLevel"
                                },
                                "cases": [
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "ImmediatePriority"
                                    },
                                    "consequent": []
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "UserBlockingPriority"
                                    },
                                    "consequent": []
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "NormalPriority"
                                    },
                                    "consequent": []
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "LowPriority"
                                    },
                                    "consequent": []
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "IdlePriority"
                                    },
                                    "consequent": [
                                      {
                                        "type": "BreakStatement",
                                        "label": null
                                      }
                                    ]
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": null,
                                    "consequent": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "priorityLevel"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "NormalPriority"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "previousPriorityLevel"
                                    },
                                    "init": {
                                      "type": "Identifier",
                                      "name": "currentPriorityLevel"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "currentPriorityLevel"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "priorityLevel"
                                  }
                                }
                              },
                              {
                                "type": "TryStatement",
                                "block": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "eventHandler"
                                        },
                                        "arguments": []
                                      }
                                    }
                                  ]
                                },
                                "handler": null,
                                "finalizer": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "currentPriorityLevel"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "previousPriorityLevel"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_next"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "eventHandler"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "priorityLevel"
                                    },
                                    "init": null
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "SwitchStatement",
                                "discriminant": {
                                  "type": "Identifier",
                                  "name": "currentPriorityLevel"
                                },
                                "cases": [
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "ImmediatePriority"
                                    },
                                    "consequent": []
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "UserBlockingPriority"
                                    },
                                    "consequent": []
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "NormalPriority"
                                    },
                                    "consequent": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "priorityLevel"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "NormalPriority"
                                          }
                                        }
                                      },
                                      {
                                        "type": "BreakStatement",
                                        "label": null
                                      }
                                    ]
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": null,
                                    "consequent": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "priorityLevel"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "currentPriorityLevel"
                                          }
                                        }
                                      },
                                      {
                                        "type": "BreakStatement",
                                        "label": null
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "previousPriorityLevel"
                                    },
                                    "init": {
                                      "type": "Identifier",
                                      "name": "currentPriorityLevel"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "currentPriorityLevel"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "priorityLevel"
                                  }
                                }
                              },
                              {
                                "type": "TryStatement",
                                "block": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "eventHandler"
                                        },
                                        "arguments": []
                                      }
                                    }
                                  ]
                                },
                                "handler": null,
                                "finalizer": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "currentPriorityLevel"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "previousPriorityLevel"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_wrapCallback"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "callback"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "parentPriorityLevel"
                                    },
                                    "init": {
                                      "type": "Identifier",
                                      "name": "currentPriorityLevel"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "FunctionExpression",
                                  "id": null,
                                  "params": [],
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "BindingIdentifier",
                                              "name": "previousPriorityLevel"
                                            },
                                            "init": {
                                              "type": "Identifier",
                                              "name": "currentPriorityLevel"
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "currentPriorityLevel"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "parentPriorityLevel"
                                          }
                                        }
                                      },
                                      {
                                        "type": "TryStatement",
                                        "block": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "StaticMemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "callback"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "apply"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "ThisExpression"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "arguments"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "handler": null,
                                        "finalizer": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "currentPriorityLevel"
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "previousPriorityLevel"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "generator": false,
                                  "expression": false,
                                  "async": false
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "timeoutForPriorityLevel"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "priorityLevel"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "SwitchStatement",
                                "discriminant": {
                                  "type": "Identifier",
                                  "name": "priorityLevel"
                                },
                                "cases": [
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "ImmediatePriority"
                                    },
                                    "consequent": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "IMMEDIATE_PRIORITY_TIMEOUT"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "UserBlockingPriority"
                                    },
                                    "consequent": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "USER_BLOCKING_PRIORITY"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "IdlePriority"
                                    },
                                    "consequent": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "IDLE_PRIORITY"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "LowPriority"
                                    },
                                    "consequent": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "LOW_PRIORITY_TIMEOUT"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "NormalPriority"
                                    },
                                    "consequent": []
                                  },
                                  {
                                    "type": "SwitchCase",
                                    "test": null,
                                    "consequent": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "NORMAL_PRIORITY_TIMEOUT"
                                        }
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_scheduleCallback"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "priorityLevel"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "callback"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "options"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "currentTime"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "getCurrentTime"
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "startTime"
                                    },
                                    "init": null
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "timeout"
                                    },
                                    "init": null
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "typeof",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "options"
                                      },
                                      "prefix": true
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": "object",
                                      "raw": "object"
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "options"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "delay"
                                          },
                                          "init": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "options"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "delay"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "===",
                                          "left": {
                                            "type": "UnaryExpression",
                                            "operator": "typeof",
                                            "argument": {
                                              "type": "Identifier",
                                              "name": "delay"
                                            },
                                            "prefix": true
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": "number",
                                            "raw": "number"
                                          }
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": ">",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "delay"
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": 0.0,
                                            "raw": "0"
                                          }
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "startTime"
                                              },
                                              "right": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "currentTime"
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "delay"
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "startTime"
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "currentTime"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "timeout"
                                        },
                                        "right": {
                                          "type": "ConditionalExpression",
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "UnaryExpression",
                                              "operator": "typeof",
                                              "argument": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "options"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "timeout"
                                                }
                                              },
                                              "prefix": true
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": "number",
                                              "raw": "number"
                                            }
                                          },
                                          "consequent": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "options"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "timeout"
                                            }
                                          },
                                          "alternate": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "timeoutForPriorityLevel"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "priorityLevel"
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "timeout"
                                        },
                                        "right": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "timeoutForPriorityLevel"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "priorityLevel"
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "startTime"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "currentTime"
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "expirationTime"
                                    },
                                    "init": {
                                      "type": "BinaryExpression",
                                      "operator": "+",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "startTime"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "timeout"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "newTask"
                                    },
                                    "init": {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "id"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "UpdateExpression",
                                            "operator": "++",
                                            "argument": {
                                              "type": "Identifier",
                                              "name": "taskIdCounter"
                                            },
                                            "prefix": false
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3064,
                                              "col": 3064,
                                              "idx": 95321
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3064,
                                              "col": 3064,
                                              "idx": 95337
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "callback"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "callback"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3065,
                                              "col": 3065,
                                              "idx": 95352
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3065,
                                              "col": 3065,
                                              "idx": 95361
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "priorityLevel"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "priorityLevel"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3066,
                                              "col": 3066,
                                              "idx": 95381
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3066,
                                              "col": 3066,
                                              "idx": 95395
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "startTime"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "startTime"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3067,
                                              "col": 3067,
                                              "idx": 95411
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3067,
                                              "col": 3067,
                                              "idx": 95421
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "expirationTime"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "expirationTime"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3068,
                                              "col": 3068,
                                              "idx": 95442
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3068,
                                              "col": 3068,
                                              "idx": 95457
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "sortIndex"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "UnaryExpression",
                                            "operator": "-",
                                            "argument": {
                                              "type": "Literal",
                                              "value": 1.0,
                                              "raw": "1"
                                            },
                                            "prefix": true
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3069,
                                              "col": 3069,
                                              "idx": 95473
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3070,
                                              "col": 3070,
                                              "idx": 95479
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "enableProfiling"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "newTask"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "isQueued"
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "false",
                                          "raw": "false"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": ">",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "startTime"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "currentTime"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "newTask"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "sortIndex"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "startTime"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "push"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "timerQueue"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "newTask"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "===",
                                          "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "peek"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "taskQueue"
                                              }
                                            ]
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": null,
                                            "raw": "null"
                                          }
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": "===",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "newTask"
                                          },
                                          "right": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "peek"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "timerQueue"
                                              }
                                            ]
                                          }
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "Identifier",
                                              "name": "isHostTimeoutScheduled"
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "cancelHostTimeout"
                                                    },
                                                    "arguments": []
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "isHostTimeoutScheduled"
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": "true",
                                                      "raw": "true"
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "requestHostTimeout"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "handleTimeout"
                                                },
                                                {
                                                  "type": "BinaryExpression",
                                                  "operator": "-",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "startTime"
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "currentTime"
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "newTask"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "sortIndex"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "expirationTime"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "push"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "taskQueue"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "newTask"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "Identifier",
                                        "name": "enableProfiling"
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "markTaskStart"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "newTask"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "currentTime"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "newTask"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "isQueued"
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "true",
                                                "raw": "true"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "UnaryExpression",
                                          "operator": "!",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "isHostCallbackScheduled"
                                          },
                                          "prefix": true
                                        },
                                        "right": {
                                          "type": "UnaryExpression",
                                          "operator": "!",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "isPerformingWork"
                                          },
                                          "prefix": true
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "isHostCallbackScheduled"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "true",
                                                "raw": "true"
                                              }
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "requestHostCallback"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "flushWork"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "newTask"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_pauseExecution"
                          },
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "isSchedulerPaused"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "true",
                                    "raw": "true"
                                  }
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_continueExecution"
                          },
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "isSchedulerPaused"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "false",
                                    "raw": "false"
                                  }
                                }
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "isHostCallbackScheduled"
                                    },
                                    "prefix": true
                                  },
                                  "right": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "isPerformingWork"
                                    },
                                    "prefix": true
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "isHostCallbackScheduled"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "true",
                                          "raw": "true"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "requestHostCallback"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "flushWork"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_getFirstCallbackNode"
                          },
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "peek"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "taskQueue"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_cancelCallback"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "task"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "enableProfiling"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "task"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "isQueued"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "BindingIdentifier",
                                                  "name": "currentTime"
                                                },
                                                "init": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "getCurrentTime"
                                                  },
                                                  "arguments": []
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "markTaskCanceled"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "task"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "currentTime"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "task"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "isQueued"
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "false",
                                                "raw": "false"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "task"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "callback"
                                    }
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_getCurrentPriorityLevel"
                          },
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "currentPriorityLevel"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_shouldYield"
                          },
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "currentTime"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "getCurrentTime"
                                      },
                                      "arguments": []
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "advanceTimers"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "currentTime"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "firstTask"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "peek"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "taskQueue"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "BinaryExpression",
                                  "operator": "||",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "BinaryExpression",
                                      "operator": "&&",
                                      "left": {
                                        "type": "BinaryExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "&&",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "&&",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "!==",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "firstTask"
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "currentTask"
                                              }
                                            },
                                            "right": {
                                              "type": "BinaryExpression",
                                              "operator": "!==",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "currentTask"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": null,
                                                "raw": "null"
                                              }
                                            }
                                          },
                                          "right": {
                                            "type": "BinaryExpression",
                                            "operator": "!==",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "firstTask"
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": null,
                                              "raw": "null"
                                            }
                                          }
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": "!==",
                                          "left": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "firstTask"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "callback"
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": null,
                                            "raw": "null"
                                          }
                                        }
                                      },
                                      "right": {
                                        "type": "BinaryExpression",
                                        "operator": "<=",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "firstTask"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "startTime"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "currentTime"
                                        }
                                      }
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "<",
                                      "left": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "firstTask"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "expirationTime"
                                        }
                                      },
                                      "right": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "currentTask"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "expirationTime"
                                        }
                                      }
                                    }
                                  },
                                  "right": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "shouldYieldToHost"
                                    },
                                    "arguments": []
                                  }
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "unstable_requestPaint"
                              },
                              "init": {
                                "type": "Identifier",
                                "name": "requestPaint"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "unstable_Profiling"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "enableProfiling"
                                },
                                "consequent": {
                                  "type": "ObjectExpression",
                                  "properties": [
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "startLoggingProfilingEvents"
                                      },
                                      "computed": false,
                                      "value": {
                                        "type": "Identifier",
                                        "name": "startLoggingProfilingEvents"
                                      },
                                      "kind": "init",
                                      "method": false,
                                      "shorthand": false,
                                      "span": {
                                        "type": "Span",
                                        "start": {
                                          "type": "Marker",
                                          "line": 3158,
                                          "col": 3158,
                                          "idx": 97903
                                        },
                                        "end": {
                                          "type": "Marker",
                                          "line": 3158,
                                          "col": 3158,
                                          "idx": 97931
                                        }
                                      }
                                    },
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "stopLoggingProfilingEvents"
                                      },
                                      "computed": false,
                                      "value": {
                                        "type": "Identifier",
                                        "name": "stopLoggingProfilingEvents"
                                      },
                                      "kind": "init",
                                      "method": false,
                                      "shorthand": false,
                                      "span": {
                                        "type": "Span",
                                        "start": {
                                          "type": "Marker",
                                          "line": 3159,
                                          "col": 3159,
                                          "idx": 97962
                                        },
                                        "end": {
                                          "type": "Marker",
                                          "line": 3159,
                                          "col": 3159,
                                          "idx": 97989
                                        }
                                      }
                                    },
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "sharedProfilingBuffer"
                                      },
                                      "computed": false,
                                      "value": {
                                        "type": "Identifier",
                                        "name": "sharedProfilingBuffer"
                                      },
                                      "kind": "init",
                                      "method": false,
                                      "shorthand": false,
                                      "span": {
                                        "type": "Span",
                                        "start": {
                                          "type": "Marker",
                                          "line": 3160,
                                          "col": 3160,
                                          "idx": 98015
                                        },
                                        "end": {
                                          "type": "Marker",
                                          "line": 3161,
                                          "col": 3161,
                                          "idx": 98038
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": null,
                                  "raw": "null"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "Scheduler"
                              },
                              "init": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "Object"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "freeze"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "ObjectExpression",
                                    "properties": [
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_ImmediatePriority"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "ImmediatePriority"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3166,
                                            "col": 3166,
                                            "idx": 98111
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3166,
                                            "col": 3166,
                                            "idx": 98129
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_UserBlockingPriority"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "UserBlockingPriority"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3167,
                                            "col": 3167,
                                            "idx": 98162
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3167,
                                            "col": 3167,
                                            "idx": 98183
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_NormalPriority"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "NormalPriority"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3168,
                                            "col": 3168,
                                            "idx": 98210
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3168,
                                            "col": 3168,
                                            "idx": 98225
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_IdlePriority"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "IdlePriority"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3169,
                                            "col": 3169,
                                            "idx": 98250
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3169,
                                            "col": 3169,
                                            "idx": 98263
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_LowPriority"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "LowPriority"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3170,
                                            "col": 3170,
                                            "idx": 98287
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3170,
                                            "col": 3170,
                                            "idx": 98299
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_runWithPriority"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_runWithPriority"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3171,
                                            "col": 3171,
                                            "idx": 98327
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3171,
                                            "col": 3171,
                                            "idx": 98352
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_next"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_next"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3172,
                                            "col": 3172,
                                            "idx": 98369
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3172,
                                            "col": 3172,
                                            "idx": 98383
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_scheduleCallback"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_scheduleCallback"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3173,
                                            "col": 3173,
                                            "idx": 98412
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3173,
                                            "col": 3173,
                                            "idx": 98438
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_cancelCallback"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_cancelCallback"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3174,
                                            "col": 3174,
                                            "idx": 98465
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3174,
                                            "col": 3174,
                                            "idx": 98489
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_wrapCallback"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_wrapCallback"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3175,
                                            "col": 3175,
                                            "idx": 98514
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3175,
                                            "col": 3175,
                                            "idx": 98536
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_getCurrentPriorityLevel"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_getCurrentPriorityLevel"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3176,
                                            "col": 3176,
                                            "idx": 98572
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3176,
                                            "col": 3176,
                                            "idx": 98605
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_shouldYield"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_shouldYield"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3177,
                                            "col": 3177,
                                            "idx": 98629
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3177,
                                            "col": 3177,
                                            "idx": 98650
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_requestPaint"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_requestPaint"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3178,
                                            "col": 3178,
                                            "idx": 98675
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3178,
                                            "col": 3178,
                                            "idx": 98697
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_continueExecution"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_continueExecution"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3179,
                                            "col": 3179,
                                            "idx": 98727
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3179,
                                            "col": 3179,
                                            "idx": 98754
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_pauseExecution"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_pauseExecution"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3180,
                                            "col": 3180,
                                            "idx": 98781
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3180,
                                            "col": 3180,
                                            "idx": 98805
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_getFirstCallbackNode"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_getFirstCallbackNode"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3181,
                                            "col": 3181,
                                            "idx": 98838
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3181,
                                            "col": 3181,
                                            "idx": 98868
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_now"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "getCurrentTime"
                                                }
                                              }
                                            ]
                                          },
                                          "generator": false,
                                          "expression": false,
                                          "async": false
                                        },
                                        "kind": "get",
                                        "method": true,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3182,
                                            "col": 3182,
                                            "idx": 98886
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3182,
                                            "col": 3182,
                                            "idx": 98904
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_forceFrameRate"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "forceFrameRate"
                                                }
                                              }
                                            ]
                                          },
                                          "generator": false,
                                          "expression": false,
                                          "async": false
                                        },
                                        "kind": "get",
                                        "method": true,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3183,
                                            "col": 3183,
                                            "idx": 98922
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3183,
                                            "col": 3183,
                                            "idx": 98940
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_Profiling"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_Profiling"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3184,
                                            "col": 3184,
                                            "idx": 98962
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3185,
                                            "col": 3185,
                                            "idx": 98982
                                          }
                                        }
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "enableSchedulerTracing"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "true",
                                "raw": "true"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "exposeConcurrentModeAPIs"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "false",
                                "raw": "false"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "enableFlareAPI"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "false",
                                "raw": "false"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "enableFundamentalAPI"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "false",
                                "raw": "false"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "enableScopeAPI"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "false",
                                "raw": "false"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "enableJSXTransformAPI"
                              },
                              "init": {
                                "type": "Literal",
                                "value": "false",
                                "raw": "false"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "DEFAULT_THREAD_ID"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 0.0,
                                "raw": "0"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "interactionIDCounter"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 0.0,
                                "raw": "0"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "threadIDCounter"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 0.0,
                                "raw": "0"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "interactionsRef"
                              },
                              "init": {
                                "type": "Literal",
                                "value": null,
                                "raw": "null"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "subscriberRef"
                              },
                              "init": {
                                "type": "Literal",
                                "value": null,
                                "raw": "null"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "IfStatement",
                          "test": {
                            "type": "Identifier",
                            "name": "enableSchedulerTracing"
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "interactionsRef"
                                  },
                                  "right": {
                                    "type": "ObjectExpression",
                                    "properties": [
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "current"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "NewExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "Set"
                                          },
                                          "arguments": []
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3259,
                                            "col": 3259,
                                            "idx": 101785
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3260,
                                            "col": 3260,
                                            "idx": 101798
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "subscriberRef"
                                  },
                                  "right": {
                                    "type": "ObjectExpression",
                                    "properties": [
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "current"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3262,
                                            "col": 3262,
                                            "idx": 101833
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3263,
                                            "col": 3263,
                                            "idx": 101841
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          },
                          "alternate": null
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_clear"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "callback"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "enableSchedulerTracing"
                                  },
                                  "prefix": true
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "callback"
                                        },
                                        "arguments": []
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "prevInteractions"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "interactionsRef"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "current"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "interactionsRef"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "current"
                                    }
                                  },
                                  "right": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "Set"
                                    },
                                    "arguments": []
                                  }
                                }
                              },
                              {
                                "type": "TryStatement",
                                "block": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "callback"
                                        },
                                        "arguments": []
                                      }
                                    }
                                  ]
                                },
                                "handler": null,
                                "finalizer": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "interactionsRef"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "current"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "prevInteractions"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_getCurrent"
                          },
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "enableSchedulerTracing"
                                  },
                                  "prefix": true
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Literal",
                                        "value": null,
                                        "raw": "null"
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "interactionsRef"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "current"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_getThreadID"
                          },
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "UpdateExpression",
                                  "operator": "++",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "threadIDCounter"
                                  },
                                  "prefix": true
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_trace"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "name"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "timestamp"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "callback"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "threadID"
                                    },
                                    "init": {
                                      "type": "ConditionalExpression",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": ">",
                                          "left": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "arguments"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "length"
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": 3.0,
                                            "raw": "3"
                                          }
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": "!==",
                                          "left": {
                                            "type": "ComputedMemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "arguments"
                                            },
                                            "property": {
                                              "type": "Literal",
                                              "value": 3.0,
                                              "raw": "3"
                                            }
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "undefined"
                                          }
                                        }
                                      },
                                      "consequent": {
                                        "type": "ComputedMemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "arguments"
                                        },
                                        "property": {
                                          "type": "Literal",
                                          "value": 3.0,
                                          "raw": "3"
                                        }
                                      },
                                      "alternate": {
                                        "type": "Identifier",
                                        "name": "DEFAULT_THREAD_ID"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "enableSchedulerTracing"
                                  },
                                  "prefix": true
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "callback"
                                        },
                                        "arguments": []
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "interaction"
                                    },
                                    "init": {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "__count"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Literal",
                                            "value": 1.0,
                                            "raw": "1"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3298,
                                              "col": 3298,
                                              "idx": 102586
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3298,
                                              "col": 3298,
                                              "idx": 102588
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "id"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "UpdateExpression",
                                            "operator": "++",
                                            "argument": {
                                              "type": "Identifier",
                                              "name": "interactionIDCounter"
                                            },
                                            "prefix": false
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3299,
                                              "col": 3299,
                                              "idx": 102597
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3299,
                                              "col": 3299,
                                              "idx": 102620
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "name"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "name"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3300,
                                              "col": 3300,
                                              "idx": 102631
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3300,
                                              "col": 3300,
                                              "idx": 102636
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "timestamp"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "timestamp"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3301,
                                              "col": 3301,
                                              "idx": 102652
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3302,
                                              "col": 3302,
                                              "idx": 102665
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "prevInteractions"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "interactionsRef"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "current"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "interactions"
                                    },
                                    "init": {
                                      "type": "NewExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "Set"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "prevInteractions"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "interactions"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "add"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "interaction"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "interactionsRef"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "current"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "interactions"
                                  }
                                }
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "subscriber"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "subscriberRef"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "current"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "returnValue"
                                    },
                                    "init": null
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "TryStatement",
                                "block": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "subscriber"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": null,
                                          "raw": "null"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "subscriber"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "onInteractionTraced"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "interaction"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "handler": null,
                                "finalizer": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "TryStatement",
                                      "block": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "!==",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "subscriber"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": null,
                                                "raw": "null"
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "subscriber"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "onWorkStarted"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "interactions"
                                                      },
                                                      {
                                                        "type": "Identifier",
                                                        "name": "threadID"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          }
                                        ]
                                      },
                                      "handler": null,
                                      "finalizer": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "TryStatement",
                                            "block": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "returnValue"
                                                    },
                                                    "right": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "Identifier",
                                                        "name": "callback"
                                                      },
                                                      "arguments": []
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "handler": null,
                                            "finalizer": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "interactionsRef"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "current"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "prevInteractions"
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "TryStatement",
                                                  "block": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "IfStatement",
                                                        "test": {
                                                          "type": "BinaryExpression",
                                                          "operator": "!==",
                                                          "left": {
                                                            "type": "Identifier",
                                                            "name": "subscriber"
                                                          },
                                                          "right": {
                                                            "type": "Literal",
                                                            "value": null,
                                                            "raw": "null"
                                                          }
                                                        },
                                                        "consequent": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "StaticMemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "subscriber"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "onWorkStopped"
                                                                  }
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "interactions"
                                                                  },
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "threadID"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "alternate": null
                                                      }
                                                    ]
                                                  },
                                                  "handler": null,
                                                  "finalizer": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "UpdateExpression",
                                                          "operator": "--",
                                                          "argument": {
                                                            "type": "StaticMemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "interaction"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "__count"
                                                            }
                                                          },
                                                          "prefix": false
                                                        }
                                                      },
                                                      {
                                                        "type": "IfStatement",
                                                        "test": {
                                                          "type": "BinaryExpression",
                                                          "operator": "&&",
                                                          "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "!==",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "subscriber"
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": null,
                                                              "raw": "null"
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "BinaryExpression",
                                                            "operator": "===",
                                                            "left": {
                                                              "type": "StaticMemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "interaction"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "__count"
                                                              }
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": 0.0,
                                                              "raw": "0"
                                                            }
                                                          }
                                                        },
                                                        "consequent": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "StaticMemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "subscriber"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "onInteractionScheduledWorkCompleted"
                                                                  }
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "interaction"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "alternate": null
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "returnValue"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_wrap"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "callback"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "threadID"
                                    },
                                    "init": {
                                      "type": "ConditionalExpression",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": ">",
                                          "left": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "arguments"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "length"
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": 1.0,
                                            "raw": "1"
                                          }
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": "!==",
                                          "left": {
                                            "type": "ComputedMemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "arguments"
                                            },
                                            "property": {
                                              "type": "Literal",
                                              "value": 1.0,
                                              "raw": "1"
                                            }
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "undefined"
                                          }
                                        }
                                      },
                                      "consequent": {
                                        "type": "ComputedMemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "arguments"
                                        },
                                        "property": {
                                          "type": "Literal",
                                          "value": 1.0,
                                          "raw": "1"
                                        }
                                      },
                                      "alternate": {
                                        "type": "Identifier",
                                        "name": "DEFAULT_THREAD_ID"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "enableSchedulerTracing"
                                  },
                                  "prefix": true
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "callback"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "wrappedInteractions"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "interactionsRef"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "current"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "subscriber"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "subscriberRef"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "current"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "!==",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "subscriber"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "subscriber"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "onWorkScheduled"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "wrappedInteractions"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "threadID"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "wrappedInteractions"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "forEach"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "interaction"
                                        }
                                      ],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "UpdateExpression",
                                              "operator": "++",
                                              "argument": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "interaction"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "__count"
                                                }
                                              },
                                              "prefix": false
                                            }
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "hasRun"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": "false",
                                      "raw": "false"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "FunctionDeclaration",
                                "id": {
                                  "type": "BindingIdentifier",
                                  "name": "wrapped"
                                },
                                "params": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "BindingIdentifier",
                                            "name": "prevInteractions"
                                          },
                                          "init": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "interactionsRef"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "current"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "interactionsRef"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "current"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "wrappedInteractions"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "subscriber"
                                        },
                                        "right": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "subscriberRef"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "current"
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "TryStatement",
                                      "block": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "BindingIdentifier",
                                                  "name": "returnValue"
                                                },
                                                "init": null
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "TryStatement",
                                            "block": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "IfStatement",
                                                  "test": {
                                                    "type": "BinaryExpression",
                                                    "operator": "!==",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "subscriber"
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": null,
                                                      "raw": "null"
                                                    }
                                                  },
                                                  "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "StaticMemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "subscriber"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "onWorkStarted"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "wrappedInteractions"
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "name": "threadID"
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "alternate": null
                                                }
                                              ]
                                            },
                                            "handler": null,
                                            "finalizer": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "TryStatement",
                                                  "block": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "AssignmentExpression",
                                                          "operator": "=",
                                                          "left": {
                                                            "type": "Identifier",
                                                            "name": "returnValue"
                                                          },
                                                          "right": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "StaticMemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "callback"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "apply"
                                                              }
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "undefined"
                                                              },
                                                              {
                                                                "type": "Identifier",
                                                                "name": "arguments"
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "handler": null,
                                                  "finalizer": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "AssignmentExpression",
                                                          "operator": "=",
                                                          "left": {
                                                            "type": "StaticMemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "interactionsRef"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "current"
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "Identifier",
                                                            "name": "prevInteractions"
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "type": "IfStatement",
                                                        "test": {
                                                          "type": "BinaryExpression",
                                                          "operator": "!==",
                                                          "left": {
                                                            "type": "Identifier",
                                                            "name": "subscriber"
                                                          },
                                                          "right": {
                                                            "type": "Literal",
                                                            "value": null,
                                                            "raw": "null"
                                                          }
                                                        },
                                                        "consequent": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "StaticMemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "subscriber"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "onWorkStopped"
                                                                  }
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "wrappedInteractions"
                                                                  },
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "threadID"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "alternate": null
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "ReturnStatement",
                                            "argument": {
                                              "type": "Identifier",
                                              "name": "returnValue"
                                            }
                                          }
                                        ]
                                      },
                                      "handler": null,
                                      "finalizer": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "UnaryExpression",
                                              "operator": "!",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "hasRun"
                                              },
                                              "prefix": true
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "hasRun"
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": "true",
                                                      "raw": "true"
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "wrappedInteractions"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "forEach"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "FunctionExpression",
                                                        "id": null,
                                                        "params": [
                                                          {
                                                            "type": "BindingIdentifier",
                                                            "name": "interaction"
                                                          }
                                                        ],
                                                        "body": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "UpdateExpression",
                                                                "operator": "--",
                                                                "argument": {
                                                                  "type": "StaticMemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "interaction"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "__count"
                                                                  }
                                                                },
                                                                "prefix": false
                                                              }
                                                            },
                                                            {
                                                              "type": "IfStatement",
                                                              "test": {
                                                                "type": "BinaryExpression",
                                                                "operator": "&&",
                                                                "left": {
                                                                  "type": "BinaryExpression",
                                                                  "operator": "!==",
                                                                  "left": {
                                                                    "type": "Identifier",
                                                                    "name": "subscriber"
                                                                  },
                                                                  "right": {
                                                                    "type": "Literal",
                                                                    "value": null,
                                                                    "raw": "null"
                                                                  }
                                                                },
                                                                "right": {
                                                                  "type": "BinaryExpression",
                                                                  "operator": "===",
                                                                  "left": {
                                                                    "type": "StaticMemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "interaction"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "__count"
                                                                    }
                                                                  },
                                                                  "right": {
                                                                    "type": "Literal",
                                                                    "value": 0.0,
                                                                    "raw": "0"
                                                                  }
                                                                }
                                                              },
                                                              "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                  {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                      "type": "CallExpression",
                                                                      "callee": {
                                                                        "type": "StaticMemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "subscriber"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "onInteractionScheduledWorkCompleted"
                                                                        }
                                                                      },
                                                                      "arguments": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "name": "interaction"
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                ]
                                                              },
                                                              "alternate": null
                                                            }
                                                          ]
                                                        },
                                                        "generator": false,
                                                        "expression": false,
                                                        "async": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "wrapped"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "cancel"
                                    }
                                  },
                                  "right": {
                                    "type": "FunctionExpression",
                                    "id": {
                                      "type": "Identifier",
                                      "name": "cancel"
                                    },
                                    "params": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "subscriber"
                                            },
                                            "right": {
                                              "type": "StaticMemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "subscriberRef"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "current"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "TryStatement",
                                          "block": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": "!==",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "subscriber"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": null,
                                                    "raw": "null"
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "StaticMemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "subscriber"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "onWorkCanceled"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "wrappedInteractions"
                                                          },
                                                          {
                                                            "type": "Identifier",
                                                            "name": "threadID"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              }
                                            ]
                                          },
                                          "handler": null,
                                          "finalizer": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "StaticMemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "wrappedInteractions"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "forEach"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [
                                                        {
                                                          "type": "BindingIdentifier",
                                                          "name": "interaction"
                                                        }
                                                      ],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "UpdateExpression",
                                                              "operator": "--",
                                                              "argument": {
                                                                "type": "StaticMemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "interaction"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "__count"
                                                                }
                                                              },
                                                              "prefix": false
                                                            }
                                                          },
                                                          {
                                                            "type": "IfStatement",
                                                            "test": {
                                                              "type": "BinaryExpression",
                                                              "operator": "&&",
                                                              "left": {
                                                                "type": "Identifier",
                                                                "name": "subscriber"
                                                              },
                                                              "right": {
                                                                "type": "BinaryExpression",
                                                                "operator": "===",
                                                                "left": {
                                                                  "type": "StaticMemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "interaction"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "__count"
                                                                  }
                                                                },
                                                                "right": {
                                                                  "type": "Literal",
                                                                  "value": 0.0,
                                                                  "raw": "0"
                                                                }
                                                              }
                                                            },
                                                            "consequent": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "StaticMemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "subscriber"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "onInteractionScheduledWorkCompleted"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Identifier",
                                                                        "name": "interaction"
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "alternate": null
                                                          }
                                                        ]
                                                      },
                                                      "generator": false,
                                                      "expression": false,
                                                      "async": false
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                  }
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "wrapped"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "subscribers"
                              },
                              "init": {
                                "type": "Literal",
                                "value": null,
                                "raw": "null"
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "IfStatement",
                          "test": {
                            "type": "Identifier",
                            "name": "enableSchedulerTracing"
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "subscribers"
                                  },
                                  "right": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "Set"
                                    },
                                    "arguments": []
                                  }
                                }
                              }
                            ]
                          },
                          "alternate": null
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_subscribe"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "subscriber"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "enableSchedulerTracing"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "subscribers"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "add"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "subscriber"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "subscribers"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "size"
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": 1.0,
                                          "raw": "1"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "subscriberRef"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "current"
                                                }
                                              },
                                              "right": {
                                                "type": "ObjectExpression",
                                                "properties": [
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "onInteractionScheduledWorkCompleted"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Identifier",
                                                      "name": "onInteractionScheduledWorkCompleted"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 3448,
                                                        "col": 3448,
                                                        "idx": 106841
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 3448,
                                                        "col": 3448,
                                                        "idx": 106877
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "onInteractionTraced"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Identifier",
                                                      "name": "onInteractionTraced"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 3449,
                                                        "col": 3449,
                                                        "idx": 106907
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 3449,
                                                        "col": 3449,
                                                        "idx": 106927
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "onWorkCanceled"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Identifier",
                                                      "name": "onWorkCanceled"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 3450,
                                                        "col": 3450,
                                                        "idx": 106952
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 3450,
                                                        "col": 3450,
                                                        "idx": 106967
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "onWorkScheduled"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Identifier",
                                                      "name": "onWorkScheduled"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 3451,
                                                        "col": 3451,
                                                        "idx": 106993
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 3451,
                                                        "col": 3451,
                                                        "idx": 107009
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "onWorkStarted"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Identifier",
                                                      "name": "onWorkStarted"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 3452,
                                                        "col": 3452,
                                                        "idx": 107033
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 3452,
                                                        "col": 3452,
                                                        "idx": 107047
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "onWorkStopped"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                      "type": "Identifier",
                                                      "name": "onWorkStopped"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": false,
                                                    "span": {
                                                      "type": "Span",
                                                      "start": {
                                                        "type": "Marker",
                                                        "line": 3453,
                                                        "col": 3453,
                                                        "idx": 107071
                                                      },
                                                      "end": {
                                                        "type": "Marker",
                                                        "line": 3454,
                                                        "col": 3454,
                                                        "idx": 107092
                                                      }
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "unstable_unsubscribe"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "subscriber"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "enableSchedulerTracing"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "subscribers"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "delete"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "subscriber"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "subscribers"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "size"
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": 0.0,
                                          "raw": "0"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "StaticMemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "subscriberRef"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "current"
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": null,
                                                "raw": "null"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "onInteractionTraced"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "interaction"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "didCatchError"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": "false",
                                      "raw": "false"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "caughtError"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "subscribers"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "forEach"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "subscriber"
                                        }
                                      ],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "TryStatement",
                                            "block": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "subscriber"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "onInteractionTraced"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "interaction"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "handler": {
                                              "type": "CatchClause",
                                              "param": {
                                                "type": "BindingIdentifier",
                                                "name": "error"
                                              },
                                              "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "UnaryExpression",
                                                      "operator": "!",
                                                      "argument": {
                                                        "type": "Identifier",
                                                        "name": "didCatchError"
                                                      },
                                                      "prefix": true
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "didCatchError"
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "true",
                                                              "raw": "true"
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "caughtError"
                                                            },
                                                            "right": {
                                                              "type": "Identifier",
                                                              "name": "error"
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  }
                                                ]
                                              }
                                            },
                                            "finalizer": null
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "didCatchError"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ThrowStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "caughtError"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "onInteractionScheduledWorkCompleted"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "interaction"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "didCatchError"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": "false",
                                      "raw": "false"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "caughtError"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "subscribers"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "forEach"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "subscriber"
                                        }
                                      ],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "TryStatement",
                                            "block": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "subscriber"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "onInteractionScheduledWorkCompleted"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "interaction"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "handler": {
                                              "type": "CatchClause",
                                              "param": {
                                                "type": "BindingIdentifier",
                                                "name": "error"
                                              },
                                              "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "UnaryExpression",
                                                      "operator": "!",
                                                      "argument": {
                                                        "type": "Identifier",
                                                        "name": "didCatchError"
                                                      },
                                                      "prefix": true
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "didCatchError"
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "true",
                                                              "raw": "true"
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "caughtError"
                                                            },
                                                            "right": {
                                                              "type": "Identifier",
                                                              "name": "error"
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  }
                                                ]
                                              }
                                            },
                                            "finalizer": null
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "didCatchError"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ThrowStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "caughtError"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "onWorkScheduled"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "interactions"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "threadID"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "didCatchError"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": "false",
                                      "raw": "false"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "caughtError"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "subscribers"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "forEach"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "subscriber"
                                        }
                                      ],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "TryStatement",
                                            "block": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "subscriber"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "onWorkScheduled"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "interactions"
                                                      },
                                                      {
                                                        "type": "Identifier",
                                                        "name": "threadID"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "handler": {
                                              "type": "CatchClause",
                                              "param": {
                                                "type": "BindingIdentifier",
                                                "name": "error"
                                              },
                                              "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "UnaryExpression",
                                                      "operator": "!",
                                                      "argument": {
                                                        "type": "Identifier",
                                                        "name": "didCatchError"
                                                      },
                                                      "prefix": true
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "didCatchError"
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "true",
                                                              "raw": "true"
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "caughtError"
                                                            },
                                                            "right": {
                                                              "type": "Identifier",
                                                              "name": "error"
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  }
                                                ]
                                              }
                                            },
                                            "finalizer": null
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "didCatchError"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ThrowStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "caughtError"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "onWorkStarted"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "interactions"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "threadID"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "didCatchError"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": "false",
                                      "raw": "false"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "caughtError"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "subscribers"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "forEach"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "subscriber"
                                        }
                                      ],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "TryStatement",
                                            "block": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "subscriber"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "onWorkStarted"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "interactions"
                                                      },
                                                      {
                                                        "type": "Identifier",
                                                        "name": "threadID"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "handler": {
                                              "type": "CatchClause",
                                              "param": {
                                                "type": "BindingIdentifier",
                                                "name": "error"
                                              },
                                              "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "UnaryExpression",
                                                      "operator": "!",
                                                      "argument": {
                                                        "type": "Identifier",
                                                        "name": "didCatchError"
                                                      },
                                                      "prefix": true
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "didCatchError"
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "true",
                                                              "raw": "true"
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "caughtError"
                                                            },
                                                            "right": {
                                                              "type": "Identifier",
                                                              "name": "error"
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  }
                                                ]
                                              }
                                            },
                                            "finalizer": null
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "didCatchError"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ThrowStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "caughtError"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "onWorkStopped"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "interactions"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "threadID"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "didCatchError"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": "false",
                                      "raw": "false"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "caughtError"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "subscribers"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "forEach"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "subscriber"
                                        }
                                      ],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "TryStatement",
                                            "block": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "subscriber"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "onWorkStopped"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "interactions"
                                                      },
                                                      {
                                                        "type": "Identifier",
                                                        "name": "threadID"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "handler": {
                                              "type": "CatchClause",
                                              "param": {
                                                "type": "BindingIdentifier",
                                                "name": "error"
                                              },
                                              "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "UnaryExpression",
                                                      "operator": "!",
                                                      "argument": {
                                                        "type": "Identifier",
                                                        "name": "didCatchError"
                                                      },
                                                      "prefix": true
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "didCatchError"
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "true",
                                                              "raw": "true"
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "caughtError"
                                                            },
                                                            "right": {
                                                              "type": "Identifier",
                                                              "name": "error"
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  }
                                                ]
                                              }
                                            },
                                            "finalizer": null
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "didCatchError"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ThrowStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "caughtError"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "onWorkCanceled"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "interactions"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "threadID"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "didCatchError"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": "false",
                                      "raw": "false"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "caughtError"
                                    },
                                    "init": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "subscribers"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "forEach"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [
                                        {
                                          "type": "BindingIdentifier",
                                          "name": "subscriber"
                                        }
                                      ],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "TryStatement",
                                            "block": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "StaticMemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "subscriber"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "onWorkCanceled"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "interactions"
                                                      },
                                                      {
                                                        "type": "Identifier",
                                                        "name": "threadID"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "handler": {
                                              "type": "CatchClause",
                                              "param": {
                                                "type": "BindingIdentifier",
                                                "name": "error"
                                              },
                                              "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "UnaryExpression",
                                                      "operator": "!",
                                                      "argument": {
                                                        "type": "Identifier",
                                                        "name": "didCatchError"
                                                      },
                                                      "prefix": true
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "didCatchError"
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "true",
                                                              "raw": "true"
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "caughtError"
                                                            },
                                                            "right": {
                                                              "type": "Identifier",
                                                              "name": "error"
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  }
                                                ]
                                              }
                                            },
                                            "finalizer": null
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": false,
                                      "async": false
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "didCatchError"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ThrowStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "caughtError"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "SchedulerTracing"
                              },
                              "init": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "Object"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "freeze"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "ObjectExpression",
                                    "properties": [
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "__interactionsRef"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "interactionsRef"
                                                }
                                              }
                                            ]
                                          },
                                          "generator": false,
                                          "expression": false,
                                          "async": false
                                        },
                                        "kind": "get",
                                        "method": true,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3585,
                                            "col": 3585,
                                            "idx": 109772
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3585,
                                            "col": 3585,
                                            "idx": 109791
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "__subscriberRef"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "subscriberRef"
                                                }
                                              }
                                            ]
                                          },
                                          "generator": false,
                                          "expression": false,
                                          "async": false
                                        },
                                        "kind": "get",
                                        "method": true,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3586,
                                            "col": 3586,
                                            "idx": 109809
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3586,
                                            "col": 3586,
                                            "idx": 109826
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_clear"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_clear"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3587,
                                            "col": 3587,
                                            "idx": 109844
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3587,
                                            "col": 3587,
                                            "idx": 109859
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_getCurrent"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_getCurrent"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3588,
                                            "col": 3588,
                                            "idx": 109882
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3588,
                                            "col": 3588,
                                            "idx": 109902
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_getThreadID"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_getThreadID"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3589,
                                            "col": 3589,
                                            "idx": 109926
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3589,
                                            "col": 3589,
                                            "idx": 109947
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_trace"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_trace"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3590,
                                            "col": 3590,
                                            "idx": 109965
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3590,
                                            "col": 3590,
                                            "idx": 109980
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_wrap"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_wrap"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3591,
                                            "col": 3591,
                                            "idx": 109997
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3591,
                                            "col": 3591,
                                            "idx": 110011
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_subscribe"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_subscribe"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3592,
                                            "col": 3592,
                                            "idx": 110033
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3592,
                                            "col": 3592,
                                            "idx": 110052
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "unstable_unsubscribe"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "unstable_unsubscribe"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3593,
                                            "col": 3593,
                                            "idx": 110076
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3594,
                                            "col": 3594,
                                            "idx": 110098
                                          }
                                        }
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "ReactSharedInternals$2"
                              },
                              "init": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "ReactCurrentDispatcher"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "ReactCurrentDispatcher"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3597,
                                        "col": 3597,
                                        "idx": 110159
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3597,
                                        "col": 3597,
                                        "idx": 110182
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "ReactCurrentOwner"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "ReactCurrentOwner"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3598,
                                        "col": 3598,
                                        "idx": 110204
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3598,
                                        "col": 3598,
                                        "idx": 110222
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "IsSomeRendererActing"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "IsSomeRendererActing"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3599,
                                        "col": 3599,
                                        "idx": 110247
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3599,
                                        "col": 3599,
                                        "idx": 110268
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "assign"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "objectAssign"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3601,
                                        "col": 3601,
                                        "idx": 110356
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3602,
                                        "col": 3602,
                                        "idx": 110370
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "objectAssign"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "ReactSharedInternals$2"
                                  },
                                  {
                                    "type": "ObjectExpression",
                                    "properties": [
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "ReactDebugCurrentFrame"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "ReactDebugCurrentFrame"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3607,
                                            "col": 3607,
                                            "idx": 110495
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3607,
                                            "col": 3607,
                                            "idx": 110518
                                          }
                                        }
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "ReactComponentTreeHook"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "ObjectExpression",
                                          "properties": []
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3610,
                                            "col": 3610,
                                            "idx": 110661
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3611,
                                            "col": 3611,
                                            "idx": 110667
                                          }
                                        }
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "objectAssign"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "ReactSharedInternals$2"
                              },
                              {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "Scheduler"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "Scheduler"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3620,
                                        "col": 3620,
                                        "idx": 111030
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3620,
                                        "col": 3620,
                                        "idx": 111040
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "SchedulerTracing"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "SchedulerTracing"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3621,
                                        "col": 3621,
                                        "idx": 111061
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3622,
                                        "col": 3622,
                                        "idx": 111079
                                      }
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "hasBadMapPolyfill"
                              },
                              "init": null
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "hasBadMapPolyfill"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "false",
                                  "raw": "false"
                                }
                              }
                            },
                            {
                              "type": "TryStatement",
                              "block": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "BindingIdentifier",
                                          "name": "frozenObject"
                                        },
                                        "init": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "StaticMemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "Object"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "freeze"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "ObjectExpression",
                                              "properties": []
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "BindingIdentifier",
                                          "name": "testMap"
                                        },
                                        "init": {
                                          "type": "NewExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "Map"
                                          },
                                          "arguments": [
                                            {
                                              "type": "ArrayExpression",
                                              "elements": [
                                                {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "frozenObject"
                                                    },
                                                    {
                                                      "type": "Literal",
                                                      "value": null,
                                                      "raw": "null"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "BindingIdentifier",
                                          "name": "testSet"
                                        },
                                        "init": {
                                          "type": "NewExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "Set"
                                          },
                                          "arguments": [
                                            {
                                              "type": "ArrayExpression",
                                              "elements": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "frozenObject"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "testMap"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "set"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": 0.0,
                                          "raw": "0"
                                        },
                                        {
                                          "type": "Literal",
                                          "value": 0.0,
                                          "raw": "0"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "testSet"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "add"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": 0.0,
                                          "raw": "0"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "handler": {
                                "type": "CatchClause",
                                "param": {
                                  "type": "BindingIdentifier",
                                  "name": "e"
                                },
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "hasBadMapPolyfill"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "true",
                                          "raw": "true"
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "finalizer": null
                            }
                          ]
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "createFundamentalComponent"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "impl"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "Literal",
                                    "value": "true",
                                    "raw": "true"
                                  },
                                  "right": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "hasBadMapPolyfill"
                                    },
                                    "prefix": true
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "Object"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "freeze"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "impl"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "fundamantalComponent"
                                    },
                                    "init": {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "$$typeof"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "REACT_FUNDAMENTAL_TYPE"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3653,
                                              "col": 3653,
                                              "idx": 111926
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3653,
                                              "col": 3653,
                                              "idx": 111949
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "impl"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "impl"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3654,
                                              "col": 3654,
                                              "idx": 111960
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3655,
                                              "col": 3655,
                                              "idx": 111968
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "Object"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "freeze"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "fundamantalComponent"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "fundamantalComponent"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "createEventResponder"
                          },
                          "params": [
                            {
                              "type": "BindingIdentifier",
                              "name": "displayName"
                            },
                            {
                              "type": "BindingIdentifier",
                              "name": "responderConfig"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "getInitialState"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "responderConfig"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "getInitialState"
                                      }
                                    }
                                  },
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "onEvent"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "responderConfig"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "onEvent"
                                      }
                                    }
                                  },
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "onMount"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "responderConfig"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "onMount"
                                      }
                                    }
                                  },
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "onUnmount"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "responderConfig"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "onUnmount"
                                      }
                                    }
                                  },
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "onRootEvent"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "responderConfig"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "onRootEvent"
                                      }
                                    }
                                  },
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "rootEventTypes"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "responderConfig"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "rootEventTypes"
                                      }
                                    }
                                  },
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "targetEventTypes"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "responderConfig"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "targetEventTypes"
                                      }
                                    }
                                  },
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "targetPortalPropagation"
                                    },
                                    "init": {
                                      "type": "StaticMemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "responderConfig"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "targetPortalPropagation"
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "eventResponder"
                                    },
                                    "init": {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "$$typeof"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "REACT_RESPONDER_TYPE"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3674,
                                              "col": 3674,
                                              "idx": 112576
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3674,
                                              "col": 3674,
                                              "idx": 112597
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "displayName"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "displayName"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3675,
                                              "col": 3675,
                                              "idx": 112615
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3675,
                                              "col": 3675,
                                              "idx": 112627
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "getInitialState"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "BinaryExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "getInitialState"
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": null,
                                              "raw": "null"
                                            }
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3676,
                                              "col": 3676,
                                              "idx": 112649
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3676,
                                              "col": 3676,
                                              "idx": 112673
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "onEvent"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "BinaryExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "onEvent"
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": null,
                                              "raw": "null"
                                            }
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3677,
                                              "col": 3677,
                                              "idx": 112687
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3677,
                                              "col": 3677,
                                              "idx": 112703
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "onMount"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "BinaryExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "onMount"
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": null,
                                              "raw": "null"
                                            }
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3678,
                                              "col": 3678,
                                              "idx": 112717
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3678,
                                              "col": 3678,
                                              "idx": 112733
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "onRootEvent"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "BinaryExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "onRootEvent"
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": null,
                                              "raw": "null"
                                            }
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3679,
                                              "col": 3679,
                                              "idx": 112751
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3679,
                                              "col": 3679,
                                              "idx": 112771
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "onUnmount"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "BinaryExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "onUnmount"
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": null,
                                              "raw": "null"
                                            }
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3680,
                                              "col": 3680,
                                              "idx": 112787
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3680,
                                              "col": 3680,
                                              "idx": 112805
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "rootEventTypes"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "BinaryExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "rootEventTypes"
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": null,
                                              "raw": "null"
                                            }
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3681,
                                              "col": 3681,
                                              "idx": 112826
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3681,
                                              "col": 3681,
                                              "idx": 112849
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "targetEventTypes"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "BinaryExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "targetEventTypes"
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": null,
                                              "raw": "null"
                                            }
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3682,
                                              "col": 3682,
                                              "idx": 112872
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3682,
                                              "col": 3682,
                                              "idx": 112897
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "targetPortalPropagation"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "BinaryExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "targetPortalPropagation"
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": "false",
                                              "raw": "false"
                                            }
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3683,
                                              "col": 3683,
                                              "idx": 112927
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3684,
                                              "col": 3684,
                                              "idx": 112963
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "Literal",
                                    "value": "true",
                                    "raw": "true"
                                  },
                                  "right": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "hasBadMapPolyfill"
                                    },
                                    "prefix": true
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "StaticMemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "Object"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "freeze"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "eventResponder"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "eventResponder"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "FunctionDeclaration",
                          "id": {
                            "type": "BindingIdentifier",
                            "name": "createScope"
                          },
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "BindingIdentifier",
                                      "name": "scopeComponent"
                                    },
                                    "init": {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "$$typeof"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "REACT_SCOPE_TYPE"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3697,
                                              "col": 3697,
                                              "idx": 113301
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3698,
                                              "col": 3698,
                                              "idx": 113321
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "Object"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "freeze"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "scopeComponent"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "scopeComponent"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "React"
                              },
                              "init": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "Children"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "map"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "mapChildren"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3709,
                                              "col": 3709,
                                              "idx": 113433
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3709,
                                              "col": 3709,
                                              "idx": 113445
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "forEach"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "forEachChildren"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3710,
                                              "col": 3710,
                                              "idx": 113459
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3710,
                                              "col": 3710,
                                              "idx": 113475
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "count"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "countChildren"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3711,
                                              "col": 3711,
                                              "idx": 113487
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3711,
                                              "col": 3711,
                                              "idx": 113501
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "toArray"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "toArray"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3712,
                                              "col": 3712,
                                              "idx": 113515
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3712,
                                              "col": 3712,
                                              "idx": 113523
                                            }
                                          }
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "only"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "onlyChild"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": false,
                                          "span": {
                                            "type": "Span",
                                            "start": {
                                              "type": "Marker",
                                              "line": 3713,
                                              "col": 3713,
                                              "idx": 113534
                                            },
                                            "end": {
                                              "type": "Marker",
                                              "line": 3714,
                                              "col": 3714,
                                              "idx": 113547
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3711,
                                        "col": 3711,
                                        "idx": 113480
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3714,
                                        "col": 3714,
                                        "idx": 113548
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "createRef"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "createRef"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3715,
                                        "col": 3715,
                                        "idx": 113562
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3715,
                                        "col": 3715,
                                        "idx": 113572
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "Component"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "Component"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3716,
                                        "col": 3716,
                                        "idx": 113586
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3716,
                                        "col": 3716,
                                        "idx": 113596
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "PureComponent"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "PureComponent"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3717,
                                        "col": 3717,
                                        "idx": 113614
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3717,
                                        "col": 3717,
                                        "idx": 113628
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "createContext"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "createContext"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3718,
                                        "col": 3718,
                                        "idx": 113646
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3718,
                                        "col": 3718,
                                        "idx": 113660
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "forwardRef"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "forwardRef"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3719,
                                        "col": 3719,
                                        "idx": 113675
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3719,
                                        "col": 3719,
                                        "idx": 113686
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "lazy"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "lazy"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3720,
                                        "col": 3720,
                                        "idx": 113695
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3720,
                                        "col": 3720,
                                        "idx": 113700
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "memo"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "memo"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3721,
                                        "col": 3721,
                                        "idx": 113709
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3721,
                                        "col": 3721,
                                        "idx": 113714
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "useCallback"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "useCallback"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3722,
                                        "col": 3722,
                                        "idx": 113730
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3722,
                                        "col": 3722,
                                        "idx": 113742
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "useContext"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "useContext"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3723,
                                        "col": 3723,
                                        "idx": 113757
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3723,
                                        "col": 3723,
                                        "idx": 113768
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "useEffect"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "useEffect"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3724,
                                        "col": 3724,
                                        "idx": 113782
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3724,
                                        "col": 3724,
                                        "idx": 113792
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "useImperativeHandle"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "useImperativeHandle"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3725,
                                        "col": 3725,
                                        "idx": 113816
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3725,
                                        "col": 3725,
                                        "idx": 113836
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "useDebugValue"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "useDebugValue"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3726,
                                        "col": 3726,
                                        "idx": 113854
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3726,
                                        "col": 3726,
                                        "idx": 113868
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "useLayoutEffect"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "useLayoutEffect"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3727,
                                        "col": 3727,
                                        "idx": 113888
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3727,
                                        "col": 3727,
                                        "idx": 113904
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "useMemo"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "useMemo"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3728,
                                        "col": 3728,
                                        "idx": 113916
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3728,
                                        "col": 3728,
                                        "idx": 113924
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "useReducer"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "useReducer"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3729,
                                        "col": 3729,
                                        "idx": 113939
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3729,
                                        "col": 3729,
                                        "idx": 113950
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "useRef"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "useRef"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3730,
                                        "col": 3730,
                                        "idx": 113961
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3730,
                                        "col": 3730,
                                        "idx": 113968
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "useState"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "useState"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3731,
                                        "col": 3731,
                                        "idx": 113981
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3731,
                                        "col": 3731,
                                        "idx": 113990
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "Fragment"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "REACT_FRAGMENT_TYPE"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3732,
                                        "col": 3732,
                                        "idx": 114003
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3732,
                                        "col": 3732,
                                        "idx": 114023
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "Profiler"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "REACT_PROFILER_TYPE"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3733,
                                        "col": 3733,
                                        "idx": 114036
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3733,
                                        "col": 3733,
                                        "idx": 114056
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "StrictMode"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "REACT_STRICT_MODE_TYPE"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3734,
                                        "col": 3734,
                                        "idx": 114071
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3734,
                                        "col": 3734,
                                        "idx": 114094
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "Suspense"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "REACT_SUSPENSE_TYPE"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3735,
                                        "col": 3735,
                                        "idx": 114107
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3735,
                                        "col": 3735,
                                        "idx": 114127
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "createElement"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "createElementWithValidation"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3736,
                                        "col": 3736,
                                        "idx": 114145
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3736,
                                        "col": 3736,
                                        "idx": 114173
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "cloneElement"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "cloneElementWithValidation"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3737,
                                        "col": 3737,
                                        "idx": 114190
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3737,
                                        "col": 3737,
                                        "idx": 114217
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "createFactory"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "createFactoryWithValidation"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3738,
                                        "col": 3738,
                                        "idx": 114235
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3738,
                                        "col": 3738,
                                        "idx": 114263
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "isValidElement"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "isValidElement"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3739,
                                        "col": 3739,
                                        "idx": 114282
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3739,
                                        "col": 3739,
                                        "idx": 114297
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "version"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "ReactVersion"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3740,
                                        "col": 3740,
                                        "idx": 114309
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3740,
                                        "col": 3740,
                                        "idx": 114322
                                      }
                                    }
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "ReactSharedInternals$2"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false,
                                    "span": {
                                      "type": "Span",
                                      "start": {
                                        "type": "Marker",
                                        "line": 3741,
                                        "col": 3741,
                                        "idx": 114377
                                      },
                                      "end": {
                                        "type": "Marker",
                                        "line": 3742,
                                        "col": 3742,
                                        "idx": 114401
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "IfStatement",
                          "test": {
                            "type": "Identifier",
                            "name": "exposeConcurrentModeAPIs"
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "React"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useTransition"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "useTransition"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "React"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useDeferredValue"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "useDeferredValue"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "React"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "SuspenseList"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "REACT_SUSPENSE_LIST_TYPE"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "React"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "unstable_withSuspenseConfig"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "withSuspenseConfig"
                                  }
                                }
                              }
                            ]
                          },
                          "alternate": null
                        },
                        {
                          "type": "IfStatement",
                          "test": {
                            "type": "Identifier",
                            "name": "enableFlareAPI"
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "React"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "unstable_useResponder"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "useResponder"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "React"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "unstable_createResponder"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "createEventResponder"
                                  }
                                }
                              }
                            ]
                          },
                          "alternate": null
                        },
                        {
                          "type": "IfStatement",
                          "test": {
                            "type": "Identifier",
                            "name": "enableFundamentalAPI"
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "React"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "unstable_createFundamental"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "createFundamentalComponent"
                                  }
                                }
                              }
                            ]
                          },
                          "alternate": null
                        },
                        {
                          "type": "IfStatement",
                          "test": {
                            "type": "Identifier",
                            "name": "enableScopeAPI"
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "StaticMemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "React"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "unstable_createScope"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "createScope"
                                  }
                                }
                              }
                            ]
                          },
                          "alternate": null
                        },
                        {
                          "type": "IfStatement",
                          "test": {
                            "type": "Identifier",
                            "name": "enableJSXTransformAPI"
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "React"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "jsxDEV"
                                        }
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "jsxWithValidation"
                                      }
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "React"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "jsx"
                                        }
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "jsxWithValidationDynamic"
                                      }
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "StaticMemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "React"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "jsxs"
                                        }
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "jsxWithValidationStatic"
                                      }
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          "alternate": null
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "React$2"
                              },
                              "init": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "Object"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "freeze"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "ObjectExpression",
                                    "properties": [
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "default"
                                        },
                                        "computed": false,
                                        "value": {
                                          "type": "Identifier",
                                          "name": "React"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false,
                                        "span": {
                                          "type": "Span",
                                          "start": {
                                            "type": "Marker",
                                            "line": 3779,
                                            "col": 3779,
                                            "idx": 115330
                                          },
                                          "end": {
                                            "type": "Marker",
                                            "line": 3780,
                                            "col": 3780,
                                            "idx": 115337
                                          }
                                        }
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "React$3"
                              },
                              "init": {
                                "type": "BinaryExpression",
                                "operator": "||",
                                "left": {
                                  "type": "SequenceExpression",
                                  "expressions": [
                                    {
                                      "type": "BinaryExpression",
                                      "operator": "&&",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "React$2"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "React"
                                      }
                                    }
                                  ]
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "React$2"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "BindingIdentifier",
                                "name": "react"
                              },
                              "init": {
                                "type": "BinaryExpression",
                                "operator": "||",
                                "left": {
                                  "type": "StaticMemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "React$3"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "default"
                                  }
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "React$3"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "ReturnStatement",
                          "argument": {
                            "type": "Identifier",
                            "name": "react"
                          }
                        }
                      ]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                  }
                ]
              }
            ]
          }
        ]
      }
    }
  ],
  "sourceType": "script"
}
